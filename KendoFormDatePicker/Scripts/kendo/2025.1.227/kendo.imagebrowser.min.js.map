{"version":3,"sources":["raw-js/kendo.imagebrowser.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendo","_globals","Imagebrowser","this","$","undefined$1","window","FileBrowser","ui","isPlainObject","extend","isFunction","trimSlashesRegExp","ERROR","NS","NAMEFIELD","SIZEFIELD","TYPEFIELD","DEFAULTSORTORDER","field","dir","EMPTYTILE","template","text","icon","iconClass","htmlEncode","data","schemas","imagebrowser","items","model","id","fields","name","size","type","transports","RemoteTransport","init","options","fn","call","_call","path","read","create","destroy","update","ImageBrowser","element","addClass","fileTypes","value","that","selected","_selectedItem","imageUrl","transport","get","match","concatPaths","replace","format","encodeURIComponent","_fileUpload","e","file","filterRegExp","RegExp","split","join","fileName","files","fileSize","fileNameField","sizeField","test","_createFile","_uploading","upload","one","_insertFileToList","set","response","_getFieldName","_tiles","listView","filter","attr","_scroll","preventDefault","_showMessage","messages","invalidFileType","_content","list","appendTo","on","_dblClick","bind","ListView","layout","flex","direction","wrap","dataSource","_itemTmpl","editTemplate","_editTmpl","selectable","autoBind","dataBinding","toolbar","find","parent","action","progress","content","wrapper","dataBound","view","length","append","emptyFolder","change","_listViewChange","_dataSource","typeSortOrder","nameSortOrder","sort","schema","_errorHandler","unbind","_error","DataSource","_loadImage","li","dataItem","getByUid","thumbnailUrl","img","alt","urlJoin","hide","prev","remove","end","fadeIn","after","indexOf","_override","Date","getTime","loaded","clearTimeout","_timeout","setTimeout","height","_outerHeight","viewTop","scrollTop","viewBottom","each","top","offsetTop","bottom","offsetHeight","showLoading","uid","suffix","Math","round","sizeFormatter","plugin","jQuery","kendo$1","__meta__","category","description","hidden","depends","default","Object","defineProperty"],"mappings":"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","file":"kendo.imagebrowser.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('kendo.filebrowser.js'), require('kendo.icons.js')) :\n    typeof define === 'function' && define.amd ? define(['exports', 'kendo.filebrowser', 'kendo.icons'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.kendo = global.kendo || {}, global.kendo._globals = global.kendo._globals || {}, global.kendo._globals.Imagebrowser = {})));\n})(this, (function (exports) {\n    const __meta__ = {\n        id: \"imagebrowser\",\n        name: \"ImageBrowser\",\n        category: \"web\",\n        description: \"\",\n        hidden: true,\n        depends: [ \"filebrowser\", \"icons\" ]\n    };\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            FileBrowser = kendo.ui.FileBrowser,\n            isPlainObject = $.isPlainObject,\n            extend = $.extend,\n            isFunction = kendo.isFunction,\n            trimSlashesRegExp = /(^\\/|\\/$)/g,\n            ERROR = \"error\",\n            NS = \".kendoImageBrowser\",\n            NAMEFIELD = \"name\",\n            SIZEFIELD = \"size\",\n            TYPEFIELD = \"type\",\n            DEFAULTSORTORDER = { field: TYPEFIELD, dir: \"asc\" },\n            EMPTYTILE = kendo.template(({ text }) => `<div class=\"k-listview-item k-listview-item-empty\"><span class=\"k-file-preview\">${kendo.ui.icon({ icon: \"none\", iconClass: \"k-file-icon\" })}</span><span class=\"k-file-name\">${kendo.htmlEncode(text)}</span></div>`);\n\n        extend(true, kendo.data, {\n            schemas: {\n                \"imagebrowser\": {\n                    data: function(data) {\n                        return data.items || data || [];\n                    },\n                    model: {\n                        id: \"name\",\n                        fields: {\n                            name: \"name\",\n                            size: \"size\",\n                            type: \"type\"\n                        }\n                    }\n                }\n            }\n        });\n\n        extend(true, kendo.data, {\n            transports: {\n                \"imagebrowser\": kendo.data.RemoteTransport.extend({\n                    init: function(options) {\n                        kendo.data.RemoteTransport.fn.init.call(this, $.extend(true, {}, this.options, options));\n                    },\n                    _call: function(type, options) {\n                        options.data = $.extend({}, options.data, { path: this.options.path() });\n\n                        if (isFunction(this.options[type])) {\n                            this.options[type].call(this, options);\n                        } else {\n                            kendo.data.RemoteTransport.fn[type].call(this, options);\n                        }\n                    },\n                    read: function(options) {\n                        this._call(\"read\", options);\n                    },\n                    create: function(options) {\n                        this._call(\"create\", options);\n                    },\n                    destroy: function(options) {\n                        this._call(\"destroy\", options);\n                    },\n                    update: function() {\n                        //updates are handled by the upload\n                    },\n                    options: {\n                        read: {\n                            type: \"POST\"\n                        },\n                        update: {\n                            type: \"POST\"\n                        },\n                        create: {\n                            type: \"POST\"\n                        },\n                        destroy: {\n                            type: \"POST\"\n                        }\n                    }\n                })\n            }\n        });\n\n        function offsetTop(element) {\n            return element.offsetTop - $(element).height();\n        }\n\n        function concatPaths(path, name) {\n            if (path === undefined$1 || !path.match(/\\/$/)) {\n                path = (path || \"\") + \"/\";\n            }\n            return path + name;\n        }\n\n        function sizeFormatter(value) {\n            if (!value) {\n                return \"\";\n            }\n\n            var suffix = \" bytes\";\n\n            if (value >= 1073741824) {\n                suffix = \" GB\";\n                value /= 1073741824;\n            } else if (value >= 1048576) {\n                suffix = \" MB\";\n                value /= 1048576;\n            } else if (value >= 1024) {\n                suffix = \" KB\";\n                value /= 1024;\n            }\n\n            return Math.round(value * 100) / 100 + suffix;\n        }\n\n        var ImageBrowser = FileBrowser.extend({\n            init: function(element, options) {\n                var that = this;\n\n                options = options || {};\n\n                FileBrowser.fn.init.call(that, element, options);\n\n                that.element.addClass(\"k-imagebrowser\");\n            },\n\n            options: {\n                name: \"ImageBrowser\",\n                fileTypes: \"*.png,*.gif,*.jpg,*.jpeg\"\n            },\n\n            value: function() {\n                var that = this,\n                    selected = that._selectedItem(),\n                    path,\n                    imageUrl = that.options.transport.imageUrl;\n\n                if (selected && selected.get(TYPEFIELD) === \"f\") {\n                    path = concatPaths(that.path(), selected.get(NAMEFIELD)).replace(trimSlashesRegExp, \"\");\n                    if (imageUrl) {\n                        path = isFunction(imageUrl) ? imageUrl(path) : kendo.format(imageUrl, encodeURIComponent(path));\n                    }\n                    return path;\n                }\n            },\n\n            _fileUpload: function(e) {\n                var that = this,\n                    options = that.options,\n                    fileTypes = options.fileTypes,\n                    filterRegExp = new RegExp((\"(\" + fileTypes.split(\",\").join(\")|(\") + \")\").replace(/\\*\\./g , \".*.\"), \"i\"),\n                    fileName = e.files[0].name,\n                    fileSize = e.files[0].size,\n                    fileNameField = NAMEFIELD,\n                    sizeField = SIZEFIELD,\n                    file;\n\n                if (filterRegExp.test(fileName)) {\n                    e.data = { path: that.path() };\n\n                    file = that._createFile(fileName, fileSize);\n\n                    if (!file) {\n                        e.preventDefault();\n                    } else {\n                        file._uploading = true;\n\n                        that.upload.one(\"error\", function() {\n                            file = undefined$1;\n                        });\n\n                        that.upload.one(\"success\", function(e) {\n                            if (file) {\n                                delete file._uploading;\n\n                                var model = that._insertFileToList(file);\n\n                                model.set(fileNameField, e.response[that._getFieldName(fileNameField)]);\n                                model.set(sizeField, e.response[that._getFieldName(sizeField)]);\n\n                                that._tiles = that.listView.items().filter(\"[\" + kendo.attr(\"type\") + \"=f]\");\n                                that._scroll();\n                            }\n                        });\n                    }\n                } else {\n                    e.preventDefault();\n                    that._showMessage(kendo.htmlEncode(kendo.format(options.messages.invalidFileType, fileName, fileTypes)));\n                }\n            },\n\n            _content: function() {\n                var that = this;\n\n                that.list = $('<div class=\"k-filemanager-listview\" />')\n                    .appendTo(that.element)\n                    .on(\"dblclick\" + NS, \".k-listview-item\", that._dblClick.bind(that));\n\n                that.listView = new kendo.ui.ListView(that.list, {\n                    layout: \"flex\",\n                    flex: {\n                        direction: \"row\",\n                        wrap: \"wrap\"\n                    },\n                    dataSource: that.dataSource,\n                    template: that._itemTmpl(),\n                    editTemplate: that._editTmpl(),\n                    selectable: true,\n                    autoBind: false,\n                    dataBinding: function(e) {\n\n                        that.toolbar.find(\".k-i-x,.k-svg-i-x\").parent().addClass(\"k-disabled\");\n\n                        if (e.action === \"remove\" || e.action === \"sync\") {\n                            e.preventDefault();\n                            kendo.ui.progress(that.listView.content, false);\n                            /* If there are no files left the loader is displayed over the wrapper instead of the content. */\n                            kendo.ui.progress(that.listView.wrapper, false);\n                        }\n                    },\n                    dataBound: function() {\n                        if (that.dataSource.view().length) {\n                            that._tiles = this.items().filter(\"[\" + kendo.attr(\"type\") + \"=f]\");\n                            that._scroll();\n                        } else {\n                            this.content.append(EMPTYTILE({ text: that.options.messages.emptyFolder }));\n                        }\n                    },\n                    change: that._listViewChange.bind(that)\n                });\n\n                that.listView.content.on(\"scroll\" + NS, that._scroll.bind(that));\n            },\n\n            _dataSource: function() {\n                var that = this,\n                    options = that.options,\n                    transport = options.transport,\n                    typeSortOrder = extend({}, DEFAULTSORTORDER),\n                    nameSortOrder = { field: NAMEFIELD, dir: \"asc\" },\n                    schema,\n                    dataSource = {\n                        type: transport.type || \"imagebrowser\",\n                        sort: [typeSortOrder, nameSortOrder]\n                    };\n\n                if (isPlainObject(transport)) {\n                    transport.path = that.path.bind(that);\n                    dataSource.transport = transport;\n                }\n\n                if (isPlainObject(options.schema)) {\n                    dataSource.schema = options.schema;\n                } else if (transport.type && isPlainObject(kendo.data.schemas[transport.type])) {\n                    schema = kendo.data.schemas[transport.type];\n                }\n\n                if (that.dataSource && that._errorHandler) {\n                    that.dataSource.unbind(ERROR, that._errorHandler);\n                } else {\n                    that._errorHandler = that._error.bind(that);\n                }\n\n                that.dataSource = kendo.data.DataSource.create(dataSource)\n                    .bind(ERROR, that._errorHandler);\n            },\n\n            _loadImage: function(li) {\n                var that = this,\n                    element = $(li),\n                    dataItem = that.dataSource.getByUid(element.attr(kendo.attr(\"uid\"))),\n                    name = dataItem.get(NAMEFIELD),\n                    thumbnailUrl = that.options.transport.thumbnailUrl,\n                    img = $(\"<img />\", { alt: name }),\n                    urlJoin = \"?\";\n\n                if (dataItem._uploading) {\n                    return;\n                }\n\n                img.hide()\n                   .on(\"load\" + NS, function() {\n                       $(this).prev().remove().end().addClass(\"k-image k-file-image\").fadeIn();\n                   });\n\n                element.find(\".k-i-loading\").after(img);\n\n                if (isFunction(thumbnailUrl)) {\n                    thumbnailUrl = thumbnailUrl(that.path(), encodeURIComponent(name));\n                } else {\n                    if (thumbnailUrl.indexOf(\"?\") >= 0) {\n                        urlJoin = \"&\";\n                    }\n\n                    thumbnailUrl = thumbnailUrl + urlJoin + \"path=\" + encodeURIComponent(that.path() + name);\n                    if (dataItem._override) {\n                        thumbnailUrl += \"&_=\" + new Date().getTime();\n                        delete dataItem._override;\n                    }\n                }\n\n                // IE8 will trigger the load event immediately when the src is assigned\n                // if the image is loaded from the cache\n                img.attr(\"src\", thumbnailUrl);\n\n                li.loaded = true;\n            },\n\n            _scroll: function() {\n                var that = this;\n                if (that.options.transport && that.options.transport.thumbnailUrl) {\n                    clearTimeout(that._timeout);\n\n                    that._timeout = setTimeout(function() {\n\n                        var height = kendo._outerHeight(that.listView.content),\n                            viewTop = that.listView.content.scrollTop(),\n                            viewBottom = viewTop + height;\n\n                        that._tiles.each(function() {\n                            var top = offsetTop(this),\n                                bottom = top + this.offsetHeight;\n\n                            if ((top >= viewTop && top < viewBottom) || (bottom >= viewTop && bottom < viewBottom)) {\n                                that._loadImage(this);\n                            }\n\n                            if (top > viewBottom) {\n                                return false;\n                            }\n                        });\n\n                        that._tiles = that._tiles.filter(function() {\n                            return !this.loaded;\n                        });\n\n                    }, 250);\n                }\n            },\n\n            _itemTmpl: function() {\n                var that = this;\n\n                const result = (data) => {\n                    const showLoading = that.options.transport && that.options.transport.thumbnailUrl;\n\n                    return `<div class=\"k-listview-item\" ${kendo.attr(\"uid\")}=\"${data.uid}\" ${kendo.attr(\"type\")}=\"${data[TYPEFIELD]}\">` +\n                        `${data[TYPEFIELD] === 'd' ?\n                        `<div class=\"k-file-preview\">${kendo.ui.icon({ icon: \"folder\", iconClass: \"k-file-icon\" })}</div>` :\n                        `<div class=\"k-file-preview\">${showLoading ? '<span class=\"k-file-icon k-icon k-i-loading\"></span>' : kendo.ui.icon({ icon: \"file\", iconClass: \"k-file-icon\" }) }</div>`}` +\n                        `<span class=\"k-file-name\">${data[NAMEFIELD]}</span>` +\n                        `${data[TYPEFIELD] === 'f' ? `<span class=\"k-file-size\">${sizeFormatter(data[SIZEFIELD])}</span>` : '' }` +\n                    `</div>`;\n                };\n\n                return kendo.template(result);\n            }\n        });\n\n        kendo.ui.plugin(ImageBrowser);\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    exports.__meta__ = __meta__;\n    exports.default = kendo$1;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}