{"version":3,"sources":["raw-js/kendo.otpinput.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendo","_globals","Otpinput","this","$","undefined$1","window","Widget","ui","TextBox","HIDDEN","keys","OTPINPUT","OTPSEPARATOR","INPUT","NS","CHANGE","INPUTGROUP","STATEINVALID","INTEGER_REGEXP","FOCUS_RIGHT","FOCUS_LEFT","FOCUS","OTPInput","extend","init","element","options","that","fn","call","value","val","separator","isPresent","inputMode","attr","_wrapper","_renderGroups","items","_attachHandlers","on","_change","bind","events","name","type","placeholder","readonly","enable","space","size","rounded","fillMode","inputs","_inputs","isEmpty","each","getKendoTextBox","focus","select","groupLength","_groupLength","_value","_emptyValues","_validate","values","toString","split","length","splice","forEach","input","index","at","newValue","destroy","map","closest","remove","wrapper","find","unwrap","removeClass","removeAttr","setOptions","deepExtend","e","trigger","sizeClass","cssProperties","defaultValues","addClass","wrap","parent","isInteger","i","_renderInput","push","append","group","Array","isArray","reduce","n","otpCharacterCounter","item","_renderSeparator","maxLength","widgetWrapper","separatorWrapper","isFunction","_input","currentTarget","oldValue","_oldValue","_blinkInvalidState","inputGroups","focusedElement","currentIndex","join","_moveFocus","itemToFocus","inputSelector","_focus","_beforeInput","_keyDown","_paste","test","isRtl","support","pastedValue","clipboardData","originalEvent","getData","preventDefault","_shiftFocus","emptyInputs","filter","isBlank","emptyInput","first","key","keyCode","which","shouldTriggerChange","target","ctrlKey","shiftKey","TAB","LEFT","RIGHT","DELETE","is","BACKSPACE","elements","direction","eq","toWrapper","hasClass","_addInvalidState","clearTimeout","_invalidStateTimeout","setTimeout","_removeInvalidState","inputWrappers","registerPrefix","plugin","jQuery","kendo$1","__meta__","id","category","description","depends","default","Object","defineProperty"],"mappings":"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","file":"kendo.otpinput.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('kendo.core.js'), require('kendo.textbox.js')) :\n    typeof define === 'function' && define.amd ? define(['exports', 'kendo.core', 'kendo.textbox'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.kendo = global.kendo || {}, global.kendo._globals = global.kendo._globals || {}, global.kendo._globals.Otpinput = {})));\n})(this, (function (exports) {\n    const __meta__ = {\n        id: \"otpinput\",\n        name: \"OTPInput\",\n        category: \"web\",\n        description: \"The OTPInput widget provides a rich input for selecting values or ranges of values.\",\n        depends: [\"core\", \"textbox\"]\n    };\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            Widget = kendo.ui.Widget,\n            TextBox = kendo.ui.TextBox,\n            HIDDEN = \"k-hidden\",\n            ui = kendo.ui,\n            keys = kendo.keys,\n            KOTP = \"k-otp\",\n            OTPINPUT = \"k-otp-input\",\n            OTPSEPARATOR = \"k-otp-separator\",\n            INPUT = \"k-input-inner\",\n            NS = \".kendoOtpInput\",\n            CHANGE = \"change\",\n            INPUTGROUP = \"k-input-group\",\n            STATEINVALID = \"k-invalid\",\n            INTEGER_REGEXP = /^[0-9]\\d*$/,\n            ARIA_HIDDEN = \"aria-hidden\",\n            ARIA_LABEL = \"aria-label\",\n            ROLE = \"role\",\n            FOCUS_RIGHT = \"right\",\n            FOCUS_LEFT = \"left\",\n            FOCUS = \"focus\";\n\n\n            var OTPInput = Widget.extend({\n                init: function(element, options) {\n                    var that = this;\n\n                    Widget.fn.init.call(that, element, options);\n                    options = $.extend(true, {}, options);\n\n                    that.options.value = options.value || that.element.val();\n                    that.options.separator = kendo.isPresent(options.separator) ? options.separator : null;\n                    that.options.inputMode = options.inputMode || $(element).attr(\"inputmode\") || \"text\";\n\n                    that._wrapper();\n                    that._renderGroups(that.options.items);\n                    that._attachHandlers();\n                    that.value(that.options.value);\n\n                    that.element.on(CHANGE + NS, that._change.bind(that));\n                },\n\n                events: [\n                    CHANGE\n                ],\n\n                options: {\n                    name: \"OTPInput\",\n                    type: \"text\",\n                    value: '',\n                    placeholder: \"\",\n                    separator: null,\n                    readonly: false,\n                    enable: true,\n                    space: false,\n                    size: \"medium\",\n                    rounded: \"medium\",\n                    fillMode: \"solid\"\n                },\n                enable: function(enable) {\n                    let that = this,\n                        inputs = that._inputs;\n\n                    if (!kendo.isEmpty(inputs)) {\n                        $(inputs).each(function()\n                        {\n                            let widget = this.getKendoTextBox();\n                            widget.enable(enable);\n                        });\n                    }\n                },\n                readonly: function(readonly) {\n                    let that = this,\n                        inputs = that._inputs;\n\n                    if (!kendo.isEmpty(inputs)) {\n                        $(inputs).each(function()\n                        {\n                            let widget = this.getKendoTextBox();\n                            widget.readonly(readonly);\n                        });\n                    }\n                },\n                focus: function() {\n                    let that = this,\n                        inputs = that._inputs;\n\n                    if (!kendo.isEmpty(inputs)) {\n                        inputs[0]\n                            .focus()\n                            .select();\n                    }\n                },\n                value: function(value) {\n                    let that = this,\n                        groupLength = that._groupLength,\n                        type = that.options.type;\n\n                    if (value === undefined$1) {\n                        return that._value;\n                    }\n\n                    if (value === null) {\n                        that.element.val(value);\n                        that._value = value;\n                        that._emptyValues();\n                    }\n\n                    if (groupLength > 0 && value) {\n                        that._emptyValues();\n\n                        if (!that._validate(type, value)) {\n                            return;\n                        }\n\n                        let values = value.toString().split(\"\");\n\n                        if (values.length > groupLength) {\n                            values = values.splice(0, groupLength);\n                        }\n\n                        that._inputs.forEach(function(input, index) {\n                            let value = values.at(index);\n                            $(input)\n                                .val(value);\n                        });\n\n                        let newValue = '';\n\n                        that._inputs.forEach(function(input) {\n                            newValue = newValue += $(input).val();\n                        });\n\n                        that.element.val(newValue);\n                        that._value = newValue;\n                    }\n                },\n                destroy: function() {\n                    let that = this,\n                        inputs = that._inputs;\n\n                    if (!kendo.isEmpty(inputs)) {\n                        inputs.forEach(function(input) {\n                            let element = $(input)[0],\n                                textBox = $(element).getKendoTextBox();\n\n                            textBox.destroy();\n                        });\n\n                        let inputWrappers = inputs\n                            .map(function(input) {\n                                return $(input)[0]\n                                    .closest(`.${OTPINPUT}`);\n                            });\n\n                        inputWrappers.forEach(function(element) {\n                            $(element).remove();\n                        });\n\n                        that.wrapper\n                            .find(`.${INPUTGROUP}`)\n                            .remove();\n\n                        that.wrapper\n                            .find(`.${OTPSEPARATOR}`)\n                            .remove();\n\n                        that.element\n                            .unwrap()\n                            .removeClass(HIDDEN)\n                            .removeAttr(\"type\")\n                            .removeAttr(\"aria-hidden\");\n\n                        Widget.fn.destroy.call(that);\n                    }\n                },\n                setOptions: function(options) {\n                    let that = this;\n\n                    that.destroy();\n\n                    kendo.deepExtend(this.options, options);\n                    that.init(that.element, options);\n                },\n                _change: function(e) {\n                    let that = this,\n                        newValue = that.element.val();\n\n                    that._value = newValue;\n                    that.trigger(CHANGE, { value: newValue });\n                },\n                _wrapper: function() {\n                    let that = this,\n                        element = that.element,\n                        wrapper;\n\n                    let sizeClass = kendo.cssProperties.defaultValues['size'][that.options.size];\n\n                    wrapper = element.addClass(HIDDEN)\n                           .attr(\"type\", \"hidden\")\n                           .attr(ARIA_HIDDEN, true)\n                           .wrap(`<div class='k-otp k-otp-${sizeClass || \"md\"}' ${ROLE}=\"group\" ></div>`)\n                           .parent();\n\n                    that.wrapper = wrapper;\n                },\n                _renderGroups: function(items) {\n                    let that = this,\n                        separator = that.options.separator,\n                        inputs = [];\n\n                    that._inputs = [];\n\n                    if (kendo.isInteger(items)) {\n                        that._groupLength = items;\n                        for (let i = 0; i < items; i++) {\n                            let input = that._renderInput(i + 1);\n                            inputs.push(input);\n                            that._inputs.push($(input).find(`.${INPUT}`));\n                        }\n\n                        let space = that.options.space;\n\n                        if (!space) {\n                            let group = $(`<div class=\"${INPUTGROUP} k-input-group-solid\"></div>`)\n                            .append(inputs);\n\n                            that.wrapper.append(group);\n                        } else {\n                            that.wrapper.append(inputs);\n                        }\n\n                        inputs = [];\n                    } else if (Array.isArray(items)) {\n                        that._groupLength = items.reduce((n, { groupLength }) => n + groupLength, 0);\n\n                        let otpCharacterCounter = 0;\n                        items.forEach(function(item, index) {\n                            if (item.groupLength) {\n                                for (let i = 0; i < item.groupLength; i++) {\n                                    ++otpCharacterCounter;\n                                    let input = that._renderInput(otpCharacterCounter);\n                                    inputs.push(input);\n                                    that._inputs.push($(input).find(`.${INPUT}`));\n                                }\n\n                                let space = that.options.space;\n\n                                if (!space) {\n                                    let group = $(`<div class=\"${INPUTGROUP} k-input-group-solid\"></div>`)\n                                        .append(inputs);\n\n                                    that.wrapper.append(group);\n\n                                    if (kendo.isPresent(separator) && !(index == items.length - 1)) {\n                                        that.wrapper.append(that._renderSeparator());\n                                    }\n                                } else {\n                                    if (!(index == items.length - 1)) {\n                                        inputs.push(that._renderSeparator());\n                                    }\n                                    that.wrapper.append(inputs);\n                                }\n                                inputs = [];\n                            }\n                        });\n                        otpCharacterCounter = 0;\n                    }\n                },\n                _renderInput: function(index) {\n                    let that = this,\n                        inputMode = that.options.inputMode,\n                        input;\n\n                    input = $(`<input>`)\n                            .addClass(INPUT)\n                            .attr(\"inputmode\", inputMode)\n                            .attr(\"type\", that.options.type == \"password\" ? \"password\" : \"text\")\n                            .attr(ARIA_LABEL, that.options.type == \"numeric\" ? `Enter Otp Numerical Character ${index}` : `Enter Otp Character ${index}`)\n                            .attr(\"placeholder\", that.options.placeholder)\n                            .attr(\"autocomplete\", \"off\")\n                            .attr(\"maxlength\", 1);\n\n\n                    let options = $.extend({}, {\n                        maxLength: 1,\n                        size: that.options.size,\n                        rounded: that.options.rounded,\n                        fillMode: that.options.fillMode,\n                        enable: that.options.enable,\n                        readonly: that.options.readonly\n                    });\n\n\n                    let widget = new TextBox(input, options),\n                        widgetWrapper = widget.wrapper;\n\n                    widgetWrapper\n                        .removeClass(INPUT)\n                        .addClass(OTPINPUT);\n\n                    return widgetWrapper;\n                },\n                _renderSeparator: function() {\n                    let that = this,\n                        separator = that.options.separator;\n\n                        let separatorWrapper = $(`<div class=\"${OTPSEPARATOR}\"></div>`);\n\n                        if (kendo.isPresent(separator)) {\n                            kendo.isFunction(separator) ? separatorWrapper.append(separator()) : separatorWrapper.append(separator);\n                        }\n\n                        return separatorWrapper;\n                },\n                _input: function(e) {\n                    let that = this,\n                        input = e.currentTarget,\n                        groupLength = that._inputs.length,\n                        oldValue = that._oldValue,\n                        value = e.currentTarget.value,\n                        type = that.options.type;\n\n                    if (!that._validate(type, value)) {\n                        that._blinkInvalidState(input);\n\n                        $(input).val('');\n\n                        if (oldValue != undefined$1) {\n                            $(input).val(oldValue);\n                            delete that._oldValue;\n                        }\n\n                        $(input).trigger(FOCUS);\n\n                        return;\n                    }\n\n                    let inputGroups = $(that.wrapper).find(`.${OTPINPUT}`),\n                        focusedElement = inputGroups.find(\":focus\"),\n                        currentIndex = inputGroups.find(`.${INPUT}`).index(focusedElement),\n                        itemToFocus;\n\n                        let newValue = that._inputs\n                            .map(function(item) {\n                                return $(item).val();\n                            })\n                            .join('');\n\n                        if (newValue != that._value) {\n                            that.element.val('');\n                            that.element.val(newValue);\n                            that._value = newValue;\n\n                            that.trigger(CHANGE, { value: newValue });\n                        }\n\n                        that._moveFocus(itemToFocus, currentIndex, groupLength, FOCUS_RIGHT);\n                },\n                _attachHandlers: function() {\n                    let that = this,\n                        inputs = that._inputs,\n                        inputSelector = `.${INPUT}`;\n\n                    if (!kendo.isEmpty(inputs)) {\n                        that.wrapper\n                            .on(\"focus\" + NS, inputSelector, that._focus.bind(that))\n                            .on(\"beforeinput\" + NS, inputSelector, that._beforeInput.bind(that))\n                            .on(\"input\" + NS, inputSelector, that._input.bind(that))\n                            .on(\"keydown\" + NS, inputSelector, that._keyDown.bind(that))\n                            .on(\"paste\" + NS, inputSelector, that._paste.bind(that));\n                    }\n\n                },\n                _beforeInput: function(e) {\n                    let that = this,\n                        input = e.currentTarget;\n\n                    if (input && $(input).val() != undefined$1) {\n                        let value = $(input).val();\n                        that._oldValue = value;\n                    }\n                },\n                _focus: function(e) {\n                    let element = e.currentTarget;\n\n                    if (element) {\n                        $(element).select();\n                    }\n                },\n                _validate: function(type, value) {\n                    if (type == \"number\") {\n                        return INTEGER_REGEXP.test(value);\n                    }\n\n                    return true;\n                },\n                _paste: function(e) {\n                    let that = this,\n                        inputs = that._inputs,\n                        readonly = that.options.readonly,\n                        isRtl = kendo.support.isRtl(that.element),\n                        inputGroups = $(that.wrapper).find(`.${OTPINPUT}`),\n                        type = that.options.type,\n                        clipboardData = e.clipboardData || e.originalEvent.clipboardData || window.clipboardData,\n                        pastedValue = clipboardData.getData('text'),\n                        itemToFocus;\n\n                    e.preventDefault();\n                    if (!pastedValue || readonly == true) {\n                        return;\n                    }\n\n                    if (!that._validate(type, pastedValue)) {\n                        this._blinkInvalidState.bind(that);\n                        this._blinkInvalidState(that.wrapper);\n                        return;\n                    }\n\n                    that.value(pastedValue);\n\n                    that.trigger(CHANGE, { newValue: that._value });\n\n                    if (isRtl) {\n\n                        if (that._value.length == that._inputs.length) {\n                           itemToFocus = that._shiftFocus(inputGroups, 0, FOCUS_LEFT);\n                        } else {\n                            let emptyInputs = inputs\n                                 .map(function(input) {\n                                     return $(input);\n                                 })\n                                 .filter(function(element) {\n                                     let value = element.val();\n                                     return value == '' || kendo.isBlank(value);\n                                 });\n\n                             let emptyInput = $(emptyInputs)[0];\n\n                             itemToFocus = $(emptyInput).closest(`.${OTPINPUT}`);\n                         }\n\n                         $(itemToFocus)\n                            .find(\"input\")\n                            .trigger(FOCUS);\n                    } else {\n\n                        if (that._value.length == that._inputs.length) {\n                            itemToFocus = that._shiftFocus(inputGroups, inputGroups.length - 2, FOCUS_RIGHT);\n                        } else {\n                           let emptyInputs = inputs\n                                .map(function(input) {\n                                    return $(input);\n                                })\n                                .filter(function(element) {\n                                    let value = element.val();\n                                    return value == '' || kendo.isBlank(value);\n                                });\n\n                            let emptyInput = $(emptyInputs).first()[0];\n\n                            itemToFocus = $(emptyInput).closest(`.${OTPINPUT}`);\n                        }\n\n                        $(itemToFocus)\n                            .find(\"input\")\n                            .trigger(FOCUS);\n                    }\n\n                },\n                _keyDown: function(e) {\n                    let that = this,\n                        key = e.keyCode || e.which,\n                        input = e.currentTarget,\n                        groupLength = that._inputs.length,\n                        inputGroups = $(that.wrapper).find(`.${OTPINPUT}`),\n                        focusedElement = inputGroups.find(\":focus\"),\n                        shouldTriggerChange = focusedElement.val() != '',\n                        currentIndex = inputGroups.find(`.${INPUT}`).index(focusedElement),\n                        isRtl = kendo.support.isRtl(that.element),\n                        itemToFocus;\n\n                    if (e.target != input || e.ctrlKey || (key >= 112 && key <= 123) || (key >= 96 && key <= 111) || e.shiftKey && key == keys.TAB || key == keys.TAB) {\n                        return;\n                    }\n\n                    if ((key === keys.LEFT && !isRtl) || (e.keyCode === keys.RIGHT && isRtl)) {\n                        itemToFocus = that._shiftFocus(inputGroups, currentIndex, FOCUS_LEFT);\n\n                        that._moveFocus(itemToFocus, currentIndex, groupLength, FOCUS_LEFT);\n\n                        e.preventDefault();\n                    } else if ((key === keys.LEFT && isRtl) || (e.keyCode === keys.RIGHT && !isRtl)) {\n                        itemToFocus = that._shiftFocus(inputGroups, currentIndex, FOCUS_RIGHT);\n\n                        that._moveFocus(itemToFocus, currentIndex, groupLength, FOCUS_RIGHT);\n\n                        e.preventDefault();\n                    } else if (key === keys.DELETE) {\n                        e.preventDefault();\n                        if (!$(focusedElement).is(\"[readonly]\")) {\n                            focusedElement.val('');\n\n                            let newValue = that._inputs\n                            .map(function(item) {\n                                return $(item).val();\n                            })\n                            .join('');\n\n                            if (shouldTriggerChange) {\n                                that._value = newValue;\n                                that.trigger(CHANGE, { value: newValue });\n                            }\n\n                            that.element.val('');\n                            that.element.val(newValue);\n                        }\n                    } else if ((key) == keys.BACKSPACE) {\n                        e.preventDefault();\n\n                        itemToFocus = that._shiftFocus(inputGroups, currentIndex, FOCUS_LEFT);\n\n                        if (!$(focusedElement).is(\"[readonly]\")) {\n                            focusedElement.val('');\n\n                            let newValue = that._inputs\n                                .map(function(item) {\n                                    return $(item).val();\n                                })\n                                .join('');\n\n                            if (shouldTriggerChange) {\n                                that._value = newValue;\n                                that.trigger(CHANGE, { value: newValue });\n                            }\n\n                            that.element.val('');\n                            that.element.val(newValue);\n\n                            if (currentIndex > 0 && !isRtl) {\n                                itemToFocus.find(\"input\").trigger(FOCUS);\n                            } else if (currentIndex == inputGroups.length - 1 && isRtl) {\n                                itemToFocus\n                                    .find(\"input\")\n                                    .trigger(FOCUS);\n\n                            } else {\n                                if (currentIndex > 0 && !isRtl || currentIndex > 0 && isRtl) {\n                                    itemToFocus\n                                        .find(\"input\")\n                                        .trigger(FOCUS);\n                                }\n                            }\n                        }\n                    }\n                },\n                _shiftFocus: function(elements, currentIndex, direction) {\n                    switch (direction) {\n                        case FOCUS_RIGHT:\n                            return currentIndex + 1 === elements.length ? elements.eq(0) : $(elements[currentIndex + 1]);\n                        case FOCUS_LEFT:\n                            return currentIndex === 0 ? elements.eq(elements.length - 1) : $(elements[currentIndex - 1]);\n                        default:\n                            return null;\n                    }\n                },\n                _moveFocus: function(itemToFocus, currentIndex, groupLength, direction) {\n                    let that = this,\n                        inputGroups = $(that.wrapper).find(`.${OTPINPUT}`);\n\n                    if (direction == FOCUS_RIGHT) {\n                        if (currentIndex != groupLength - 1) {\n                            itemToFocus = that._shiftFocus(inputGroups, currentIndex, FOCUS_RIGHT);\n                            itemToFocus\n                                .find(\"input\")\n                                .trigger(FOCUS);\n                        }\n                    } else if (direction == FOCUS_LEFT) {\n                        if (currentIndex > 0) {\n                            itemToFocus = that._shiftFocus(inputGroups, currentIndex, FOCUS_LEFT);\n                            itemToFocus\n                                .find(\"input\")\n                                .trigger(FOCUS);\n                        }\n                    }\n                },\n                _emptyValues: function() {\n                    let that = this;\n\n                    that._inputs.forEach(function(input) {\n                        $(input)\n                            .val('');\n                    });\n\n                },\n                _blinkInvalidState: function(element) {\n                    let that = this,\n                        toWrapper = $(element).hasClass(KOTP);\n\n                    that._addInvalidState.bind(that);\n                    that._addInvalidState(element, toWrapper);\n\n                    clearTimeout(that._invalidStateTimeout);\n\n                    that._invalidStateTimeout = setTimeout(function() {\n                        that._removeInvalidState.bind(that);\n                        that._removeInvalidState(element, toWrapper);\n                    }, 100);\n                },\n                _addInvalidState: function(element, toWrapper = false) {\n                    let that = this,\n                        inputs = that._inputs;\n\n                    if (!toWrapper) {\n                        $(element)\n                            .closest(`.${OTPINPUT}`)\n                            .addClass(STATEINVALID);\n                    } else {\n                        if (!kendo.isEmpty(inputs)) {\n                            let inputWrappers = inputs\n                                .map(function(input) {\n                                    return $(input).closest(`.${OTPINPUT}`);\n                                });\n\n                            $(inputWrappers).each(function() {\n                                $(this).addClass(STATEINVALID);\n                            });\n                        }\n                    }\n                },\n                _removeInvalidState: function(toWrapper = false) {\n                    let that = this,\n                        inputs = that._inputs;\n\n                    if (!toWrapper) {\n                        $(that)\n                        .closest(`.${OTPINPUT}`)\n                        .removeClass(STATEINVALID);\n                    } else {\n                        if (!kendo.isEmpty(inputs)) {\n\n                            let inputWrappers = inputs\n                            .map(function(input) {\n                                return $(input).closest(`.${OTPINPUT}`);\n                            });\n\n                            $(inputWrappers).each(function() {\n                                $(this).removeClass(STATEINVALID);\n                            });\n\n                        }\n                    }\n                    that._invalidStateTimeout = null;\n                }\n            });\n\n            kendo.cssProperties.registerPrefix(\"OTPInput\", \"k-input-\");\n\n        ui.plugin(OTPInput);\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    exports.__meta__ = __meta__;\n    exports.default = kendo$1;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}