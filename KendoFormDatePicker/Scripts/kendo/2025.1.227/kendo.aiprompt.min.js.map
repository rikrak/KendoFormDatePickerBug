{"version":3,"sources":["raw-js/kendo.aiprompt.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendo","_globals","Aiprompt","this","$","window","Widget","ui","extend","FOCUS","cssClasses","defaultViews","prompt","type","name","buttonIcon","output","commands","custom","AIPrompt","init","element","options","that","fn","call","views","length","promptCommands","push","promptOutputs","_initLayout","_initViews","_initToolbar","activeView","notify","enabled","toolbarItems","popup","messages","promptView","outputView","commandsView","customView","promptPlaceholder","promptSuggestions","generateOutput","outputTitle","outputRetryTitle","copyOutput","retryGeneration","ratePositive","rateNegative","showOutputRating","service","events","_initializeView","view","viewConfig","getter","Error","promptSuggestionItemTemplate","_unbindView","destroy","viewsArray","i","l","isSettings","defaultView","buttonText","Object","assign","title","index","getViews","undefined","_activeViewIndex","Number","isInteger","_selectedView","findIndex","v","render","_updateToolbarState","toolItem","toolbar","_getAllItems","_resetTabIndex","trigger","addPromptOutput","id","guid","unshift","renderPromptOutput","activeToolIndex","find","each","elm","toggle","header","addClass","append","popupWrapper","closest","_getViewTools","map","text","icon","fillMode","themeColor","rounded","togglable","attributes","items","Array","isArray","closeButton","item","toolbarEl","kendoToolBar","resizable","concat","appendTo","data","focus","off","plugin","jQuery","kendo$1","__meta__","category","description","depends","default","defineProperty","value"],"mappings":"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","file":"kendo.aiprompt.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('kendo.core.js'), require('kendo.icons.js'), require('kendo.textarea.js'), require('kendo.button.js'), require('kendo.toolbar.js'), require('kendo.aiprompt.views.js')) :\n    typeof define === 'function' && define.amd ? define(['exports', 'kendo.core', 'kendo.icons', 'kendo.textarea', 'kendo.button', 'kendo.toolbar', 'kendo.aiprompt.views'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.kendo = global.kendo || {}, global.kendo._globals = global.kendo._globals || {}, global.kendo._globals.Aiprompt = {})));\n})(this, (function (exports) {\n    const __meta__ = {\n        id: \"aiprompt\",\n        name: \"AIPrompt\",\n        category: \"web\",\n        description: \"The AIPrompt component simplifies the incorporation of external AI services into apps.\",\n        depends: [\"core\", \"icons\", \"textarea\", \"button\", \"toolbar\", \"panelbar\"],\n    };\n\n    (function($) {\n        let kendo = window.kendo,\n            Widget = kendo.ui.Widget,\n            NS = \".kendoAIPrompt\",\n            ui = kendo.ui,\n            extend = $.extend,\n\n            COMMAND_EXECUTE = \"commandExecute\",\n            PROMPT_REQUEST = \"promptRequest\",\n            PROMPT_RESPONSE = \"promptResponse\",\n            OUTPUT_RATING_CHANGE = \"outputRatingChange\",\n            OUTPUT_COPY = \"outputCopy\",\n\n            FOCUS = \"focus\";\n\n        let cssClasses = {\n            menuButton: \"k-menu-button\",\n            aIPrompt: \"k-prompt\"\n        };\n\n        let defaultViews = {\n            prompt: {\n                type: \"kendo.ui.AIPromptPromptView\",\n                name: \"prompt\",\n                buttonIcon: \"sparkles\",\n            },\n            output: {\n                type: \"kendo.ui.AIPromptOutputView\",\n                name: \"output\",\n                buttonIcon: \"comment\",\n            },\n            commands: {\n                type: \"kendo.ui.AIPromptCommandsView\",\n                name: \"commands\",\n                buttonIcon: \"more-horizontal\",\n            },\n            custom: {\n                type: \"kendo.ui.AIPromptCustomView\",\n                name: \"custom\",\n            }\n        };\n\n        let AIPrompt = Widget.extend({\n            init: function(element, options) {\n                let that = this;\n                options = options || {};\n\n                Widget.fn.init.call(that, element, options);\n\n                if (that.options.views.length == 0) {\n                    that.options.views = [\"prompt\", \"output\"];\n\n                    if (this.options.promptCommands && this.options.promptCommands.length) {\n                        this.options.views.push(\"commands\");\n                    }\n                }\n\n                that.promptOutputs = that.options.promptOutputs || [];\n                that._initLayout();\n                that._initViews();\n                that._initToolbar();\n                that.activeView(that.options.activeView);\n\n                kendo.notify(that);\n            },\n\n            options: {\n                name: \"AIPrompt\",\n                enabled: true,\n                toolbarItems: [],\n                promptOutputs: [],\n                activeView: 0,\n                views: [],\n                popup: null,\n                messages: {\n                    promptView: \"Ask AI\",\n                    outputView: \"Output\",\n                    commandsView: \"\",\n                    customView: \"Custom View\",\n                    promptPlaceholder: \"Ask or generate content with AI\",\n                    promptSuggestions: \"Prompt Suggestions\",\n                    generateOutput: \"Generate\",\n                    outputTitle: \"Generated with AI\",\n                    outputRetryTitle: \"Generated with AI\",\n                    copyOutput: \"Copy\",\n                    retryGeneration: \"Retry\",\n                    ratePositive: \"\",\n                    rateNegative: \"\"\n                },\n                showOutputRating: true,\n                service: null,\n            },\n\n            events: [\n                COMMAND_EXECUTE,\n                PROMPT_REQUEST,\n                PROMPT_RESPONSE,\n                OUTPUT_RATING_CHANGE,\n                OUTPUT_COPY,\n            ],\n\n            _initializeView: function(name) {\n                let viewConfig = this.views[name];\n                let view;\n                if (viewConfig) {\n                    let type = viewConfig.type;\n\n                    if (typeof type === \"string\") {\n                        type = kendo.getter(viewConfig.type)(window);\n                    }\n\n                    if (type) {\n                        view = new type(this.element, extend(true, {\n                            promptSuggestions: this.options.promptSuggestions,\n                            promptCommands: this.options.promptCommands,\n                            promptOutputs: this.promptOutputs,\n                            showOutputRating: this.options.showOutputRating,\n                            messages: this.options.messages,\n                            promptSuggestionItemTemplate: this.options.promptSuggestionItemTemplate,\n                            service: this.options.service,\n                        },\n                            viewConfig\n                        ));\n                    } else {\n                        throw new Error(\"There is no such view\");\n                    }\n                }\n\n                return view;\n            },\n\n            _unbindView: function(view) {\n                if (view) {\n                    view.destroy();\n                }\n            },\n\n            _initViews: function() {\n                let that = this,\n                    options = that.options,\n                    views = options.views;\n\n                that.views = {};\n                that.viewsArray = [];\n\n                for (let i = 0, l = views.length; i < l; i++) {\n                    let view = views[i];\n                    let isSettings = typeof view === \"object\";\n                    let name = view;\n\n                    if (isSettings) {\n                        name = typeof view.type !== \"string\" ? view.name : view.type;\n                    }\n\n                    let defaultView = defaultViews[name];\n\n                    if (defaultView) {\n                        if (isSettings) {\n                            view.type = defaultView.type;\n                        }\n\n                        defaultView.buttonText = that.options.messages[`${name}View`];\n                    }\n\n                    view = Object.assign({ title: view.title, name, index: i }, defaultView, isSettings ? view : {});\n                    that.viewsArray.push(view);\n\n                    if (name) {\n                        that.views[name] = view;\n                    }\n                }\n            },\n\n            getViews: function() {\n                return this.viewsArray;\n            },\n\n            activeView: function(name) {\n                let that = this;\n                if (name === undefined) {\n                    return that._activeViewIndex;\n                }\n\n                if (Number.isInteger(name)) {\n                    name = that.viewsArray[name].name;\n                }\n\n                if (name && that.views[name]) {\n                    if (that._selectedView) {\n                        that._unbindView(that._selectedView);\n                    }\n\n                    that._selectedView = that._initializeView(name);\n                    that._activeViewIndex = that.viewsArray.findIndex(v => v.name === name);\n                    that._selectedView.render();\n\n                    that._updateToolbarState(that._activeViewIndex);\n\n                    let toolItem = $(that.toolbar._getAllItems()[that._activeViewIndex]);\n                    that.toolbar._resetTabIndex(toolItem);\n                    toolItem.trigger(FOCUS);\n                }\n            },\n\n            addPromptOutput: function(output) {\n                output.id = output.id || kendo.guid();\n                this.promptOutputs.unshift(output);\n\n                if (typeof this._selectedView.renderPromptOutput === \"function\") {\n                    return this._selectedView.renderPromptOutput(output);\n                }\n            },\n\n            _updateToolbarState: function(activeToolIndex) {\n                let toolbar = this.toolbar;\n                toolbar.element.find(\".k-toolbar-toggle-button\").each(function(index, elm) {\n                    toolbar.toggle($(elm), index == activeToolIndex);\n                });\n            },\n\n            _initLayout: function() {\n                let that = this,\n                    header = $(\"<div></div>\").addClass(\"k-prompt-header\");\n                that.header = header;\n                that.element.addClass(cssClasses.aIPrompt);\n                that.element.append(header);\n                const popupWrapper = that.element.closest('.k-popup');\n\n                if (popupWrapper.length) {\n                    $(popupWrapper).addClass('k-prompt-popup');\n                }\n            },\n\n            _getViewTools: function() {\n                let that = this;\n\n                return that.viewsArray.map(v => {\n                    if (v.name === 'commands') {\n                        if (v.buttonText) {\n                            v.title = v.buttonText;\n                        } else {\n                            v.title = \"More Actions\";\n                        }\n                    }\n\n                    return {\n                    type: \"button\",\n                    text: v.buttonText,\n                    icon: v.buttonIcon,\n                    fillMode: \"flat\",\n                    themeColor: \"primary\",\n                    rounded: \"full\",\n                    togglable: true,\n                    attributes: { title: v.title },\n                    toggle: function() {\n                        that.activeView(v.name);\n                    }\n                };\n            });\n            },\n\n            _initToolbar: function() {\n                let that = this;\n                let items = that.options.toolbarItems;\n                items = Array.isArray(items) ? items : [items];\n                const closeButton = items.find(item => item.icon === 'x');\n\n                if (closeButton) {\n                    closeButton.themeColor = 'base';\n                }\n\n                let toolbarEl = $(\"<div></div>\").kendoToolBar({\n                    resizable: false,\n                    fillMode: \"flat\",\n                    items: that._getViewTools().concat(items)\n                }).appendTo(that.header);\n\n                that.toolbar = toolbarEl.data(\"kendoToolBar\");\n            },\n\n            focus: function() {\n                let that = this;\n                that.element.trigger(FOCUS);\n            },\n\n            destroy: function() {\n                let that = this;\n\n                that.toolbar?.destroy();\n                that._selectedView?.destroy();\n\n                that.element.off(NS);\n\n                Widget.fn.destroy.call(that);\n            }\n        });\n\n        ui.plugin(AIPrompt);\n\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    exports.__meta__ = __meta__;\n    exports.default = kendo$1;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}