{"version":3,"sources":["raw-js/kendo.tilelayout.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendo","_globals","Tilelayout","this","$","window","ui","Widget","Draggable","keys","selector","selectorFromClasses","RESIZE","REORDER","NS","GRABCURSOR","TileLayout","extend","init","element","options","that","fn","call","addClass","styles","wrapper","attr","role","_setWrapperStyles","_initContainers","_resizable","_navigatable","_reorderable","_showWatermarkOverlay","events","name","columns","gap","rows","containers","resizable","reorderable","navigatable","columnsWidth","rowsHeight","height","width","destroy","_draggableInstance","find","each","item","data","resizeHandle","off","remove","setOptions","deepExtend","empty","getOptions","result","items","id","container","header","headerSettings","body","containerSettings","headerContent","containerElements","children","hasElements","length","itemsMap","i","guid","current","_addContainer","template","text","itemHeader","itemHeaderTitle","append","appendTo","itemBody","bodyTemplate","Error","index","order","_setContainerCoordinates","push","css","format","padding","settings","colSpan","rowSpan","_updateContainers","_createResizeHandle","side","down","_isresizing","_positionResizeHandle","cursorClass","leftBorderWidth","parseFloat","bottomBorderWidth","containerHeight","containerWidth","top","left","support","isRtl","removeClass","show","_createResizeHint","hint","resizeHint","insertAfter","_removeResizeHint","_positionHint","_removeAbsoluteStyles","_positionAbsolutely","position","outerWidth","outerHeight","on","_keyDown","bind","e","target","canHandle","is","ctrlKey","keyCode","LEFT","_resizeItem","RIGHT","UP","DOWN","shiftKey","_reorderItem","preventDefault","dir","delta","newSpan","parseInt","replace","split","trigger","newOrder","oldOrder","maxOrder","_updateDOM","newIndex","oldIndex","_sortContainers","indexAttr","sort","a","b","indexA","indexB","undefined","fractionWidth","fractionHeight","currentContainer","rowsCount","lastXLocation","lastYLocation","initialWidth","initialHeight","startColSpan","startRowSpan","itemsMaxSpace","rightPosition","downPosition","rectPosition","getBoundingClientRect","Math","abs","right","clientX","bottom","clientY","Resizable","handle","start","currentTarget","_calculateFractionWidth","_calculateRightEndSide","x","location","scrollHeight","y","resize","overflowsLayout","isBeyondMinimum","hintColumns","hintRows","mouseDeltaX","mouseDeltaY","deltaFromStart","resizeRowsCount","resizeColumnsCount","clientRect","style","scrollX","floor","max","scrollY","resizeend","first","columnGap","_createDropHint","dropHint","reorderHint","columnEnd","rowEnd","direction","_insertDropHint","insertBefore","_removeDropHint","originalElement","itemSelector","headerSelector","group","filter","autoScroll","ignore","clickMoveClick","closest","clone","dragstart","document","cursor","drag","dropContainer","containerBoundaries","elementUnderCursor","sender","draggedItem","containsOrEqualTo","hide","hasClass","next","prev","dragend","end","itemId","min","dragcancel","kendoDropTarget","dragenter","dropContainerBoundaries","dropTarget","parent","child","contains","plugin","jQuery","kendo$1","__meta__","category","depends","features","description","default","Object","defineProperty","value"],"mappings":"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","file":"kendo.tilelayout.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('kendo.core.js'), require('kendo.draganddrop.js'), require('kendo.resizable.js')) :\n    typeof define === 'function' && define.amd ? define(['exports', 'kendo.core', 'kendo.draganddrop', 'kendo.resizable'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.kendo = global.kendo || {}, global.kendo._globals = global.kendo._globals || {}, global.kendo._globals.Tilelayout = {})));\n})(this, (function (exports) {\n    const __meta__ = {\n            id: \"tilelayout\",\n            name: \"TileLayout\",\n            category: \"web\",\n            depends: [\"core\"],\n            features: [\n                {\n                    id: \"tilelayout-resizable\",\n                    name: \"Resizable\",\n                    description: \"Support for resizing\",\n                    depends: [\"resizable\"]\n                },\n                {\n                    id: \"tilelayout-reorderable\",\n                    name: \"Reorderable\",\n                    description: \"Support for reordering\",\n                    depends: [\"draganddrop\"]\n                }\n            ]\n        };\n\n        (function($) {\n            var kendo = window.kendo,\n                ui = kendo.ui,\n                Widget = ui.Widget,\n                Draggable = ui.Draggable,\n                keys = kendo.keys,\n                selector = kendo.selectorFromClasses,\n                RESIZE = \"resize\",\n                REORDER = \"reorder\",\n                NS = \".kendoTileLayout\",\n                DOWNCURSOR = \"k-cursor-ns-resize\",\n                RIGHTCURSOR = \"k-cursor-ew-resize\",\n                DIAGONALCURSOR = \"k-cursor-nwse-resize\",\n                RTLDIAGONALCURSOR = \"k-cursor-nesw-resize\",\n                GRABCURSOR = \"k-cursor-move\",\n                GRABBINGCURSOR = \"k-cursor-grabbing\",\n                MINIMALSPAN = 1,\n                CURSORCLASSES = \"k-cursor-nesw-resize k-cursor-nwse-resize k-cursor-ew-resize k-cursor-ns-resize\";\n\n            var tileLayoutStyles = {\n                wrapper: \"k-tilelayout k-pos-relative\",\n                item: \"k-tilelayout-item k-card\",\n                itemHeader: \"k-tilelayout-item-header k-card-header\",\n                itemHeaderTitle: \"k-card-title\",\n                itemBody: \"k-tilelayout-item-body k-card-body\",\n                reorderHint: \"k-layout-item-hint k-layout-item-hint-reorder\",\n                resizeHint: \"k-layout-item-hint k-layout-item-hint-resize\"\n            };\n\n            var TileLayout = Widget.extend({\n                init: function(element, options) {\n                    var that = this;\n\n                    Widget.fn.init.call(that, element, options);\n\n                    that.element = $(element)\n                        .addClass(TileLayout.styles.wrapper)\n                        .attr({\n                            role: \"list\"\n                        });\n\n                    that._setWrapperStyles();\n                    that._initContainers();\n                    that._resizable();\n                    that._navigatable();\n                    that._reorderable();\n\n                    if (that._showWatermarkOverlay) {\n                        that._showWatermarkOverlay(that.element[0]);\n                    }\n                },\n\n                events: [\n                    RESIZE,\n                    REORDER\n                ],\n\n                options: {\n                    name: \"TileLayout\",\n                    columns: null,\n                    gap: {\n                        columns: 16,\n                        rows: 16\n                    },\n                    containers: [],\n                    resizable: false,\n                    reorderable: false,\n                    navigatable: false,\n                    columnsWidth: \"1fr\",\n                    rowsHeight: \"1fr\",\n                    height: \"\",\n                    width: \"\"\n                },\n\n                destroy: function() {\n                    Widget.fn.destroy.call(this);\n\n                    if (this._draggableInstance) {\n\n                        this.element.find(\".k-tilelayout-item\").each(function() {\n                            var item = $(this);\n                            if (item.data(\"kendoDropTarget\")) {\n                                item.data(\"kendoDropTarget\").destroy();\n                            }\n                        });\n\n                        this._draggableInstance.destroy();\n                        this._draggableInstance = null;\n                    }\n\n                    if (this.resizable) {\n                        this.resizable.destroy();\n                        this.resizable = null;\n                    }\n\n                    if (this.resizeHandle) {\n                        this.resizeHandle.off(NS).remove();\n                        this.resizeHandle = null;\n                    }\n\n                    this.element.off(NS);\n                },\n\n                setOptions: function(options) {\n                    this.destroy();\n                    kendo.deepExtend(this.options, options);\n                    this.element.empty();\n                    this.init(this.element, this.options);\n                },\n\n                getOptions: function() {\n                    var result = $.extend(true, {}, this.options);\n                    result.containers = kendo.deepExtend([], this.items);\n\n                    return result;\n                },\n\n                _initContainers: function() {\n                    var that = this;\n                    var containers = that.options.containers;\n                    var containerElements = that.element.children();\n                    var hasElements = !!containerElements.length;\n                    var id;\n                    var container;\n                    var header;\n                    var headerSettings;\n                    var body;\n                    var containerSettings;\n                    var headerContent;\n\n                    that.items = [];\n                    that.itemsMap = {};\n\n                    if (hasElements) {\n                        containerElements.each(function(i, element) {\n                            id = kendo.guid();\n                            var current = $(element)\n                                .addClass(TileLayout.styles.item)\n                                .attr({\n                                    id: id,\n                                    role: \"listitem\",\n                                    \"aria-keyshortcuts\": \"Enter\"\n                                });\n\n                            that._addContainer(current, containers[i], i, id);\n                        });\n                    } else {\n                        for (var i = 0; i < containers.length; i++) {\n                            id = kendo.guid();\n                            containerSettings = containers[i];\n                            container = $(\"<div></div>\")\n                                .addClass(TileLayout.styles.item)\n                                .attr({\n                                    id: id,\n                                    role: \"listitem\",\n                                    \"aria-keyshortcuts\": \"Enter\"\n                                });\n\n                            headerSettings = containerSettings.header;\n                            if (headerSettings && (headerSettings.template || headerSettings.text)) {\n                                header = $(\"<div></div>\").addClass(TileLayout.styles.itemHeader);\n                                if (that.options.reorderable) {\n                                    header.addClass(GRABCURSOR);\n                                }\n\n                                headerContent = headerSettings.text ? \"<div class='\" + TileLayout.styles.itemHeaderTitle + \"'>\" + headerSettings.text + \"</div>\" : null;\n                                header.append(headerContent || kendo.template(headerSettings.template)({}));\n                                header.appendTo(container);\n                            }\n                            body = $(\"<div></div>\").addClass(TileLayout.styles.itemBody);\n                            if (!containerSettings.bodyTemplate) {\n                                throw new Error(\"Having a bodyTemplate for the container is mandatory\");\n                            }\n                            body.append(kendo.template(containerSettings.bodyTemplate)({}));\n                            body.appendTo(container);\n                            container.appendTo(that.element);\n\n                            that._addContainer(container, containerSettings, i, id);\n                        }\n                    }\n                },\n\n                _addContainer: function(element, item, index, id) {\n                    var that = this;\n                    item.order = typeof item.order == 'number' ? item.order : index;\n                    element.attr(kendo.attr(\"index\"), item.order);\n                    item.id = id;\n                    that._setContainerCoordinates(element, item);\n                    that.itemsMap[id] = item;\n                    that.items.push(that.itemsMap[id]);\n                },\n\n                _setWrapperStyles: function() {\n                    var that = this;\n                    var options = that.options;\n                    that.element.css({\n                        \"grid-template-columns\": kendo.format(\"repeat({0}, minmax(0, {1}))\", options.columns, typeof options.columnsWidth === \"string\" ? options.columnsWidth : options.columnsWidth + \"px\"),\n                        \"grid-auto-rows\": kendo.format(\"minmax(0, {0})\", typeof options.rowsHeight === \"string\" ? options.rowsHeight : options.rowsHeight + \"px\"),\n                        \"column-gap\": options.gap.columns + \"px\",\n                        \"width\": typeof options.width === \"string\" ? options.width : options.width + \"px\",\n                        \"height\": typeof options.height === \"string\" ? options.height : options.height + \"px\",\n                        \"padding\": options.gap.rows + \"px \" + options.gap.columns + \"px \",\n                        \"row-gap\": options.gap.rows + \"px\"\n                    });\n                },\n\n                _setContainerCoordinates: function(element, settings) {\n                    if (!settings) {\n                        return;\n                    }\n                    element.css({\n                        \"order\": settings.order,\n                        \"grid-column-end\": kendo.format(\"span {0}\", settings.colSpan),\n                        \"grid-row-end\": kendo.format(\"span {0}\", settings.rowSpan)\n                    })\n                        .attr(kendo.attr(\"index\"), settings.order);\n                },\n\n                _updateContainers: function() {\n                    var that = this;\n\n                    for (var i = 0; i < that.items.length; i++) {\n                        that._setContainerCoordinates(that.element.find(\"#\" + that.items[i].id), that.items[i]);\n                    }\n                },\n\n                _createResizeHandle: function(container, side, down) {\n                    var that = this;\n\n                    if (that._isresizing) {\n                        return;\n                    }\n\n                    if (that.resizeHandle && that.resizeHandle.data(\"div\")[0] !== container[0]) {\n                        that.resizeHandle.off(NS).remove();\n                        that.resizeHandle = null;\n                    }\n\n                    if (!that.resizeHandle) {\n                        that.resizeHandle = $(\n                            '<div class=\"k-resize-handle\"></div>'\n                        );\n                        that.resizeHandle.appendTo(container);\n                    }\n\n                    that._positionResizeHandle(container, side, down);\n                },\n\n                _positionResizeHandle: function(container, side, down) {\n                    var that = this;\n                    var leftBorderWidth = parseFloat(container.css(\"borderRightWidth\"));\n                    var bottomBorderWidth = parseFloat(container.css(\"borderBottomWidth\"));\n                    var containerHeight = container.height();\n                    var containerWidth = container.width();\n                    var top = down ? containerHeight - 6.5 - bottomBorderWidth : 0;\n                    var left = side ? containerWidth - 4.5 - leftBorderWidth : 0;\n                    var width = 9;\n                    var height = 9;\n                    var cursorClass;\n\n                    if (side && down) {\n                        height = width = 25;\n                        top -= 12.5;\n                        left -= 12.5;\n                        cursorClass = kendo.support.isRtl(that.element) ? RTLDIAGONALCURSOR : DIAGONALCURSOR;\n                    } else if (side && !down) {\n                        height = containerHeight;\n                        cursorClass = RIGHTCURSOR;\n                    } else if (!side && down) {\n                        width = containerWidth;\n                        cursorClass = DOWNCURSOR;\n                    }\n\n                    that.resizeHandle\n                        .css({\n                            top: top,\n                            left: left,\n                            height: height,\n                            width: width\n                        })\n                        .attr(\"side\", side)\n                        .attr(\"down\", down)\n                        .removeClass(CURSORCLASSES)\n                        .addClass(cursorClass)\n                        .data(\"div\", container)\n                        .show();\n                },\n\n                _createResizeHint: function(container) {\n                    var that = this;\n\n                    if (that.hint) {\n                        return;\n                    }\n\n                    var colSpan = container.css(\"grid-column-end\");\n                    var rowSpan = container.css(\"grid-row-end\");\n                    var order = container.css(\"order\");\n\n                    that.hint = $(\"<div class='\" + TileLayout.styles.resizeHint + \"'></div>\")\n                        .css({\n                            \"order\": order,\n                            \"grid-column-end\": colSpan,\n                            \"grid-row-end\": rowSpan\n                        })\n                        .insertAfter(container);\n                },\n\n                _removeResizeHint: function() {\n                    if (this._isresizing) {\n                        return;\n                    }\n\n                    if (this.hint) {\n                        this.hint.remove();\n                        this.hint = null;\n                    }\n                },\n\n                _positionHint: function(colSpan, rowSpan) {\n                    var that = this;\n\n                    if (colSpan) {\n                        that.hint.css(\"grid-column-end\", kendo.format(\"span {0}\", colSpan));\n                    }\n\n                    if (rowSpan) {\n                        that.hint.css(\"grid-row-end\", kendo.format(\"span {0}\", rowSpan));\n                    }\n                },\n\n                _removeAbsoluteStyles: function(container) {\n                    container.css(\"position\", \"\");\n                    container.css(\"left\", \"\");\n                    container.css(\"top\", \"\");\n                    container.css(\"width\", \"\");\n                    container.css(\"height\", \"\");\n                    container.css(\"z-index\", \"\");\n                },\n\n                _positionAbsolutely: function(container) {\n                    if (container.css(\"position\") == \"absolute\") {\n                        return;\n                    }\n                    var position = container.position();\n                    var width = container.outerWidth();\n                    var height = container.outerHeight();\n\n                    container.css(\"position\", \"absolute\");\n                    container.css(\"left\", position.left);\n                    container.css(\"top\", position.top);\n                    container.css(\"width\", width);\n                    container.css(\"height\", height);\n                    container.css(\"z-index\", 2);\n                },\n\n                _navigatable: function() {\n\n                    if (!this.options.navigatable) {\n                        return;\n                    }\n\n                    var that = this;\n\n                    that.element.children().attr(\"tabindex\", 0);\n                    that.element.on(\"keydown\" + NS, that, that._keyDown.bind(that));\n                },\n\n                _keyDown: function(e) {\n                    var target = $(e.target);\n                    var canHandle = false;\n\n                    if (!target.is(\".k-tilelayout-item.k-card\")) {\n                        return;\n                    }\n\n\n                    if (e.ctrlKey && e.keyCode == keys.LEFT) {\n                        canHandle = true;\n                        this._resizeItem(target, \"horizontal\", -1);\n                    }\n\n                    if (e.ctrlKey && e.keyCode == keys.RIGHT) {\n                        canHandle = true;\n                        this._resizeItem(target, \"horizontal\", 1);\n                    }\n\n                    if (e.ctrlKey && e.keyCode == keys.UP) {\n                        canHandle = true;\n                        this._resizeItem(target, \"vertical\", -1);\n                    }\n\n                    if (e.ctrlKey && e.keyCode == keys.DOWN) {\n                        canHandle = true;\n                        this._resizeItem(target, \"vertical\", 1);\n                    }\n\n                    if (e.shiftKey && e.keyCode == keys.LEFT) {\n                        canHandle = true;\n                        this._reorderItem(target, -1);\n                    }\n\n                    if (e.shiftKey && e.keyCode == keys.RIGHT) {\n                        canHandle = true;\n                        this._reorderItem(target, 1);\n                    }\n\n                    if (canHandle) {\n                        e.preventDefault();\n                    }\n                },\n\n                _resizeItem: function(item, dir, delta) {\n                    var that = this;\n                    var id = item.attr(\"id\");\n                    var newSpan;\n                    var maxSpan;\n\n                    if (!that.options.resizable) {\n                        return;\n                    }\n\n                    if (dir === \"horizontal\") {\n                        newSpan = parseInt(item.css(\"grid-column-end\").replace('span', ''), 10) + delta;\n                        maxSpan = that.element.css(\"grid-template-columns\").split(\" \").length;\n\n                        if (maxSpan >= newSpan && newSpan > 0) {\n                            that.itemsMap[id].colSpan = newSpan;\n                            item.css({\n                                \"grid-column-end\": kendo.format(\"span {0}\", newSpan)\n                            });\n                            that.trigger(RESIZE, {\n                                container: item\n                            });\n                        }\n                    } else {\n                        newSpan = parseInt(item.css(\"grid-row-end\").replace('span', ''), 10) + delta;\n                        maxSpan = that.element.css(\"grid-template-rows\").split(\" \").length;\n\n                        if (maxSpan >= newSpan && newSpan > 0) {\n                            that.itemsMap[id].rowSpan = newSpan;\n                            item.css({\n                                \"grid-row-end\": kendo.format(\"span {0}\", newSpan)\n                            });\n                            that.trigger(RESIZE, {\n                                container: item\n                            });\n                        }\n                    }\n                },\n\n                _reorderItem: function(item, newOrder) {\n                    if (!this.options.reorderable) {\n                        return;\n                    }\n\n                    var oldOrder = parseInt(item.css(\"order\"), 10);\n                    var maxOrder = this.element.children().length;\n                    newOrder = oldOrder + newOrder;\n\n                    if (newOrder >= 0 && newOrder < maxOrder) {\n                        var target = this.element.find(\"> [\" + kendo.attr(\"index\") + \"='\" + newOrder + \"']\");\n\n                        this.itemsMap[item.attr(\"id\")].order = newOrder;\n                        this.itemsMap[target.attr(\"id\")].order = oldOrder;\n\n                        this._updateContainers();\n                        this._updateDOM();\n                        item.trigger(\"focus\");// need to restore focus after DOM gets reordered\n\n                        this.trigger(REORDER, {\n                            newIndex: newOrder,\n                            oldIndex: oldOrder,\n                            container: item\n                        });\n                    }\n                },\n\n                _sortContainers: function(containers) {\n                    var indexAttr = kendo.attr(\"index\");\n\n                    return [].sort.call(containers, function(a, b) {\n                        a = $(a);\n                        b = $(b);\n\n                        var indexA = a.attr(indexAttr);\n                        var indexB = b.attr(indexAttr);\n\n                        if (indexA === undefined) {\n                            indexA = $(a).index();\n                        }\n                        if (indexB === undefined) {\n                            indexB = $(b).index();\n                        }\n\n                        indexA = parseInt(indexA, 10);\n                        indexB = parseInt(indexB, 10);\n                        return indexA > indexB ? 1 : (indexA < indexB ? -1 : 0);\n                    });\n                },\n                _updateDOM: function() {\n                    var that = this;\n                    var containers = that.element.children(\":visible\");\n\n                    containers = that._sortContainers(containers);\n\n                    containers.each(function() {\n                        $(this).appendTo(that.element);\n                    });\n                },\n\n                _resizable: function() {\n                    var that = this;\n                    var side;\n                    var down;\n                    var id;\n                    var fractionWidth;\n                    var fractionHeight;\n                    var currentContainer;\n                    var lastXLocation = 0;\n                    var lastYLocation = 0;\n                    var initialWidth = 0;\n                    var initialHeight = 0;\n                    var startColSpan = 0;\n                    var startRowSpan = 0;\n                    var itemsMaxSpace = 0;\n                    var rowsCount;\n\n                    if (that.options.resizable) {\n                        that.element.on(\"mousemove\" + NS, selector(TileLayout.styles.item), function(e) {\n                            var rightPosition;\n                            var downPosition;\n                            var container = $(this);\n                            var rectPosition = container[0].getBoundingClientRect();\n\n                            rightPosition = Math.abs(rectPosition.right - e.clientX) < 16;\n                            downPosition = Math.abs(rectPosition.bottom - e.clientY) < 16;\n\n                            if (rightPosition && downPosition) {\n                                that._createResizeHandle(container, true, true);\n                            } else if (rightPosition) {\n                                that._createResizeHandle(container, true, false);\n                            } else if (downPosition) {\n                                that._createResizeHandle(container, false, true);\n                            }\n                        });\n\n                        that.resizable = new ui.Resizable(that.element, {\n                            handle: \"div.k-tilelayout-item > .k-resize-handle\",\n                            start: function(e) {\n                                var resizeHandle = $(e.currentTarget);\n                                currentContainer = resizeHandle.data(\"div\");\n                                id = currentContainer.attr(\"id\");\n                                side = resizeHandle.attr(\"side\");\n                                down = resizeHandle.attr(\"down\");\n                                rowsCount = that.element.css(\"grid-template-rows\").split(\" \").length;\n\n                                if (side) {\n                                    fractionWidth = that._calculateFractionWidth();\n                                    itemsMaxSpace = that._calculateRightEndSide(fractionWidth);\n                                    lastXLocation = e.x.location;\n                                    initialWidth = currentContainer.width();\n                                    startColSpan = parseInt(currentContainer.css(\"grid-column-end\").replace('span', ''), 10);\n                                }\n\n                                if (down) {\n                                    fractionHeight = (that.element[0].scrollHeight - (rowsCount + 1) * that.options.gap.rows) / rowsCount;\n                                    lastYLocation = e.y.location;\n                                    initialHeight = currentContainer.height();\n                                    startRowSpan = parseInt(currentContainer.css(\"grid-row-end\").replace('span', ''), 10);\n                                }\n\n                                that._isresizing = true;\n                            },\n                            resize: function(e) {\n                                var hintColumns = 0;\n                                var hintRows = 0;\n                                var mouseDeltaX = 0;\n                                var mouseDeltaY = 0;\n                                var overflowsLayout;\n                                var isBeyondMinimum;\n                                var deltaFromStart = 0;\n                                var resizeRowsCount = 0;\n                                var resizeColumnsCount = 0;\n                                var clientRect = that.element[0].getBoundingClientRect();\n                                var height = that.element[0].style.height ? true : false;\n\n                                that._positionAbsolutely(currentContainer);\n                                that._createResizeHint(currentContainer);\n\n                                if (side == \"true\") {\n                                    mouseDeltaX = e.x.location - lastXLocation;\n                                    overflowsLayout = (clientRect.left + itemsMaxSpace - window.scrollX - e.x.location) < that.options.gap.columns;\n                                    isBeyondMinimum = (initialWidth + mouseDeltaX) < fractionWidth;\n\n                                    if (!overflowsLayout && !isBeyondMinimum) {\n                                        resizeColumnsCount = (mouseDeltaX) / (fractionWidth + that.options.gap.columns);\n                                        deltaFromStart = mouseDeltaX - (Math.floor(resizeColumnsCount) * (fractionWidth + that.options.gap.columns));\n                                        hintColumns = startColSpan + Math.floor(resizeColumnsCount) + ((deltaFromStart >= (fractionWidth / 2)) ? 1 : 0);\n                                        that.itemsMap[id].colSpan = Math.max(hintColumns, MINIMALSPAN);\n                                    } else {\n                                        mouseDeltaX = 0;\n                                    }\n                                }\n\n                                if (down == \"true\") {\n                                    mouseDeltaY = e.y.location - lastYLocation;\n                                    overflowsLayout = (clientRect.bottom + window.scrollY - e.y.location) < that.options.gap.rows;\n                                    isBeyondMinimum = (initialHeight + mouseDeltaY) <= fractionHeight;\n\n                                    if (!isBeyondMinimum && (!overflowsLayout || !height)) {\n                                        resizeRowsCount = (mouseDeltaY) / (fractionHeight + that.options.gap.rows);\n                                        deltaFromStart = mouseDeltaY - (Math.floor(resizeRowsCount) * (fractionHeight + that.options.gap.rows));\n                                        hintRows = startRowSpan + Math.floor(resizeRowsCount) + ((deltaFromStart >= (fractionHeight / 2)) ? 1 : 0);\n                                        that.itemsMap[id].rowSpan = Math.max(hintRows, MINIMALSPAN);\n                                    } else {\n                                        mouseDeltaY = 0;\n                                    }\n                                }\n\n                                that._positionHint(hintColumns, hintRows);\n                                that._positionResizeHandle(currentContainer, side == \"true\", down == \"true\");\n                                if (mouseDeltaY) {\n                                    currentContainer.css(\"height\", initialHeight + mouseDeltaY);\n                                }\n                                if (mouseDeltaX) {\n                                    currentContainer.css(\"width\", initialWidth + mouseDeltaX);\n                                }\n                            },\n                            resizeend: function() {\n                                that._isresizing = false;\n                                that._setContainerCoordinates(currentContainer, that.itemsMap[id]);\n                                that._removeAbsoluteStyles(currentContainer);\n                                that._removeResizeHint();\n                                that.trigger(RESIZE, {\n                                    container: currentContainer\n                                });\n                            }\n                        });\n                    }\n                },\n\n                _calculateFractionWidth: function() {\n                    var that = this;\n                    var container = that.element.children().first();\n                    var colSpan = that.itemsMap[container.attr(\"id\")].colSpan;\n                    var totalWidth = container.outerWidth();\n\n                    return (totalWidth - (colSpan - 1) * (that.options.gap.columns)) / colSpan;\n                },\n\n                _calculateRightEndSide: function(fractionWidth) {\n                    var that = this;\n                    var columns = that.options.columns;\n                    var columnGap = that.options.gap.columns;\n\n                    return columns * (fractionWidth + columnGap) + columnGap;\n                },\n\n                _createDropHint: function(settings) {\n                    this.dropHint = $(\"<div class='\" + TileLayout.styles.reorderHint + \"'></div>\")\n                        .css({\n                            \"order\": settings.order,\n                            \"grid-column-end\": settings.columnEnd,\n                            \"grid-row-end\": settings.rowEnd\n                        })\n                        .attr(kendo.attr(\"index\"), settings.order)\n                        .attr(\"direction\", settings.direction);\n                },\n\n                _insertDropHint: function(container, direction) {\n                    if (direction == \"right\") {\n                        this.dropHint.insertAfter(container);\n                    } else {\n                        this.dropHint.insertBefore(container);\n                    }\n                },\n\n                _removeDropHint: function() {\n                    if (this.dropHint) {\n                        this.dropHint.remove();\n                        this.dropHint = null;\n                    }\n                },\n\n                _reorderable: function() {\n                    if (!this.options.reorderable) {\n                        return;\n                    }\n\n                    var that = this;\n                    var element = that.element;\n                    var originalElement;\n                    var itemSelector = selector(TileLayout.styles.item);\n                    var headerSelector = selector(TileLayout.styles.itemHeader);\n                    var group = kendo.guid();\n\n                    this._draggableInstance = new Draggable(this.element, {\n                        filter: headerSelector + \",.k-layout-item-hint-reorder\",\n                        autoScroll: true,\n                        ignore: \":input\",\n                        group: group,\n                        clickMoveClick: this.options.reorderable.clickMoveClick === false ? false : true,\n                        hint: function(target) {\n                            var item = target.closest(itemSelector);\n                            var width = item.width();\n                            var height = item.height();\n                            var clone = item.clone();\n                            clone.find(headerSelector)\n                                .removeClass(GRABCURSOR)\n                                .addClass(GRABBINGCURSOR);\n                            return clone.width(width).height(height);\n                        },\n                        dragstart: function(e) {\n                            originalElement = $(e.currentTarget).closest(itemSelector);\n                            document.body.style.cursor = \"move\";\n                        },\n                        drag: function(e) {\n                            var elementUnderCursor = kendo.elementUnderCursor(e);\n                            var hint = e.sender.hint;\n                            var dropContainer;\n                            var containerBoundaries;\n                            var pixelsToLeftBorder;\n                            var pixelsToRightBorder;\n                            var direction;\n\n                            var draggedItem = that._draggableInstance.currentTarget.closest(itemSelector);\n                            var newOrder;\n\n                            if (containsOrEqualTo(hint[0], elementUnderCursor)) {\n                                hint.hide();\n\n                                elementUnderCursor = kendo.elementUnderCursor(e);\n\n                                if (!containsOrEqualTo(originalElement[0], elementUnderCursor)) {\n\n                                    if (that.dropHint && that.dropHint[0] == elementUnderCursor[0]) {\n                                        hint.show();\n                                        return;\n                                    }\n\n                                    dropContainer = $(elementUnderCursor);\n                                    dropContainer = dropContainer.hasClass(TileLayout.styles.item) ? dropContainer : dropContainer.closest(itemSelector);\n\n                                    if (dropContainer.hasClass(TileLayout.styles.item)) {\n                                        containerBoundaries = dropContainer[0].getBoundingClientRect();\n                                        pixelsToLeftBorder = e.clientX - containerBoundaries.left;\n                                        pixelsToRightBorder = containerBoundaries.right - e.clientX;\n                                        direction = pixelsToLeftBorder > pixelsToRightBorder ? \"right\" : \"left\";\n                                        newOrder = dropContainer.css(\"order\");\n\n                                        if (that.dropHint && that.dropHint.attr(\"direction\") !== direction) {\n                                            var clone = that.dropHint.clone();\n                                            clone.css(\"order\", newOrder);\n                                            that.dropHint.remove();\n                                            that.dropHint = clone;\n\n                                            that._insertDropHint(dropContainer, direction);\n\n                                            that.dropHint\n                                                .attr(\"direction\", direction)\n                                                .attr(kendo.attr(\"index\"), newOrder);\n                                        } else if (!that.dropHint) {\n\n                                            var futureContainer = direction == \"right\" ? dropContainer.next() : dropContainer.prev();\n\n                                            if (futureContainer[0] != originalElement[0]) {\n                                                that._createDropHint({ order: newOrder, columnEnd: draggedItem.css(\"grid-column-end\"), rowEnd: draggedItem.css(\"grid-row-end\"), direction: direction });\n                                                originalElement.hide();\n                                                that._insertDropHint(dropContainer, direction);\n                                            }\n                                        }\n                                    }\n                                }\n                                hint.show();\n                            }\n                        },\n                        dragend: function(e) {\n                            document.body.style.cursor = \"auto\";\n\n                            if (!that.dropHint) {\n                                e.sender.hint.remove();\n                                that._removeDropHint();\n                                return;\n                            }\n\n                            var newOrder = parseInt(that.dropHint.css(\"order\"), 10);\n                            var container = e.currentTarget.closest(itemSelector);\n                            var items = that.element.find(itemSelector);\n                            var oldOrder = parseInt(container.css(\"order\"), 10);\n                            var itemId = container.attr(\"id\");\n                            var containers = that.element.children(\":visible\");\n                            var start;\n                            var end;\n                            var item;\n                            var direction;\n\n                            containers = that._sortContainers(containers);\n\n                            newOrder = containers.index(that.dropHint[0]);\n                            end = Math.max(newOrder, oldOrder);\n                            start = Math.min(newOrder, oldOrder);\n\n                            that.itemsMap[itemId].order = newOrder;\n\n                            direction = newOrder > oldOrder ? \"right\" : \"left\"; //this is direction of movement\n\n                            if (direction == \"left\") {\n                                end--;\n                            } else {\n                                start++;\n                            }\n\n                            for (var i = start; i <= end; i++) {\n                                item = items.filter(\"[\" + kendo.attr(\"index\") + \"='\" + i + \"']\");\n                                that.itemsMap[item.attr(\"id\")].order += direction == \"left\" ? 1 : -1;\n                            }\n\n                            container.show();\n\n                            that._updateContainers();\n\n                            e.sender.hint.remove();\n                            that._removeDropHint();\n\n                            if (that.options.navigatable) {\n                                that._updateDOM();\n                            }\n\n                            that.trigger(REORDER, {\n                                newIndex: newOrder,\n                                oldIndex: oldOrder,\n                                container: container\n                            });\n                        },\n                        dragcancel: function() {\n                            document.body.style.cursor = \"auto\";\n\n                            that._removeDropHint();\n\n                            if (originalElement) {\n                                originalElement.show();\n                            }\n                        }\n                    });\n\n                    element.find(itemSelector).kendoDropTarget({\n                        group: group,\n                        dragenter: function(e) {\n                            if (that._isresizing) {\n                                return;\n                            }\n                            var dropContainer = $(e.dropTarget);\n                            var target = that._draggableInstance.currentTarget.closest(itemSelector);\n                            var dropContainerBoundaries;\n                            var pixelsToLeftBorder;\n                            var pixelsToRightBorder;\n                            var futureContainer;\n                            var direction;\n\n                            if (originalElement[0] != dropContainer[0]) {\n\n                                dropContainerBoundaries = dropContainer[0].getBoundingClientRect();\n                                pixelsToLeftBorder = e.clientX - dropContainerBoundaries.left;\n                                pixelsToRightBorder = dropContainerBoundaries.right - e.clientX;\n                                direction = pixelsToLeftBorder > pixelsToRightBorder ? \"right\" : \"left\";\n\n                                futureContainer = direction == \"right\" ? dropContainer.next() : dropContainer.prev();\n\n                                //handle the case when the container will be shown over the original one\n                                if (futureContainer[0] == originalElement[0]) {\n                                    return;\n                                }\n\n                                that._removeDropHint();\n\n                                originalElement.hide();\n\n                                that._createDropHint({ order: dropContainer.css(\"order\"), columnEnd: target.css(\"grid-column-end\"), rowEnd: target.css(\"grid-row-end\"), direction: direction });\n\n                                originalElement.hide();\n                                that._insertDropHint(dropContainer, direction);\n                            }\n                        }\n                    });\n                }\n            });\n\n            function containsOrEqualTo(parent, child) {\n                try {\n                    return $.contains(parent, child) || parent == child;\n                } catch (e) {\n                    return false;\n                }\n            }\n\n            ui.plugin(TileLayout);\n\n            $.extend(true, TileLayout, { styles: tileLayoutStyles });\n        })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    exports.__meta__ = __meta__;\n    exports.default = kendo$1;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}