{"version":3,"sources":["raw-js/kendo.userevents.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendo","_globals","Userevents","this","$","window","support","Class","Observable","now","Date","extend","OS","mobileOS","invalidZeroEvents","android","DEFAULT_MIN_HOLD","DEFAULT_THRESHOLD","browser","msie","PRESS","HOLD","SELECT","START","MOVE","END","CANCEL","TAP","DOUBLETAP","RELEASE","GESTURECHANGE","GESTUREEND","GESTURETAP","THRESHOLD","api","touch","mouse","pointer","ENABLE_GLOBAL_SURFACE","mouseAndTouchPresent","touchDelta","touch1","touch2","x1","x","location","y1","y","x2","y2","dx","dy","center","distance","Math","sqrt","getTouches","e","length","changedTouches","touches","originalEvent","currentTarget","idx","push","id","event","target","type","match","identifier","pointers","msPointers","pointerId","TouchAxis","init","axis","that","_updateLocationData","startLocation","velocity","delta","timeStamp","move","offset","timeDelta","initialDelta","client","screen","Touch","userEvents","touchInfo","useClickAsTap","threshold","initialTouch","pressEvent","_clicks","supportDoubleTap","_moved","_finished","press","_holdTimeout","setTimeout","_hold","bind","minHold","_trigger","_tap","_clickTimeout","preventMove","_shouldNotMove","_withinIgnoreThreshold","UserEvents","current","dispose","_start","end","endTime","clearTimeout","activeTouches","splice","inArray","skip","cancel","isMoved","startTime","name","jQueryEvent","data","notify","preventDefault","xDelta","yDelta","withEachUpEvent","callback","downEvents","eventMap","up","split","element","options","filter","ns","guid","_maxTouches","multiTouch","allowSelection","captureUpIfMoved","fastTap","delayedClick","eventNS","handler","fn","call","surface","ownerDocument","documentElement","stopPropagation","pressed","on","applyEventMap","version","defaultAction","css","touchAction","preventDragEvent","root","eventCapture","surfaceElement","preventIfMovingProxy","preventIfMoving","eventName","addEventListener","_isMoved","destroy","_destroyed","removeEventListener","kendoDestroy","removeData","_disposeAll","unbind","capture","trigger","_isMultiTouch","_apiCall","_maxTouchesReached","pop","grep","_select","which","_move","_eachTouch","_end","_click","pageX","clientX","pageY","clientY","methodName","matchingTouch","dict","noop","ClickMoveClick","_downStarted","_down","getTime","_downTarget","_up","currentMilestone","_preventCancel","clickMoveClick","defaultThreshold","value","jQuery","kendo$1","__meta__","category","depends","hidden","default","Object","defineProperty"],"mappings":"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","file":"kendo.userevents.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('kendo.core.js')) :\n    typeof define === 'function' && define.amd ? define(['exports', 'kendo.core'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.kendo = global.kendo || {}, global.kendo._globals = global.kendo._globals || {}, global.kendo._globals.Userevents = {})));\n})(this, (function (exports) {\n    const __meta__ = {\n        id: \"userevents\",\n        name: \"User Events\",\n        category: \"framework\",\n        depends: [ \"core\" ],\n        hidden: true\n    };\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            support = kendo.support,\n            Class = kendo.Class,\n            Observable = kendo.Observable,\n            now = Date.now,\n            extend = $.extend,\n            OS = support.mobileOS,\n            invalidZeroEvents = OS && OS.android,\n            DEFAULT_MIN_HOLD = 800,\n            CLICK_DELAY = 300,\n            DEFAULT_THRESHOLD = support.browser.msie ? 5 : 0, // WP8 and W8 are very sensitive and always report move.\n\n            // UserEvents events\n            PRESS = \"press\",\n            HOLD = \"hold\",\n            SELECT = \"select\",\n            START = \"start\",\n            MOVE = \"move\",\n            END = \"end\",\n            CANCEL = \"cancel\",\n            TAP = \"tap\",\n            DOUBLETAP = \"doubleTap\",\n            RELEASE = \"release\",\n            GESTURESTART = \"gesturestart\",\n            GESTURECHANGE = \"gesturechange\",\n            GESTUREEND = \"gestureend\",\n            GESTURETAP = \"gesturetap\";\n\n        var THRESHOLD = {\n            \"api\": 0,\n            \"touch\": 0,\n            \"mouse\": 9,\n            \"pointer\": 9\n        };\n\n        var ENABLE_GLOBAL_SURFACE = (!support.touch || support.mouseAndTouchPresent);\n\n        function touchDelta(touch1, touch2) {\n            var x1 = touch1.x.location,\n                y1 = touch1.y.location,\n                x2 = touch2.x.location,\n                y2 = touch2.y.location,\n                dx = x1 - x2,\n                dy = y1 - y2;\n\n            return {\n                center: {\n                   x: (x1 + x2) / 2,\n                   y: (y1 + y2) / 2\n                },\n\n                distance: Math.sqrt(dx * dx + dy * dy)\n            };\n        }\n\n        function getTouches(e) {\n            var touches = [],\n                originalEvent = e.originalEvent,\n                currentTarget = e.currentTarget,\n                idx = 0, length,\n                changedTouches,\n                touch;\n\n            if (e.api) {\n                touches.push({\n                    id: 2, // hardcoded ID for API call;\n                    event: e,\n                    target: e.target,\n                    currentTarget: e.target,\n                    location: e,\n                    type: \"api\"\n                });\n            }\n            else if (e.type.match(/touch/)) {\n                changedTouches = originalEvent ? originalEvent.changedTouches : [];\n                for (length = changedTouches.length; idx < length; idx ++) {\n                    touch = changedTouches[idx];\n                    touches.push({\n                        location: touch,\n                        event: e,\n                        target: touch.target,\n                        currentTarget: currentTarget,\n                        id: touch.identifier,\n                        type: \"touch\"\n                    });\n                }\n            }\n            else if (support.pointers || support.msPointers) {\n                touches.push({\n                    location: originalEvent,\n                    event: e,\n                    target: e.target,\n                    currentTarget: currentTarget,\n                    id: originalEvent.pointerId,\n                    type: \"pointer\"\n                });\n            } else {\n                touches.push({\n                    id: 1, // hardcoded ID for mouse event;\n                    event: e,\n                    target: e.target,\n                    currentTarget: currentTarget,\n                    location: e,\n                    type: \"mouse\"\n                });\n            }\n\n            return touches;\n        }\n\n        var TouchAxis = Class.extend({\n            init: function(axis, location) {\n                var that = this;\n\n                that.axis = axis;\n\n                that._updateLocationData(location);\n\n                that.startLocation = that.location;\n                that.velocity = that.delta = 0;\n                that.timeStamp = now();\n            },\n\n            move: function(location) {\n                var that = this,\n                    offset = location[\"page\" + that.axis],\n                    timeStamp = now(),\n                    timeDelta = (timeStamp - that.timeStamp) || 1; // Firing manually events in tests can make this 0;\n\n                if (!offset && invalidZeroEvents) {\n                    return;\n                }\n\n                that.delta = offset - that.location;\n\n                that._updateLocationData(location);\n\n                that.initialDelta = offset - that.startLocation;\n                that.velocity = that.delta / timeDelta;\n                that.timeStamp = timeStamp;\n            },\n\n            _updateLocationData: function(location) {\n                var that = this, axis = that.axis;\n\n                that.location = location[\"page\" + axis];\n                that.client = location[\"client\" + axis];\n                that.screen = location[\"screen\" + axis];\n            }\n        });\n\n        var Touch = Class.extend({\n            init: function(userEvents, target, touchInfo) {\n                extend(this, {\n                    x: new TouchAxis(\"X\", touchInfo.location),\n                    y: new TouchAxis(\"Y\", touchInfo.location),\n                    type: touchInfo.type,\n                    useClickAsTap: userEvents.useClickAsTap,\n                    threshold: userEvents.threshold || THRESHOLD[touchInfo.type],\n                    userEvents: userEvents,\n                    target: target,\n                    currentTarget: touchInfo.currentTarget,\n                    initialTouch: touchInfo.target,\n                    id: touchInfo.id,\n                    pressEvent: touchInfo,\n                    _clicks: userEvents._clicks,\n                    supportDoubleTap: userEvents.supportDoubleTap,\n                    _moved: false,\n                    _finished: false\n                });\n            },\n\n            press: function() {\n                this._holdTimeout = setTimeout(this._hold.bind(this), this.userEvents.minHold);\n                this._trigger(PRESS, this.pressEvent);\n            },\n\n            _tap: function(touchInfo) {\n                var that = this;\n                that.userEvents._clicks++;\n                if (that.userEvents._clicks == 1) {\n                    that._clickTimeout = setTimeout(function() {\n                        if (that.userEvents._clicks == 1) {\n                            that._trigger(TAP, touchInfo);\n                        }\n                        else {\n                            that._trigger(DOUBLETAP, touchInfo);\n                        }\n                        that.userEvents._clicks = 0;\n                    }, CLICK_DELAY);\n                }\n            },\n\n            _hold: function() {\n                this._trigger(HOLD, this.pressEvent);\n            },\n\n            move: function(touchInfo) {\n                var that = this;\n                var preventMove = touchInfo.type !== \"api\" && that.userEvents._shouldNotMove;\n\n                if (that._finished || preventMove) { return; }\n\n                that.x.move(touchInfo.location);\n                that.y.move(touchInfo.location);\n\n                if (!that._moved) {\n                    if (that._withinIgnoreThreshold()) {\n                        return;\n                    }\n\n                    if (!UserEvents.current || UserEvents.current === that.userEvents) {\n                        that._start(touchInfo);\n                    } else {\n                        return that.dispose();\n                    }\n                }\n\n                // Event handlers may cancel the drag in the START event handler, hence the double check for pressed.\n                if (!that._finished) {\n                    that._trigger(MOVE, touchInfo);\n                }\n            },\n\n            end: function(touchInfo) {\n                this.endTime = now();\n\n                if (this._finished) { return; }\n\n                // Mark the object as finished if there are blocking operations in the event handlers (alert/confirm)\n                this._finished = true;\n\n                this._trigger(RELEASE, touchInfo); // Release should be fired before TAP (as click is after mouseup/touchend)\n\n                if (this._moved) {\n                    this._trigger(END, touchInfo);\n                } else {\n                    if (!this.useClickAsTap) {\n                        if (this.supportDoubleTap) {\n                            this._tap(touchInfo);\n                        }\n                        else {\n                            this._trigger(TAP, touchInfo);\n                        }\n                    }\n                }\n\n                clearTimeout(this._holdTimeout);\n\n                this.dispose();\n            },\n\n            dispose: function() {\n                var userEvents = this.userEvents,\n                    activeTouches = userEvents.touches;\n\n                this._finished = true;\n                this.pressEvent = null;\n                clearTimeout(this._holdTimeout);\n\n                activeTouches.splice($.inArray(this, activeTouches), 1);\n            },\n\n            skip: function() {\n                this.dispose();\n            },\n\n            cancel: function() {\n                this.dispose();\n            },\n\n            isMoved: function() {\n                return this._moved;\n            },\n\n            _start: function(touchInfo) {\n                clearTimeout(this._holdTimeout);\n\n                this.startTime = now();\n                this._moved = true;\n                this._trigger(START, touchInfo);\n            },\n\n            _trigger: function(name, touchInfo) {\n                var that = this,\n                    jQueryEvent = touchInfo.event,\n                    data = {\n                        touch: that,\n                        x: that.x,\n                        y: that.y,\n                        target: that.target,\n                        event: jQueryEvent\n                    };\n\n                if (that.userEvents.notify(name, data)) {\n                    jQueryEvent.preventDefault();\n                }\n            },\n\n            _withinIgnoreThreshold: function() {\n                var xDelta = this.x.initialDelta,\n                    yDelta = this.y.initialDelta;\n\n                return Math.sqrt(xDelta * xDelta + yDelta * yDelta) <= this.threshold;\n            }\n        });\n\n        function withEachUpEvent(callback) {\n            var downEvents = kendo.eventMap.up.split(\" \"),\n                idx = 0,\n                length = downEvents.length;\n\n            for (; idx < length; idx ++) {\n                callback(downEvents[idx]);\n            }\n        }\n\n        var UserEvents = Observable.extend({\n            init: function(element, options) {\n                var that = this,\n                    filter,\n                    ns = kendo.guid();\n\n                options = options || {};\n                filter = that.filter = options.filter;\n                that.threshold = options.threshold || DEFAULT_THRESHOLD;\n                that.minHold = options.minHold || DEFAULT_MIN_HOLD;\n                that.touches = [];\n                that._maxTouches = options.multiTouch ? 2 : 1;\n                that.allowSelection = options.allowSelection;\n                that.captureUpIfMoved = options.captureUpIfMoved;\n                that.useClickAsTap = !options.fastTap && !support.delayedClick();\n                that.eventNS = ns;\n                that._clicks = 0;\n                that.supportDoubleTap = options.supportDoubleTap;\n\n                element = $(element).handler(that);\n                Observable.fn.init.call(that);\n\n                extend(that, {\n                    element: element,\n                    // the touch events lock to the element anyway, so no need for the global setting\n                    surface: options.global && ENABLE_GLOBAL_SURFACE ? $(element[0].ownerDocument.documentElement) : $(options.surface || element),\n                    stopPropagation: options.stopPropagation,\n                    preventDefault: options.preventDefault,\n                    pressed: false\n                });\n\n                that.surface.handler(that)\n                    .on(kendo.applyEventMap(\"move\", ns), \"_move\")\n                    .on(kendo.applyEventMap(\"up cancel\", ns), \"_end\");\n\n                element.on(kendo.applyEventMap(\"down\", ns), filter, \"_start\");\n\n                if (that.useClickAsTap) {\n                    element.on(kendo.applyEventMap(\"click\", ns), filter, \"_click\");\n                }\n\n                if (support.pointers || support.msPointers) {\n                    //touch-action:none will not work for IE10\n                    if (support.browser.version < 11) {\n                        var defaultAction = \"pinch-zoom double-tap-zoom\";\n                        element.css(\"-ms-touch-action\", options.touchAction && options.touchAction != \"none\" ? defaultAction + \" \" + options.touchAction : defaultAction);\n                    } else {\n                        element.css(\"touch-action\", options.touchAction || \"none\");\n                    }\n                }\n\n                if (options.preventDragEvent) {\n                    element.on(kendo.applyEventMap(\"dragstart\", ns), kendo.preventDefault);\n                }\n\n                element.on(kendo.applyEventMap(\"mousedown\", ns), filter, { root: element }, \"_select\");\n\n                if (that.captureUpIfMoved && support.eventCapture) {\n                    var surfaceElement = that.surface[0],\n                        preventIfMovingProxy = that.preventIfMoving.bind(that);\n\n                    withEachUpEvent(function(eventName) {\n                        surfaceElement.addEventListener(eventName, preventIfMovingProxy, true);\n                    });\n                }\n\n                that.bind([\n                PRESS,\n                HOLD,\n                TAP,\n                DOUBLETAP,\n                START,\n                MOVE,\n                END,\n                RELEASE,\n                CANCEL,\n                GESTURESTART,\n                GESTURECHANGE,\n                GESTUREEND,\n                GESTURETAP,\n                SELECT\n                ], options);\n            },\n\n            preventIfMoving: function(e) {\n                if (this._isMoved()) {\n                    e.preventDefault();\n                }\n            },\n\n            destroy: function() {\n                var that = this;\n\n                if (that._destroyed) {\n                    return;\n                }\n\n                that._destroyed = true;\n\n                if (that.captureUpIfMoved && support.eventCapture) {\n                    var surfaceElement = that.surface[0];\n                    withEachUpEvent(function(eventName) {\n                        surfaceElement.removeEventListener(eventName, that.preventIfMoving);\n                    });\n                }\n\n                that.element.kendoDestroy(that.eventNS);\n                that.surface.kendoDestroy(that.eventNS);\n                that.element.removeData(\"handler\");\n                that.surface.removeData(\"handler\");\n                that._disposeAll();\n\n                that.unbind();\n                delete that.surface;\n                delete that.element;\n                delete that.currentTarget;\n            },\n\n            capture: function() {\n                UserEvents.current = this;\n            },\n\n            cancel: function() {\n                this._disposeAll();\n                this.trigger(CANCEL);\n            },\n\n            notify: function(eventName, data) {\n                var that = this,\n                    touches = that.touches;\n\n                if (this._isMultiTouch()) {\n                    switch (eventName) {\n                        case MOVE:\n                            eventName = GESTURECHANGE;\n                            break;\n                        case END:\n                            eventName = GESTUREEND;\n                            break;\n                        case TAP:\n                            eventName = GESTURETAP;\n                            break;\n                    }\n\n                    extend(data, { touches: touches }, touchDelta(touches[0], touches[1]));\n                }\n\n                return this.trigger(eventName, extend(data, { type: eventName }));\n            },\n\n            // API\n            press: function(x, y, target) {\n                this._apiCall(\"_start\", x, y, target);\n            },\n\n            move: function(x, y) {\n                this._apiCall(\"_move\", x, y);\n            },\n\n            end: function(x, y) {\n                this._apiCall(\"_end\", x, y);\n            },\n\n            _isMultiTouch: function() {\n                return this.touches.length > 1;\n            },\n\n            _maxTouchesReached: function() {\n                return this.touches.length >= this._maxTouches;\n            },\n\n            _disposeAll: function() {\n                var touches = this.touches;\n                while (touches.length > 0) {\n                    touches.pop().dispose();\n                }\n            },\n\n            _isMoved: function() {\n                return $.grep(this.touches, function(touch) {\n                    return touch.isMoved();\n                }).length;\n            },\n\n            _select: function(e) {\n               if (!this.allowSelection || this.trigger(SELECT, { event: e })) {\n                   e.preventDefault();\n               }\n            },\n\n            _start: function(e) {\n                var that = this,\n                    idx = 0,\n                    filter = that.filter,\n                    target,\n                    touches = getTouches(e),\n                    length = touches.length,\n                    touch,\n                    which = e.which;\n\n                if ((which && which > 1) || (that._maxTouchesReached())) {\n                    return;\n                }\n\n                UserEvents.current = null;\n\n                that.currentTarget = e.currentTarget;\n\n                if (that.preventDefault) {\n                    e.preventDefault();\n                }\n\n                if (that.stopPropagation) {\n                    e.stopPropagation();\n                }\n\n                for (; idx < length; idx ++) {\n                    if (that._maxTouchesReached()) {\n                        break;\n                    }\n\n                    touch = touches[idx];\n\n                    if (filter) {\n                        target = $(touch.currentTarget); // target.is(filter) ? target : target.closest(filter, that.element);\n                    } else {\n                        target = that.element;\n                    }\n\n                    if (!target.length) {\n                        continue;\n                    }\n\n                    touch = new Touch(that, target, touch);\n                    that.touches.push(touch);\n                    touch.press();\n\n                    if (that._isMultiTouch()) {\n                        that.notify(\"gesturestart\", {});\n                    }\n                }\n            },\n\n            _move: function(e) {\n                this._eachTouch(\"move\", e);\n            },\n\n            _end: function(e) {\n                this._eachTouch(\"end\", e);\n            },\n\n            _click: function(e) {\n                var data = {\n                    touch: {\n                        initialTouch: e.target,\n                        target: $(e.currentTarget),\n                        endTime: now(),\n                        x: {\n                            location: e.pageX,\n                            client: e.clientX\n                        },\n                        y: {\n                            location: e.pageY,\n                            client: e.clientY\n                        }\n                    },\n                    x: e.pageX,\n                    y: e.pageY,\n                    target: $(e.currentTarget),\n                    event: e,\n                    type: \"tap\"\n                };\n\n                if (this.trigger(\"tap\", data)) {\n                    e.preventDefault();\n                }\n            },\n\n            _eachTouch: function(methodName, e) {\n                var that = this,\n                    dict = {},\n                    touches = getTouches(e),\n                    activeTouches = that.touches,\n                    idx,\n                    touch,\n                    touchInfo,\n                    matchingTouch;\n\n                for (idx = 0; idx < activeTouches.length; idx ++) {\n                    touch = activeTouches[idx];\n                    dict[touch.id] = touch;\n                }\n\n                for (idx = 0; idx < touches.length; idx ++) {\n                    touchInfo = touches[idx];\n                    matchingTouch = dict[touchInfo.id];\n\n                    if (matchingTouch) {\n                        matchingTouch[methodName](touchInfo);\n                    }\n                }\n            },\n\n            _apiCall: function(type, x, y, target) {\n                this[type]({\n                    api: true,\n                    pageX: x,\n                    pageY: y,\n                    clientX: x,\n                    clientY: y,\n                    target: $(target || this.element)[0],\n                    stopPropagation: $.noop,\n                    preventDefault: $.noop\n                });\n            }\n        });\n\n        var ClickMoveClick = Observable.extend({\n            init: function(element, options) {\n                var that = this,\n                    filter,\n                    ns = kendo.guid();\n\n                options = options || {};\n                filter = that.filter = options.filter;\n                that.touches = [];\n                that._maxTouches = 1;\n                that.eventNS = ns;\n                that._downStarted = 0;\n\n                element = $(element).handler(that);\n                Observable.fn.init.call(that);\n\n                extend(that, {\n                    element: element,\n                    // the touch events lock to the element anyway, so no need for the global setting\n                    surface: options.global && ENABLE_GLOBAL_SURFACE ? $(element[0].ownerDocument.documentElement) : $(options.surface || element),\n                    stopPropagation: options.stopPropagation,\n                    pressed: false\n                });\n\n                that.surface.handler(that)\n                    .on(kendo.applyEventMap(\"move\", ns), \"_move\")\n                    .on(kendo.applyEventMap(\"cancel up\", ns), \"cancel\");\n\n                element.on(kendo.applyEventMap(\"down\", ns), filter, \"_down\")\n                    .on(kendo.applyEventMap(\"up\", ns), filter, \"_up\");\n\n                that.bind([\n                    START,\n                    MOVE,\n                    END,\n                    HOLD,\n                    CANCEL,\n                    SELECT\n                ], options);\n            },\n\n            _down: function(e) {\n                if (e.which && e.which > 1) {\n                    this.cancel();\n                } else {\n                    this._downStarted = new Date().getTime();\n                    this._downTarget = e.target;\n                }\n            },\n\n            _up: function(e) {\n                var currentMilestone = new Date().getTime(),\n                    currentTarget = e.target;\n\n                if ((!e.which || e.which === 1) &&\n                    currentMilestone < this._downStarted + CLICK_DELAY &&\n                    currentTarget === this._downTarget) {\n                        if (this.touches && this.touches.length > 0) {\n                            this._end(e);\n                        } else {\n                            this._start(e);\n                        }\n\n                        this._preventCancel = true;\n                } else {\n                    this.cancel();\n                }\n\n                this._downStarted = 0;\n                this._downTarget = null;\n            },\n\n            destroy: function() {\n                var that = this;\n\n                if (that._destroyed) {\n                    return;\n                }\n\n                that._destroyed = true;\n\n                that.element.kendoDestroy(that.eventNS);\n                that.surface.kendoDestroy(that.eventNS);\n                that.element.removeData(\"handler\");\n                that.surface.removeData(\"handler\");\n                that._disposeAll();\n\n                that.unbind();\n                delete that.surface;\n                delete that.element;\n                delete that.currentTarget;\n            },\n\n            capture: function() {\n                ClickMoveClick.current = this;\n            },\n\n            cancel: function() {\n                if (this._preventCancel) {\n                    this._preventCancel = false;\n                    return;\n                } else if (this.touches && this.touches.length > 0) {\n                    this._disposeAll();\n                    this.trigger(CANCEL);\n                }\n            },\n\n            notify: function(eventName, data) {\n                data.clickMoveClick = true;\n                return this.trigger(eventName, extend(data, { type: eventName }));\n            },\n\n            _maxTouchesReached: function() {\n                return this.touches.length >= this._maxTouches;\n            },\n\n            _disposeAll: function() {\n                var touches = this.touches;\n\n                while (touches.length > 0) {\n                    touches.pop().dispose();\n                }\n            },\n\n            _start: function(e) {\n                var that = this,\n                    idx = 0,\n                    filter = that.filter,\n                    target,\n                    touches = getTouches(e),\n                    length = touches.length,\n                    touch,\n                    which = e.which;\n\n                if ((which && which > 1) || (that._maxTouchesReached())) {\n                    return;\n                }\n\n                ClickMoveClick.current = null;\n\n                that.currentTarget = e.currentTarget;\n\n                if (that.stopPropagation) {\n                    e.stopPropagation();\n                }\n\n                for (; idx < length; idx ++) {\n                    if (that._maxTouchesReached()) {\n                        break;\n                    }\n\n                    touch = touches[idx];\n\n                    if (filter) {\n                        target = $(touch.currentTarget);\n                    } else {\n                        target = that.element;\n                    }\n\n                    if (!target.length) {\n                        continue;\n                    }\n\n                    touch = new Touch(that, target, touch);\n                    that.touches.push(touch);\n                    touch.press();\n                    touch._start(touch);\n                }\n            },\n\n            _move: function(e) {\n                this._eachTouch(\"move\", e);\n            },\n\n            _end: function(e) {\n                this._eachTouch(\"move\", e);\n                this._eachTouch(\"end\", e);\n            },\n\n            _eachTouch: function(methodName, e) {\n                var that = this,\n                    dict = {},\n                    touches = getTouches(e),\n                    activeTouches = that.touches,\n                    idx,\n                    touch,\n                    touchInfo,\n                    matchingTouch;\n\n                for (idx = 0; idx < activeTouches.length; idx ++) {\n                    touch = activeTouches[idx];\n                    dict[touch.id] = touch;\n                }\n\n                for (idx = 0; idx < touches.length; idx ++) {\n                    touchInfo = touches[idx];\n                    matchingTouch = dict[touchInfo.id];\n\n                    if (matchingTouch) {\n                        matchingTouch.x.move(touchInfo.location);\n                        matchingTouch.y.move(touchInfo.location);\n                        matchingTouch[methodName](touchInfo);\n                    }\n                }\n            }\n        });\n\n        UserEvents.defaultThreshold = function(value) {\n            DEFAULT_THRESHOLD = value;\n        };\n\n        UserEvents.minHold = function(value) {\n            DEFAULT_MIN_HOLD = value;\n        };\n\n        kendo.getTouches = getTouches;\n        kendo.touchDelta = touchDelta;\n        kendo.UserEvents = UserEvents;\n        kendo.ClickMoveClick = ClickMoveClick;\n     })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    exports.__meta__ = __meta__;\n    exports.default = kendo$1;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}