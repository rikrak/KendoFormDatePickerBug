{"version":3,"sources":["raw-js/kendo.pivotgrid-common.cmn.chunk.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendo","_globals","PivotgridCommonCmnChunk","DataQueryCmnChunk","this","kendo_dataQuery_cmn_chunk_js","filterFunctionFormats","contains","doesnotcontain","endswith","eq","neq","startswith","operators","serializeExpression","expression","command","value","String","field","operator","str","values","_i","arguments","length","forEach","index","replace","RegExp","formatString","serializeMembers","members","measures","sort","memberName","parsed","found","expanded","child","root","idx","member","name_1","name","push","hierarchyName","baseHierarchyPath","j","l","indexOf","expand","concat","parseDescriptors","rootNames","some","n","getRootNames","crossJoinCommands","names","crossJoinCommand","mapNames","expandMemberDescriptor","join","measureNames","measure","result","undefined","rootLength","slice","name_2","rootName","tmp","crossJoin","sortDescriptor","length_1","sortDescriptorForMember","dir","parts","split","pop","shift","createRequestBody","options","_a","columnAxes","_b","rowAxes","_c","measureAxes","_d","_e","filter","measuresRowAxis","measuresAxis","filters","cube","current","serializeFilters","connection","catalog","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","prototype","create","__assign","assign","t","s","i","call","apply","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","e","rejected","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","parseResponse","response","xmlDoc","DOMParser","parseFromString","axes","from","querySelectorAll","cells","map","cell","fmtValue","getPropertyValue","ordinal","parseInt","getAttribute","columns","tuples","rows","data","axis","tuple","lNum","hasChildren","caption","children","hierarchy","levelName","levelNum","parentName","translateAxis","indexedData","fill","c","counter","rowTuple","colTuple","columnTuple","node","querySelector","textContent","discoverCommands","schemaCatalogs","schemaCubes","schemaDimensions","schemaHierarchies","schemaKPIs","schemaLevels","schemaMeasures","schemaMembers","createDiscoverBody","properties","serializeOptions","restrictions","Catalog","parentTagName","capitalize","key","toUpperCase","_this","discoverParser","row","description","type","defaultHierarchy","uniqueName","dimensionUniqueName","displayFolder","origin","defaultMember","goal","status","trend","statusGraphic","trendGraphic","groupName","orderingProperty","hierarchyUniqueName","aggregator","defaultFormat","levelUniqueName","childrenCardinality","isMeasure","getMaxNesting","set","Set","add","size","getMaxExpansion","generateNormalizedPath","parent","normalizedPath","Boolean","toMatrix","rowIndex","colIndex","maxDepth","maxBreadth","matrix","leafs","branchDepth","branchBreadth","depth","breadth","matrixResult","leafsResult","findIndex","level","inject","total","path","splice","collOffset","newMatrix","newLeafs","childBreadth","withTotal","alt","childIndex","childHierarchy","copy","obj","JSON","parse","stringify","kpiMeasure","kpi","buildKPIMeasures","compareAxisWithField","a","compareAxes","filterField","out","_loop_2","startsWith","duplicatedAxisIndex","ax","insertAxis","toInsert","state","dropTarget","dropDirection","offset","reverseColumnsByMeasures","firstColumn","lastMember","columnsArr","measuresCount","col","result_1","arr","reverse","HEADERS_ACTION","PIVOT_CONFIGURATOR_ACTION","findPath","matchFn","matched","match","h","headersReducer","action","toggle","existing","find","payload","collapse","existing_1","nextState","filtered_1","tree","H","configuratorReducer","newRows","newColumns","newMeasures","newSort","newFilter","newDragitem","newDropZone","newDropDirection","newDropTarget","toggleSelection","isArray","payload_1","removeMeasureAxis","addMeasureAxis","every","m","removeMeasureAxes","addMeasureAxes","removeColumnAxis","removeRowAxis","addColumnAxis","addRowAxis","addColumnAxes","removeColumnAxes","addRowAxes","removeRowAxes","remove","setDragItem","setDropZone","setDropTarget","setDropDirection","drop","dragItem","dropZone","currentColumn","currentRow","currentMeasure","setSort","setFilter","addFilter","changeFilter","removeFilter","minAggregate","init","min","Number","POSITIVE_INFINITY","merge","src","dest","Math","accumulate","acc","isFinite","NaN","format","toFixed","maxAggregate","max","NEGATIVE_INFINITY","forEachDesc","desc","callbackfn","filterFields","callback","subNode","initialNode","childNode","get","Map","splitKeyValue","keyValue","separatorIndex","substring","calculateColumnData","dataField","k","childData_1","parentData_1","aggregate","mergeTrees","srcChild","destChild","calculateColumns","columnsData","srcColumns","destColumns","createPath","caption_1","membersNode","axisSettings","cache","cacheData","has","currentLevel","currentLevelNode","levelField_1","_loop_1","item","newDest","currentPath","readData","dataTree","rowTuples","columnTuples","fields","columnSettings","rowSettings","rowsCache","rowNode","rowColumnsNode","measuresMember_1","colNode","mergeData","exclude","rootFields","definitions","createTuples","axesSettings","sortDescriptors","excludeFields","parentFields","flatMembers","topTuple","allTuple","topField","getTopMembersTuple","currDef","axe","keysToAdd","keys","currDefMembers","element","delete","nodeData","curLevel_1","childrenByKeys","descriptor","order","sortableA","sortValue","sortableB","sortFunc","leafValue","leafTuple","axisCaption","curCaption","measureToMember","addMeasure","measureMember","tupleCopy","addMultipleMeasures","tupleWithMeasure","Navigation","tabIndex","eventHandlers","update","defineProperty","selectors","enumerable","configurable","all","elements","el","matches","start","eventType","this_1","mouseEvents","ev","target","Element","closest","addEventListener","this_2","keyboardEvents","stop","removeEventListener","focusElement","previous","removeAttribute","classList","setAttribute","focus","preventScroll","scrollableValuesSel","scrollableColumnHeaderSel","scrollableRowHeaderSel","emptyCellSel","tableSel","cellSel","scrollables","selectors$1","onEnter","nav","icon","index_1","click","preventDefault","tryScrollLeft","scrollable","elToScroll","offsetLeft","scrollLeft","tryScrollRight","offsetWidth","tryScrollUp","scrollTop","offsetTop","tryScrollDown","offsetHeight","scrollTo","scrollFunc","scroll","tableMap","table","colsCount","colSpan","reduce","prev","cur","r","curColSpan","colSp","rowSp","rowSpan","ind","val","curInd","navigationMap","columnHeader","rowHeader","emptyCell","emptyCellRow","ctrlKey","metaKey","cellAt","pos","targetPos","getTargetPos","nextPos","keyboardEvents$1","keydown","ArrowLeft","ArrowRight","ArrowUp","ArrowDown","o","_target","_ev","nextElementSibling","HTMLElement","setTimeout","parentNode","confHeader","Enter","Space","Home","ro","x","End","mouseEvents$1","hasAttribute","PivotGridNavigation","_super","navigate","onDelete","Tab","shiftKey","Escape","pivot","previousElementSibling","confButton","pivotCell","Delete","Backspace","ConfiguratorNavigation","A","expandTree","descriptors","B","C","D","E","F","G","I","__meta__","id","category","depends","hidden","chunk","args","colTuples","countA","_value","leafNodes","compositeFilter","logic","predicate","fieldValues","hasFilter","filteringAxes","filteringFields_1","initializeFiltering","dataItem","filteringDataItem_1","displayValue","dataKey","node_1","eachAxis","leaf","sumA","count","fetchOptions","stringResponse","headers","method","fetch","url","text","tupleIndex","memberIndex","parent_1","parentKey","intruderIndex","rotateMatrix","q","sum","hash","membersNames","columnsIndexes","rowsIndexes","colMembers","rowMembers","u","w","dimensions","dim","z"],"mappings":"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","file":"kendo.pivotgrid-common.cmn.chunk.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('kendo.data-query.cmn.chunk.js')) :\n    typeof define === 'function' && define.amd ? define(['exports', 'kendo.data-query.cmn.chunk'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.kendo = global.kendo || {}, global.kendo._globals = global.kendo._globals || {}, global.kendo._globals.PivotgridCommonCmnChunk = {}), global.kendo._globals.DataQueryCmnChunk));\n})(this, (function (exports, kendo_dataQuery_cmn_chunk_js) {\n    const __meta__ = {\n        id: \"pivotgrid-common.cmn.chunk\",\n        name: \"PivotgridCommonCmnChunk\",\n        category: \"web\",\n        description: \"A reusable outputed chunk of code\",\n        depends: ['data-query.cmn.chunk'],\n        hidden: true,\n        chunk: true\n    };\n\n\n\n    var filterFunctionFormats = {\n        contains: \", InStr({0}.CurrentMember.MEMBER_CAPTION,\\\"{1}\\\") > 0\",\n        doesnotcontain: \", InStr({0}.CurrentMember.MEMBER_CAPTION,\\\"{1}\\\")\",\n        endswith: \", Right({0}.CurrentMember.MEMBER_CAPTION,Len(\\\"{1}\\\"))=\\\"{1}\\\"\",\n        eq: \", {0}.CurrentMember.MEMBER_CAPTION = \\\"{1}\\\"\",\n        neq: \", {0}.CurrentMember.MEMBER_CAPTION = \\\"{1}\\\"\",\n        startswith: \", Left({0}.CurrentMember.MEMBER_CAPTION,Len(\\\"{1}\\\"))=\\\"{1}\\\"\"\n    };\n    var operators = {\n        doesnotcontain: 'doesnotcontain',\n        in: 'in',\n        neq: \"neq\"\n    };\n    /**\n     * @hidden\n     */\n    function serializeFilters(filters, cube) {\n        var command = \"\";\n        var current = \"\";\n        for (var idx = filters.length - 1; idx >= 0; idx--) {\n            current = \"SELECT (\";\n            current += serializeExpression(filters[idx]);\n            current += \") ON 0\";\n            if (idx === filters.length - 1) {\n                current += \" FROM [\" + cube + \"]\";\n                command = current;\n            }\n            else {\n                command = current + \" FROM ( \" + command + \" )\";\n            }\n        }\n        return command;\n    }\n    function serializeExpression(expression) {\n        var command = '';\n        var value = String(expression.value);\n        var field = expression.field;\n        var operator = expression.operator;\n        if (operator === operators.in) {\n            command += \"{\";\n            command += value;\n            command += \"}\";\n        }\n        else {\n            command += operator === operators.neq || operator === operators.doesnotcontain ? '-' : '';\n            command += \"Filter(\";\n            command += field + \".MEMBERS\";\n            command += formatString(filterFunctionFormats[operator], field, value);\n            command += \")\";\n        }\n        return command;\n    }\n    function formatString(str) {\n        var values = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            values[_i - 1] = arguments[_i];\n        }\n        values.forEach(function (value, index) {\n            str = str.replace(new RegExp(\"\\\\{\" + index + \"\\\\}\", 'g'), value);\n        });\n        return str;\n    }\n\n    /**\n     * @hidden\n     */\n    function serializeMembers(members, measures, sort) {\n        var command = \"\";\n        members = members || [];\n        var parsed = parseDescriptors(members);\n        var expanded = parsed.expanded;\n        var rootNames = getRootNames(parsed.root);\n        var crossJoinCommands = [];\n        var length = expanded.length;\n        var idx = 0;\n        var memberName;\n        var names = [];\n        if (rootNames.length > 1 || measures.length > 1) {\n            crossJoinCommands.push(crossJoinCommand(rootNames, measures));\n            for (; idx < length; idx++) {\n                memberName = expandMemberDescriptor(expanded[idx].name, sort);\n                names = mapNames(memberName, rootNames);\n                crossJoinCommands.push(crossJoinCommand(names, measures));\n            }\n            command += crossJoinCommands.join(\",\");\n        }\n        else {\n            for (; idx < length; idx++) {\n                memberName = expandMemberDescriptor(expanded[idx].name, sort);\n                names.push(memberName[0]);\n            }\n            command += rootNames.concat(names).join(\",\");\n        }\n        return command;\n    }\n    /**\n     * @hidden\n     */\n    function measureNames(measures) {\n        var length = measures.length;\n        var result = [];\n        var measure;\n        for (var idx = 0; idx < length; idx++) {\n            measure = measures[idx];\n            result.push(measure.name !== undefined ? measure.name : measure);\n        }\n        return result;\n    }\n    function getRootNames(members) {\n        var root = [];\n        members.forEach(function (member) {\n            var name = member.name[0];\n            var hierarchyName = baseHierarchyPath(name);\n            if (!root.some(function (n) { return n.indexOf(hierarchyName) === 0; })) {\n                root.push(name);\n            }\n        });\n        return root;\n    }\n    function parseDescriptors(members) {\n        var expanded = [];\n        var child = [];\n        var root = [];\n        var idx = 0;\n        var found;\n        for (; idx < members.length; idx++) {\n            var member = members[idx];\n            var name_1 = member.name;\n            found = false;\n            if (name_1.length > 1) {\n                child.push(member);\n            }\n            else {\n                var hierarchyName = baseHierarchyPath(name_1[0]);\n                for (var j = 0, l = root.length; j < l; j++) {\n                    if (root[j].name[0].indexOf(hierarchyName) === 0) {\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    root.push(member);\n                }\n                if (member.expand) {\n                    expanded.push(member);\n                }\n            }\n        }\n        expanded = expanded.concat(child);\n        return {\n            expanded: expanded,\n            root: root\n        };\n    }\n    function mapNames(names, rootNames) {\n        var rootLength = rootNames.length;\n        rootNames = rootNames.slice(0);\n        for (var idx = 0; idx < names.length; idx++) {\n            var name_2 = names[idx];\n            for (var j = 0; j < rootLength; j++) {\n                var rootName = baseHierarchyPath(rootNames[j]);\n                if (name_2.indexOf(rootName) !== -1) {\n                    rootNames[j] = name_2;\n                    break;\n                }\n            }\n        }\n        return rootNames;\n    }\n    function crossJoinCommand(members, measures) {\n        var tmp = members.slice(0);\n        if (measures.length > 1) {\n            tmp.push(\"{\" + measureNames(measures).join(\",\") + \"}\");\n        }\n        return crossJoin(tmp);\n    }\n    function expandMemberDescriptor(names, sort) {\n        var idx = names.length - 1;\n        var name = names[idx];\n        var sortDescriptor = sortDescriptorForMember(sort, name);\n        if (sortDescriptor && sortDescriptor.dir) {\n            name = \"ORDER(\" + name + \".Children,\" + sortDescriptor.field + \".CurrentMember.MEMBER_CAPTION,\" + sortDescriptor.dir + \")\";\n        }\n        else {\n            name += \".Children\";\n        }\n        names[idx] = name;\n        return names;\n    }\n    function sortDescriptorForMember(sort, member) {\n        for (var idx = 0, length_1 = sort.length; idx < length_1; idx++) {\n            if (member.indexOf(sort[idx].field) === 0) {\n                return sort[idx];\n            }\n        }\n        return null;\n    }\n    function baseHierarchyPath(memberName) {\n        var parts = memberName.split(\".\");\n        if (parts.length > 2) {\n            return parts[0] + \".\" + parts[1];\n        }\n        return memberName;\n    }\n    function crossJoin(names) {\n        var result = \"CROSSJOIN({\";\n        var name;\n        if (names.length > 2) {\n            name = names.pop();\n            result += crossJoin(names);\n        }\n        else {\n            result += names.shift();\n            name = names.pop();\n        }\n        result += \"},{\";\n        result += name;\n        result += \"})\";\n        return result;\n    }\n\n    /**\n     * @hidden\n     */\n    function createRequestBody(options) {\n        var command = '<Envelope xmlns=\"http://schemas.xmlsoap.org/soap/envelope/\"><Header/><Body><Execute xmlns=\"urn:schemas-microsoft-com:xml-analysis\"><Command><Statement>';\n        var _a = options.columnAxes, columnAxes = _a === void 0 ? [] : _a, _b = options.rowAxes, rowAxes = _b === void 0 ? [] : _b;\n        var _c = options.measureAxes, measureAxes = _c === void 0 ? [] : _c, _d = options.sort, sort = _d === void 0 ? [] : _d, _e = options.filter, filter = _e === void 0 ? [] : _e;\n        var measuresRowAxis = options.measuresAxis === \"rows\";\n        command += \"SELECT NON EMPTY {\";\n        if (!columnAxes.length && rowAxes.length && (!measureAxes.length || (measureAxes.length && measuresRowAxis))) {\n            columnAxes = rowAxes;\n            rowAxes = [];\n            measuresRowAxis = false;\n        }\n        if (!columnAxes.length && !rowAxes.length) {\n            measuresRowAxis = false;\n        }\n        if (columnAxes.length) {\n            command += serializeMembers(columnAxes, !measuresRowAxis ? measureAxes : [], sort);\n        }\n        else if (measureAxes.length && !measuresRowAxis) {\n            command += measureNames(measureAxes).join(\",\");\n        }\n        command += \"} DIMENSION PROPERTIES CHILDREN_CARDINALITY, PARENT_UNIQUE_NAME ON COLUMNS\";\n        if (rowAxes.length || (measuresRowAxis && measureAxes.length > 1)) {\n            command += \", NON EMPTY {\";\n            if (rowAxes.length) {\n                command += serializeMembers(rowAxes, measuresRowAxis ? measureAxes : [], sort);\n            }\n            else {\n                command += measureNames(measureAxes).join(\",\");\n            }\n            command += \"} DIMENSION PROPERTIES CHILDREN_CARDINALITY, PARENT_UNIQUE_NAME ON ROWS\";\n        }\n        if (filter.length) {\n            command += \" FROM \";\n            command += \"(\";\n            command += serializeFilters(filter, options.connection.cube);\n            command += \")\";\n        }\n        else {\n            command += \" FROM [\" + options.connection.cube + \"]\";\n        }\n        if (measureAxes.length === 1 && columnAxes.length) {\n            command += \" WHERE (\" + measureNames(measureAxes).join(\",\") + \")\";\n        }\n        command += '</Statement></Command><Properties><PropertyList><Catalog>' + options.connection.catalog + '</Catalog><Format>Multidimensional</Format></PropertyList></Properties></Execute></Body></Envelope>';\n        return command.replace(/&/g, \"&amp;\");\n    }\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation.\r\n\r\n    Permission to use, copy, modify, and/or distribute this software for any\r\n    purpose with or without fee is hereby granted.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\n    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\n    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\n    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\n    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\n    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\n    PERFORMANCE OF THIS SOFTWARE.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\r\n\r\n    function __rest(s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                    t[p[i]] = s[p[i]];\r\n            }\r\n        return t;\r\n    }\r\n\r\n    function __decorate(decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    }\r\n\r\n    function __param(paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    }\r\n\r\n    function __metadata(metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    }\r\n\r\n    function __awaiter(thisArg, _arguments, P, generator) {\r\n        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    }\r\n\r\n    function __generator(thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    }\r\n\r\n    function __createBinding(o, m, k, k2) {\r\n        if (k2 === undefined) k2 = k;\r\n        o[k2] = m[k];\r\n    }\r\n\r\n    function __exportStar(m, exports) {\r\n        for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n    }\r\n\r\n    function __values(o) {\r\n        var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n        if (m) return m.call(o);\r\n        if (o && typeof o.length === \"number\") return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n        throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n    }\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\r\n\r\n    function __spread() {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    }\r\n\r\n    function __spreadArrays() {\r\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n                r[k] = a[j];\r\n        return r;\r\n    };\r\n\r\n    function __await(v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    }\r\n\r\n    function __asyncGenerator(thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    }\r\n\r\n    function __asyncDelegator(o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n    }\r\n\r\n    function __asyncValues(o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    }\r\n\r\n    function __makeTemplateObject(cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    function __importStar(mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n        result.default = mod;\r\n        return result;\r\n    }\r\n\r\n    function __importDefault(mod) {\r\n        return (mod && mod.__esModule) ? mod : { default: mod };\r\n    }\r\n\r\n    function __classPrivateFieldGet(receiver, privateMap) {\r\n        if (!privateMap.has(receiver)) {\r\n            throw new TypeError(\"attempted to get private field on non-instance\");\r\n        }\r\n        return privateMap.get(receiver);\r\n    }\r\n\r\n    function __classPrivateFieldSet(receiver, privateMap, value) {\r\n        if (!privateMap.has(receiver)) {\r\n            throw new TypeError(\"attempted to set private field on non-instance\");\r\n        }\r\n        privateMap.set(receiver, value);\r\n        return value;\r\n    }\n\n    /**\n     * @hidden\n     */\n    function parseResponse(response) {\n        var xmlDoc = new DOMParser().parseFromString(response, \"text/xml\");\n        var axes = Array.from(xmlDoc.querySelectorAll(\"Axis\"));\n        var cells = Array.from(xmlDoc.querySelectorAll(\"CellData > Cell\"))\n            .map(function (cell) { return ({\n            fmtValue: getPropertyValue(cell, \"FmtValue\"),\n            ordinal: parseInt(cell.getAttribute(\"CellOrdinal\"), 10),\n            value: getPropertyValue(cell, \"Value\")\n        }); });\n        var columns = { tuples: [] };\n        var rows = { tuples: [] };\n        var data = [];\n        axes.forEach(function (axis) {\n            if (axis.getAttribute('name') !== \"SlicerAxis\") {\n                var tuples = columns.tuples.length === 0 ? columns.tuples : rows.tuples;\n                Array.prototype.push.apply(tuples, translateAxis(axis));\n            }\n        });\n        var indexedData = new Array(rows.tuples.length * columns.tuples.length).fill(null);\n        cells.forEach(function (c) { indexedData[c.ordinal] = c; });\n        var counter = 0;\n        rows.tuples.forEach(function (rowTuple) {\n            columns.tuples.forEach(function (colTuple) {\n                data.push({\n                    columnTuple: colTuple,\n                    data: indexedData[counter],\n                    rowTuple: rowTuple\n                });\n                counter++;\n            });\n        });\n        return { columns: columns, data: data, rows: rows };\n    }\n    /**\n     * @hidden\n     */\n    function getPropertyValue(member, name) {\n        var node = member.querySelector(name);\n        return node ? node.textContent : \"\";\n    }\n    function translateAxis(axis) {\n        var tuples = Array.from(axis.querySelectorAll(\"Tuple\"));\n        return tuples.map(function (tuple) {\n            var memberElements = Array.from(tuple.querySelectorAll(\"Member\"));\n            var members = memberElements.map(function (member) {\n                var lNum = parseInt(getPropertyValue(member, \"LNum\") || \"0\", 10);\n                var hasChildren = parseInt(getPropertyValue(member, \"CHILDREN_CARDINALITY\") || \"0\", 10) > 0;\n                return {\n                    caption: getPropertyValue(member, \"Caption\"),\n                    children: [],\n                    hasChildren: hasChildren,\n                    hierarchy: member.getAttribute('Hierarchy'),\n                    levelName: getPropertyValue(member, \"LName\"),\n                    levelNum: lNum,\n                    name: getPropertyValue(member, \"UName\"),\n                    parentName: getPropertyValue(member, \"PARENT_UNIQUE_NAME\")\n                };\n            });\n            return { members: members };\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    var discoverCommands = {\n        schemaCatalogs: \"DBSCHEMA_CATALOGS\",\n        schemaCubes: \"MDSCHEMA_CUBES\",\n        schemaDimensions: \"MDSCHEMA_DIMENSIONS\",\n        schemaHierarchies: \"MDSCHEMA_HIERARCHIES\",\n        schemaKPIs: \"MDSCHEMA_KPIS\",\n        schemaLevels: \"MDSCHEMA_LEVELS\",\n        schemaMeasures: \"MDSCHEMA_MEASURES\",\n        schemaMembers: \"MDSCHEMA_MEMBERS\"\n    };\n    /**\n     * @hidden\n     */\n    function createDiscoverBody(options) {\n        var properties = {};\n        var command = '<Envelope xmlns=\"http://schemas.xmlsoap.org/soap/envelope/\"><Header/><Body><Discover xmlns=\"urn:schemas-microsoft-com:xml-analysis\">';\n        command += \"<RequestType>\" + (discoverCommands[options.command] || options.command) + \"</RequestType>\";\n        command += \"<Restrictions>\" + serializeOptions(\"RestrictionList\", options.restrictions, true) + \"</Restrictions>\";\n        if (options.connection && options.connection.catalog) {\n            properties.Catalog = options.connection.catalog;\n        }\n        command += \"<Properties>\" + serializeOptions(\"PropertyList\", properties, false) + \"</Properties>\";\n        command += '</Discover></Body></Envelope>';\n        return command;\n    }\n    function serializeOptions(parentTagName, options, capitalize) {\n        var result = \"\";\n        if (options) {\n            result += \"<\" + parentTagName + \">\";\n            var value = void 0;\n            for (var key in options) {\n                if (options[key]) {\n                    value = options[key];\n                    if (capitalize) {\n                        key = key.replace(/([A-Z]+(?=$|[A-Z][a-z])|[A-Z]?[a-z]+)/g, \"$1_\").toUpperCase().replace(/_$/, \"\");\n                    }\n                    result += \"<\" + key + \">\" + value + \"</\" + key + \">\";\n                }\n            }\n            result += \"</\" + parentTagName + \">\";\n        }\n        else {\n            result += \"<\" + parentTagName + \"/>\";\n        }\n        return result;\n    }\n\n    /**\n     * @hidden\n     */\n    function parseCubes(response) {\n        var xmlDoc = new DOMParser().parseFromString(response, \"text/xml\");\n        var rows = Array.from(xmlDoc.querySelectorAll(\"DiscoverResponse > return > root > row\"))\n            .map(function (row) { return ({\n            name: getPropertyValue(row, \"CUBE_NAME\"),\n            caption: getPropertyValue(row, \"CUBE_CAPTION\"),\n            description: getPropertyValue(row, \"DESCRIPTION\"),\n            type: getPropertyValue(row, \"CUBE_TYPE\")\n        }); });\n        return rows;\n    }\n    /**\n     * @hidden\n     */\n    function parseCatalogs(response) {\n        var xmlDoc = new DOMParser().parseFromString(response, \"text/xml\");\n        var rows = Array.from(xmlDoc.querySelectorAll(\"DiscoverResponse > return > root > row\"))\n            .map(function (row) { return ({\n            name: getPropertyValue(row, \"CATALOG_NAME\"),\n            description: getPropertyValue(row, \"DESCRIPTION\")\n        }); });\n        return rows;\n    }\n    /**\n     * @hidden\n     */\n    function parseMeasures(response) {\n        var xmlDoc = new DOMParser().parseFromString(response, \"text/xml\");\n        var rows = Array.from(xmlDoc.querySelectorAll(\"DiscoverResponse > return > root > row\"))\n            .map(function (row) { return ({\n            name: getPropertyValue(row, \"MEASURE_NAME\"),\n            caption: getPropertyValue(row, \"MEASURE_CAPTION\"),\n            uniqueName: getPropertyValue(row, \"MEASURE_UNIQUE_NAME\"),\n            description: getPropertyValue(row, \"DESCRIPTION\"),\n            aggregator: getPropertyValue(row, \"MEASURE_AGGREGATOR\"),\n            groupName: getPropertyValue(row, \"MEASUREGROUP_NAME\"),\n            displayFolder: getPropertyValue(row, \"MEASURE_DISPLAY_FOLDER\"),\n            defaultFormat: getPropertyValue(row, \"DEFAULT_FORMAT_STRING\")\n        }); });\n        return rows;\n    }\n    /**\n     * @hidden\n     */\n    function parseKPIs(response) {\n        var xmlDoc = new DOMParser().parseFromString(response, \"text/xml\");\n        var rows = Array.from(xmlDoc.querySelectorAll(\"DiscoverResponse > return > root > row\"))\n            .map(function (row) { return ({\n            name: getPropertyValue(row, \"KPI_NAME\"),\n            uniqueName: getPropertyValue(row, \"KPI_NAME\"),\n            caption: getPropertyValue(row, \"KPI_CAPTION\"),\n            value: getPropertyValue(row, \"KPI_VALUE\"),\n            goal: getPropertyValue(row, \"KPI_GOAL\"),\n            status: getPropertyValue(row, \"KPI_STATUS\"),\n            trend: getPropertyValue(row, \"KPI_TREND\"),\n            statusGraphic: getPropertyValue(row, \"KPI_STATUS_GRAPHIC\"),\n            trendGraphic: getPropertyValue(row, \"KPI_TREND_GRAPHIC\"),\n            description: getPropertyValue(row, \"KPI_DESCRIPTION\"),\n            groupName: getPropertyValue(row, \"MEASUREGROUP_NAME\"),\n            type: \"kpi\"\n        }); });\n        return rows;\n    }\n    /**\n     * @hidden\n     */\n    function parseDimensions(response) {\n        var xmlDoc = new DOMParser().parseFromString(response, \"text/xml\");\n        var rows = Array.from(xmlDoc.querySelectorAll(\"DiscoverResponse > return > root > row\"))\n            .map(function (row) { return ({\n            caption: getPropertyValue(row, \"DIMENSION_CAPTION\"),\n            defaultHierarchy: getPropertyValue(row, \"DEFAULT_HIERARCHY\"),\n            description: getPropertyValue(row, \"DESCRIPTION\"),\n            name: getPropertyValue(row, \"DIMENSION_NAME\"),\n            type: parseInt(getPropertyValue(row, \"DIMENSION_TYPE\"), 10),\n            uniqueName: getPropertyValue(row, \"DIMENSION_UNIQUE_NAME\")\n        }); });\n        return rows;\n    }\n    /**\n     * @hidden\n     */\n    function parseHierarchies(response) {\n        var xmlDoc = new DOMParser().parseFromString(response, \"text/xml\");\n        var rows = Array.from(xmlDoc.querySelectorAll(\"DiscoverResponse > return > root > row\"))\n            .map(function (row) { return ({\n            name: getPropertyValue(row, \"HIERARCHY_NAME\"),\n            caption: getPropertyValue(row, \"HIERARCHY_CAPTION\"),\n            description: getPropertyValue(row, \"DESCRIPTION\"),\n            uniqueName: getPropertyValue(row, \"HIERARCHY_UNIQUE_NAME\"),\n            dimensionUniqueName: getPropertyValue(row, \"DIMENSION_UNIQUE_NAME\"),\n            displayFolder: getPropertyValue(row, \"HIERARCHY_DISPLAY_FOLDER\"),\n            origin: getPropertyValue(row, \"HIERARCHY_ORIGIN\"),\n            defaultMember: getPropertyValue(row, \"DEFAULT_MEMBER\")\n        }); });\n        return rows;\n    }\n    /**\n     * @hidden\n     */\n    function parseLevels(response) {\n        var xmlDoc = new DOMParser().parseFromString(response, \"text/xml\");\n        var rows = Array.from(xmlDoc.querySelectorAll(\"DiscoverResponse > return > root > row\"))\n            .map(function (row) { return ({\n            name: getPropertyValue(row, \"LEVEL_NAME\"),\n            caption: getPropertyValue(row, \"LEVEL_CAPTION\"),\n            description: getPropertyValue(row, \"DESCRIPTION\"),\n            uniqueName: getPropertyValue(row, \"LEVEL_UNIQUE_NAME\"),\n            dimensionUniqueName: getPropertyValue(row, \"DIMENSION_UNIQUE_NAME\"),\n            displayFolder: getPropertyValue(row, \"LEVEL_DISPLAY_FOLDER\"),\n            orderingProperty: getPropertyValue(row, \"LEVEL_ORDERING_PROPERTY\"),\n            origin: getPropertyValue(row, \"LEVEL_ORIGIN\"),\n            hierarchyUniqueName: getPropertyValue(row, \"HIERARCHY_UNIQUE_NAME\")\n        }); });\n        return rows;\n    }\n    /**\n     * @hidden\n     */\n    function parseMembers(response) {\n        var xmlDoc = new DOMParser().parseFromString(response, \"text/xml\");\n        var rows = Array.from(xmlDoc.querySelectorAll(\"DiscoverResponse > return > root > row\"))\n            .map(function (row) { return ({\n            name: getPropertyValue(row, \"MEMBER_NAME\"),\n            caption: getPropertyValue(row, \"MEMBER_CAPTION\"),\n            uniqueName: getPropertyValue(row, \"MEMBER_UNIQUE_NAME\"),\n            dimensionUniqueName: getPropertyValue(row, \"DIMENSION_UNIQUE_NAME\"),\n            hierarchyUniqueName: getPropertyValue(row, \"HIERARCHY_UNIQUE_NAME\"),\n            levelUniqueName: getPropertyValue(row, \"LEVEL_UNIQUE_NAME\"),\n            childrenCardinality: getPropertyValue(row, \"CHILDREN_CARDINALITY\")\n        }); });\n        return rows;\n    }\n\n    var _this = undefined;\n    var discoverParser = {\n        schemaCatalogs: parseCatalogs,\n        schemaCubes: parseCubes,\n        schemaDimensions: parseDimensions,\n        schemaHierarchies: parseHierarchies,\n        schemaKPIs: parseKPIs,\n        schemaLevels: parseLevels,\n        schemaMeasures: parseMeasures,\n        schemaMembers: parseMembers\n    };\n    /**\n     * Fetches the data.\n     *\n     * @param options RequestOptions\n     * @returns Promise<ResponseData>\n     *\n     * @example\n     * const options: RequestOptions = { ... };\n     *\n     * fetchData(options).then(createDataState).then((dataState: DataState) => {\n     *  // Update the UI\n     * });\n     */\n    /**\n     * @hidden\n     */\n    var fetchData = function (fetchOptions, options) { return __awaiter(_this, void 0, void 0, function () {\n        var init, response, stringResponse;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    init = __assign({ body: createRequestBody(options), headers: { 'Content-Type': 'text/xml' }, method: 'POST' }, fetchOptions.init);\n                    return [4 /*yield*/, fetch(fetchOptions.url, init)];\n                case 1:\n                    response = _a.sent();\n                    return [4 /*yield*/, response.text()];\n                case 2:\n                    stringResponse = _a.sent();\n                    return [2 /*return*/, parseResponse(stringResponse)];\n            }\n        });\n    }); };\n    /**\n     * @hidden\n     */\n    var fetchDiscover = function (fetchOptions, options) { return __awaiter(_this, void 0, void 0, function () {\n        var init, response, stringResponse;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    init = __assign({ body: createDiscoverBody(options), headers: { 'Content-Type': 'text/xml' }, method: 'POST' }, fetchOptions.init);\n                    return [4 /*yield*/, fetch(fetchOptions.url, init)];\n                case 1:\n                    response = _a.sent();\n                    return [4 /*yield*/, response.text()];\n                case 2:\n                    stringResponse = _a.sent();\n                    return [2 /*return*/, discoverParser[options.command](stringResponse)];\n            }\n        });\n    }); };\n\n    var isMeasure = function (member) { return member.hierarchy === '[Measures]'; };\n    // A typical tree depth count won't work for the Pivot,\n    // as each branch can have lower number of nodes than the total number of levels\n    /**\n     * @hidden\n     */\n    var getMaxNesting = function (node, set) {\n        if (set === void 0) { set = new Set(); }\n        (node.children || []).forEach(function (child) {\n            set.add(child.levelName);\n            getMaxNesting(child, set);\n        });\n        return set.size;\n    };\n    /**\n     * @hidden\n     */\n    var getMaxExpansion = function (node) {\n        var expanded = 0;\n        (node.children || []).forEach(function (child) {\n            expanded += (getMaxExpansion(child) || 1);\n        });\n        return expanded;\n    };\n    /**\n     * @hidden\n     */\n    var generateNormalizedPath = function (node, parent) {\n        return (parent && (parent.hierarchy === node.hierarchy)\n            ? (parent.normalizedPath || []).slice(0, -1).concat([node.name || null]) : ((parent && parent.normalizedPath) ? parent.normalizedPath : []).concat([node.name])).filter(Boolean);\n    };\n    /**\n     * @hidden\n     */\n    var generatePath = function (node, parent) {\n        return (parent && (parent.hierarchy === node.hierarchy)\n            ? (parent.path || []).slice(0, -1).concat([((node.levelNum === 0 ? node.hierarchy : node.name) || null)]) : ((parent && parent.path) ? parent.path : []).concat([node.levelNum === 0 ? node.hierarchy : node.name])).filter(Boolean);\n    };\n    /**\n     * @hidden\n     */\n    var toMatrix = function (node, rowIndex, colIndex, maxDepth, maxBreadth, matrix, leafs, parent) {\n        if (rowIndex === void 0) { rowIndex = -1; }\n        if (colIndex === void 0) { colIndex = 0; }\n        if (maxDepth === void 0) { maxDepth = undefined; }\n        if (maxBreadth === void 0) { maxBreadth = undefined; }\n        if (matrix === void 0) { matrix = undefined; }\n        if (leafs === void 0) { leafs = undefined; }\n        if (parent === void 0) { parent = undefined; }\n        var branchDepth = getMaxNesting(node);\n        var branchBreadth = getMaxExpansion(node);\n        var depth = maxDepth || branchDepth;\n        var breadth = maxBreadth || branchBreadth;\n        var matrixResult = matrix ? matrix.slice() : [];\n        var leafsResult = leafs ? leafs.slice() : new Array(breadth);\n        var index = matrixResult.findIndex(function (l) { return l && l.name === node.levelName && l.level === node.levelNum; });\n        var level = matrixResult[index];\n        var row = {\n            name: node.levelName,\n            level: node.levelNum,\n            index: rowIndex,\n            cells: new Array(breadth).fill(null)\n        };\n        var inject = rowIndex !== -1 && colIndex !== -1;\n        var cell = {\n            caption: node.caption,\n            name: node.name,\n            levelName: node.levelName,\n            levelNum: node.levelNum,\n            hasChildren: node.hasChildren,\n            parentName: node.parentName,\n            hierarchy: node.hierarchy,\n            total: (node.total !== undefined ? node.total : false) || (parent && parent.children.length <= 1 && parent.total),\n            parent: parent,\n            rowIndex: rowIndex,\n            colIndex: colIndex,\n            depth: 1,\n            breadth: 1,\n            path: node.path || [],\n            normalizedPath: node.normalizedPath || [],\n            children: node.children.filter(function (c) { return c.hierarchy === node.hierarchy; })\n        };\n        if (inject) {\n            if (level) {\n                level.cells[colIndex] = cell;\n                if (level.index >= rowIndex) {\n                    rowIndex = level.index;\n                }\n            }\n            else {\n                if (matrixResult[rowIndex] && matrixResult[rowIndex].cells.length) {\n                    for (var idx = rowIndex; idx < matrixResult.length; idx++) {\n                        var shiftedRow = matrixResult[idx];\n                        shiftedRow.index++;\n                    }\n                    matrixResult.splice(rowIndex, 0, row);\n                    matrixResult[rowIndex].cells[colIndex] = cell;\n                }\n                else {\n                    matrixResult[rowIndex] = row;\n                    matrixResult[rowIndex].cells[colIndex] = cell;\n                }\n            }\n        }\n        var collOffset = 0;\n        if (node.children && node.children.length) {\n            node.children.forEach(function (child) {\n                var _a = toMatrix(child, rowIndex + 1, colIndex + collOffset, depth, breadth, matrixResult, leafsResult, cell), newMatrix = _a[0], newLeafs = _a[1], childBreadth = _a[3];\n                collOffset += (childBreadth || 1);\n                matrixResult = newMatrix.slice();\n                leafsResult = newLeafs.slice();\n            });\n        }\n        else if (node.normalizedPath) {\n            leafsResult[colIndex] = { total: cell.total, path: node.normalizedPath };\n        }\n        cell.depth = branchDepth;\n        cell.breadth = branchBreadth;\n        return [\n            matrixResult,\n            leafsResult,\n            branchDepth,\n            branchBreadth\n        ];\n    };\n    var withTotal = function (root, parent, index) {\n        if (parent === void 0) { parent = null; }\n        if (index === void 0) { index = 0; }\n        var hierarchy;\n        var alt = __assign({}, root, { total: true, hasChildren: false, children: [] });\n        for (var childIndex = 0; childIndex < root.children.length; childIndex++) {\n            var child = withTotal(root.children[childIndex], root, childIndex);\n            hierarchy = hierarchy || child.hierarchy;\n            if (child.hierarchy !== hierarchy\n                && parent\n                && !parent.children.some(function (c) { return c.total && c.name === alt.name; })\n                && !root.total) {\n                alt.children.push(child);\n                root.children.splice(childIndex, 1);\n                childIndex--;\n            }\n        }\n        if (root.children.filter(function (c) { return !c.total; }).length >= 1\n            && parent\n            && !parent.children.some(function (c) { return c.total && c.name === alt.name; })\n            && !root.total) {\n            var childHierarchy = root.children[0].hierarchy;\n            if (root.hierarchy === childHierarchy) {\n                parent.children.splice(index + 1, 0, alt);\n            }\n        }\n        return root;\n    };\n    /**\n     * @hidden\n     */\n    var toTree = function (tuples) {\n        var root = { children: [] };\n        var map = {};\n        if (tuples.every(function (t) { return t.members.length === 1 && isMeasure(t.members[0]); })) {\n            // toTree(columnsTuples) - The case where there are only measure(s) and no columns.\n            return {\n                children: tuples.map(function (t) {\n                    var member = t.members[0];\n                    return __assign({}, member, { normalizedPath: [member.name], parentName: member.name, path: [member.hierarchy] });\n                })\n            };\n        }\n        for (var tupleIndex = 0; tupleIndex < tuples.length; tupleIndex++) {\n            var tuple = copy(tuples[tupleIndex]);\n            var key = \"\";\n            var _loop_1 = function (memberIndex) {\n                var member = tuple.members[memberIndex];\n                var parent_1;\n                if (root.children && root.children.length === 0) {\n                    parent_1 = root;\n                }\n                else if (map[key] && !map[key + member.name] && member.levelNum === 0) {\n                    parent_1 = map[key];\n                }\n                else if (map[key + member.parentName] && member.levelNum > 0 && !map[key + member.parentName + member.name]) {\n                    parent_1 = map[key + member.parentName];\n                }\n                else if (!map[key + member.parentName] && member.levelNum > 0 && !map[key + member.parentName + member.name]) {\n                    var parentKey = Object.keys(map).find(function (e) { return member.parentName === map[e].name; });\n                    if (parentKey) {\n                        parent_1 = map[parentKey];\n                    }\n                }\n                if (parent_1) {\n                    member.path = generatePath(member, parent_1);\n                    member.normalizedPath = generateNormalizedPath(member, parent_1);\n                    var intruderIndex = parent_1.children.findIndex(function (c) { return c.hierarchy !== parent_1.hierarchy; });\n                    if (intruderIndex !== -1) {\n                        parent_1.children.splice(intruderIndex, 0, member);\n                    }\n                    else {\n                        parent_1.children.push(member);\n                    }\n                }\n                member.parentName += member.name;\n                key += member.parentName;\n                if (!map[key]) {\n                    map[key] = member;\n                }\n            };\n            for (var memberIndex = 0; memberIndex < tuple.members.length; memberIndex++) {\n                _loop_1(memberIndex);\n            }\n        }\n        return copy(withTotal(root));\n    };\n    /**\n     * @hidden\n     */\n    var toData = function (data, columns, rows, breadth, depth) {\n        var result = Array.from(new Array(depth), function () { return ({ cells: Array.from(new Array(breadth), function () { return null; }) }); });\n        var hash = function (names) { return names.join('|'); };\n        var membersNames = function (tuple) { return tuple.members.map(function (m) { return m.name; }); };\n        var columnsIndexes = new Map();\n        var rowsIndexes = new Map();\n        columns.forEach(function (colMembers, idx) { columnsIndexes.set(hash(colMembers.path), idx); });\n        rows.forEach(function (rowMembers, idx) { rowsIndexes.set(hash(rowMembers.path), idx); });\n        data.forEach(function (item) {\n            var colIndex = columnsIndexes.get(hash(membersNames(item.columnTuple)));\n            var rowIndex = rowsIndexes.get(hash(membersNames(item.rowTuple)));\n            if (colIndex !== undefined && rowIndex !== undefined) {\n                if (!result[rowIndex].cells[colIndex]) {\n                    result[rowIndex].row = rows[rowIndex].path;\n                    result[rowIndex].cells[colIndex] = item;\n                }\n            }\n        });\n        return result;\n    };\n    var rotateMatrix = function (matrix, leafs, depth, breadth) {\n        var result = new Array(breadth);\n        for (var colIndex = 0; colIndex < breadth; colIndex++) {\n            for (var rowIndex = 0; rowIndex < depth; rowIndex++) {\n                if (matrix[rowIndex] && matrix[rowIndex].cells[colIndex]) {\n                    var cell = matrix[rowIndex].cells[colIndex];\n                    if (!result[colIndex]) {\n                        result[colIndex] = {\n                            cells: new Array(depth).fill(null)\n                        };\n                    }\n                    result[colIndex].cells[rowIndex] = __assign({}, cell, { rowSpan: cell.colSpan, colSpan: cell.rowSpan });\n                }\n            }\n        }\n        return [result, leafs, breadth, depth];\n    };\n    /**\n     * @hidden\n     */\n    var toColumns = function (root) {\n        var _a = toMatrix(root), matrix = _a[0], leafs = _a[1], depth = _a[2], breadth = _a[3];\n        for (var colIndex = 0; colIndex < breadth; colIndex++) {\n            var cell = null;\n            for (var rowIndex = 0; rowIndex < depth; rowIndex++) {\n                if (matrix[rowIndex]) {\n                    var next = matrix[rowIndex].cells[colIndex];\n                    if (!next && cell) {\n                        cell.rowSpan = (cell.rowSpan || 1) + 1;\n                    }\n                    if (cell) {\n                        cell.colSpan = cell.breadth || 1;\n                    }\n                    if (next) {\n                        cell = next;\n                    }\n                }\n            }\n        }\n        return [matrix, leafs, depth, breadth];\n    };\n    /**\n     * @hidden\n     */\n    var toRows = function (root) {\n        var _a = toMatrix(root), matrix = _a[0], leafs = _a[1], depth = _a[2], breadth = _a[3];\n        for (var colIndex = 0; colIndex < breadth; colIndex++) {\n            var cell = null;\n            for (var rowIndex = 0; rowIndex < depth; rowIndex++) {\n                if (matrix[rowIndex]) {\n                    var next = matrix[rowIndex].cells[colIndex];\n                    if (!next && cell) {\n                        cell.rowSpan = (cell.rowSpan || 1) + 1;\n                    }\n                    if (cell) {\n                        cell.colSpan = cell.breadth;\n                    }\n                    if (next) {\n                        cell = next;\n                    }\n                }\n            }\n        }\n        return rotateMatrix(matrix, leafs, depth, breadth);\n    };\n    /**\n     * @hidden\n     */\n    var cloneDate = function (date) { return date ? new Date(date.getTime()) : null; };\n    /**\n     * @hidden\n     */\n    function clone(obj) {\n        var result = {};\n        cloneObject(obj, result);\n        return result;\n    }\n    /**\n     * @hidden\n     */\n    function cloneObject(obj, result) {\n        for (var field in obj) {\n            if (obj.hasOwnProperty(field)) {\n                var value = obj[field];\n                result[field] = cloneValue(value, result[field]);\n            }\n        }\n    }\n    /**\n     * @hidden\n     */\n    function cloneValue(value, nextValue) {\n        if (Array.isArray(value)) {\n            return cloneArray(value);\n        }\n        else if (value instanceof Date) {\n            return cloneDate(value);\n        }\n        else if (value && typeof value === 'object') {\n            var newNextValue = nextValue || {};\n            cloneObject(value, newNextValue);\n            return newNextValue;\n        }\n        else {\n            return value;\n        }\n    }\n    /**\n     * @hidden\n     */\n    function copy(obj) {\n        return JSON.parse(JSON.stringify(obj));\n    }\n    /**\n     * @hidden\n     */\n    function cloneArray(array) {\n        return array.map(function (value) { return cloneValue(value, undefined); });\n    }\n    var kpiMeasure = function (name, measure, type) {\n        return {\n            hierarchyUniqueName: name,\n            uniqueName: measure,\n            caption: measure,\n            measure: measure,\n            name: measure,\n            type: type,\n            kpi: true\n        };\n    };\n    /**\n     * @hidden\n     */\n    function buildKPIMeasures(node) {\n        var name = node.name;\n        return [\n            kpiMeasure(name, node.value, \"value\"),\n            kpiMeasure(name, node.goal, \"goal\"),\n            kpiMeasure(name, node.status, \"status\"),\n            kpiMeasure(name, node.trend, \"trend\")\n        ];\n    }\n    /**\n     * @hidden\n     */\n    var addKPI = function (data) {\n        var found;\n        var idx = 0;\n        for (; idx < data.length; idx++) {\n            if (data[idx].type === 2) {\n                found = true;\n                break;\n            }\n        }\n        if (found) {\n            data.splice(idx + 1, 0, {\n                caption: \"KPIs\",\n                defaultHierarchy: \"[KPIs]\",\n                name: \"KPIs\",\n                uniqueName: \"[KPIs]\"\n            });\n        }\n    };\n    /**\n     * @hidden\n     */\n    var compareAxisWithField = function (a, b) { return String(a.name) === String([(b.defaultHierarchy\n            ? b.defaultHierarchy\n            : b.uniqueName)]); };\n    /**\n     * @hidden\n     */\n    var compareAxes = function (a, b) { return String(a.name) === String(b.name); };\n    /**\n     * @hidden\n     */\n    var filterField = function (axes, out) {\n        var _loop_2 = function (i) {\n            var axis = axes[i];\n            var index = axis.name.findIndex(function (name) { return compareAxisWithField({ name: [name] }, out) || String(name).startsWith(out.uniqueName); });\n            if (index !== -1) {\n                if (index === axis.name.length - 1 || axis.name.length === 1) {\n                    axes.splice(i, 1);\n                }\n                else {\n                    axis.name.splice(index, 1);\n                    var duplicatedAxisIndex = axes.findIndex(function (ax) { return ax !== axis && String(ax.name) === String(axis.name); });\n                    if (duplicatedAxisIndex !== -1) {\n                        axes[duplicatedAxisIndex] = __assign({}, axes[duplicatedAxisIndex], axis, ((axes[duplicatedAxisIndex].expand || axis.expand) ? { expand: true } : {}));\n                        axes.splice(i, 1);\n                    }\n                }\n            }\n        };\n        for (var i = axes.length - 1; i >= 0; i--) {\n            _loop_2(i);\n        }\n    };\n    /**\n     * @hidden\n     */\n    var insertAxis = function (axes, toInsert, state) {\n        var index = -1;\n        if (state.dropTarget && state.dropDirection) {\n            var offset = state.dropDirection\n                ? (state.dropDirection === 'before'\n                    ? 0\n                    : 1)\n                : 0;\n            index = axes.findIndex(function (c) { return compareAxes(c, state.dropTarget); }) + offset;\n        }\n        if (index !== -1) {\n            axes.forEach(function (axis) {\n                var _a;\n                if (axis.expand && axis.name.length > 1 && axis.name.length > index) {\n                    (_a = axis.name).splice.apply(_a, [index, 0].concat(toInsert.name));\n                }\n            });\n            axes.splice(index, 0, toInsert);\n        }\n        else {\n            axes.push(toInsert);\n        }\n    };\n    /**\n     * @hidden\n     */\n    var reverseColumnsByMeasures = function (columns) {\n        var firstColumn = columns.length && columns[0];\n        var lastMember = firstColumn && firstColumn.members[firstColumn.members.length - 1];\n        if (lastMember && isMeasure(lastMember)) {\n            var columnsArr = [];\n            var measuresCount = new Set(columns.map(function (col) { return col.members[col.members.length - 1].caption; })).size;\n            for (var i = 0; i < columns.length; i += measuresCount) {\n                columnsArr.push(columns.slice(i, i + measuresCount));\n            }\n            var result_1 = [];\n            columnsArr.forEach(function (arr) {\n                result_1.push.apply(result_1, arr.reverse());\n            });\n            return result_1;\n        }\n        return columns;\n    };\n\n    /**\n     * Creates the state object. See `fetchData`.\n     *\n     * @param response - ResponseData\n     * @returns DataState\n     */\n    /**\n     * @hidden\n     */\n    var createDataState = function (response) {\n        var state = {\n            columns: reverseColumnsByMeasures(response.columns.tuples),\n            data: response.data,\n            rows: response.rows.tuples\n        };\n        return state;\n    };\n\n    /**\n     * Creates a collection of AxisDescriptor base on the expandTree.\n     * @param expandTree - { [key: string]: boolean }\n     * @returns AxisDescriptor[]\n     *\n     * @example\n     * See `setRowExpand` or `setColumnExpand` functions.\n     */\n    /**\n     * @hidden\n     */\n    function createAxisDescriptors(expandTree) {\n        var descriptors = [];\n        for (var _i = 0, _a = Object.keys(expandTree); _i < _a.length; _i++) {\n            var key = _a[_i];\n            descriptors.push({ name: JSON.parse(key), expand: expandTree[key] });\n        }\n        return descriptors;\n    }\n\n    /**\n     * Sets sort descriptors to request options.\n     *\n     * @param options - RequestOptions\n     * @param sort - SortDescriptor[]\n     *\n     * @example\n     * const options: RequestOptions = { ... };\n     * const sort: SortDescriptor[] = [{ ... }, { ... }];\n     * setSort(options, sort);\n     * // skip the sort parameter to clear current filter - setSort(options);\n     *\n     * fetchData(options).then(createDataState).then((dataState: DataState) => {\n     *  // Update the UI\n     * });\n     */\n    /**\n     * @hidden\n     */\n    var setSort = function (options, sort) {\n        if (sort === void 0) { sort = []; }\n        options.sort = sort;\n    };\n\n    /**\n     * Sets filter descriptors to request options.\n     *\n     * @param options - RequestOptions\n     * @param filter - FilterDescriptor[]\n     *\n     * @example\n     * const options: RequestOptions = { ... };\n     * const filter: FilterDescriptor[] = [{ ... }, { ... }];\n     * setFilter(options, filter);\n     * // skip the filter parameter to clear current filter - setFilter(options);\n     *\n     * fetchData(options).then(createDataState).then((dataState: DataState) => {\n     *  // Update the UI\n     * });\n     */\n    /**\n     * @hidden\n     */\n    var setFilter = function (options, filter) {\n        if (filter === void 0) { filter = []; }\n        options.filter = filter;\n    };\n\n    /**\n     * @hidden\n     */\n    var HEADERS_ACTION;\n    (function (HEADERS_ACTION) {\n        HEADERS_ACTION[\"toggle\"] = \"HEADERS_ACTION_TOGGLE\";\n        HEADERS_ACTION[\"expand\"] = \"HEADERS_ACTION_EXPAND\";\n        HEADERS_ACTION[\"collapse\"] = \"HEADERS_ACTION_COLLAPSE\";\n    })(HEADERS_ACTION || (HEADERS_ACTION = {}));\n    var findPath = function (node, matchFn, matched) {\n        var result = new Set();\n        node.children.forEach(function (child) {\n            var match = matchFn(child);\n            if (matched) {\n                result.add(String(child.path));\n            }\n            findPath(child, matchFn, (matched || match)).map(function (h) {\n                result.add(h);\n            });\n        });\n        return Array.from(result.values());\n    };\n    /**\n     * @hidden\n     */\n    var headersReducer = function (state, action) {\n        switch (action.type) {\n            case HEADERS_ACTION.toggle: {\n                var existing = state.find((function (s) { return String(s.name) === String(action.payload); }));\n                return headersReducer(state, __assign({}, action, { type: existing && (existing.expand)\n                        ? HEADERS_ACTION.collapse\n                        : HEADERS_ACTION.expand }));\n            }\n            case HEADERS_ACTION.expand: {\n                var existing_1 = state.find((function (s) { return String(s.name) === String(action.payload); }));\n                if (existing_1 && existing_1.expand === true) {\n                    return state;\n                }\n                else if (existing_1 && (existing_1.expand === false || existing_1.expand === undefined)) {\n                    return state.map(function (s) { return s === existing_1 ? (__assign({}, existing_1, { expand: true })) : s; });\n                }\n                else {\n                    var nextState = state.slice();\n                    nextState.push({ name: action.payload, expand: true });\n                    return nextState;\n                }\n            }\n            case HEADERS_ACTION.collapse: {\n                var filtered_1 = findPath(action.tree, function (node) { return !node.total && String(node.path) === String(action.payload); });\n                var newState = state.slice()\n                    .filter(function (h) { return !filtered_1.some(function (f) { return f === String(h.name); }); })\n                    .map(function (h) { return (__assign({}, h, { expand: Boolean(h.expand) })); })\n                    .map(function (h) { return (String(h.name) === String(action.payload))\n                    ? action.payload.length > 1 ? undefined : { name: action.payload, expand: false }\n                    : h; })\n                    .filter(Boolean);\n                return newState;\n            }\n            default: {\n                return state;\n            }\n        }\n    };\n\n    /**\n     * @hidden\n     */\n    exports.H = void 0;\n    (function (PIVOT_CONFIGURATOR_ACTION) {\n        // Selection\n        PIVOT_CONFIGURATOR_ACTION[\"toggleSelection\"] = \"PIVOT_CONFIGURATOR_ACTION_TOGGLE_SELECTION\";\n        PIVOT_CONFIGURATOR_ACTION[\"addColumnAxis\"] = \"PIVOT_CONFIGURATOR_ACTION_ADD_COLUMN_AXIS\";\n        PIVOT_CONFIGURATOR_ACTION[\"addColumnAxes\"] = \"PIVOT_CONFIGURATOR_ACTION_ADD_COLUMN_AXES\";\n        PIVOT_CONFIGURATOR_ACTION[\"removeColumnAxis\"] = \"PIVOT_CONFIGURATOR_ACTION_REMOVE_COLUMN_AXIS\";\n        PIVOT_CONFIGURATOR_ACTION[\"removeColumnAxes\"] = \"PIVOT_CONFIGURATOR_ACTION_REMOVE_COLUMN_AXES\";\n        PIVOT_CONFIGURATOR_ACTION[\"addRowAxis\"] = \"PIVOT_CONFIGURATOR_ACTION_ADD_ROW_AXIS\";\n        PIVOT_CONFIGURATOR_ACTION[\"addRowAxes\"] = \"PIVOT_CONFIGURATOR_ACTION_ADD_ROW_AXES\";\n        PIVOT_CONFIGURATOR_ACTION[\"removeRowAxis\"] = \"PIVOT_CONFIGURATOR_ACTION_REMOVE_ROW_AXIS\";\n        PIVOT_CONFIGURATOR_ACTION[\"removeRowAxes\"] = \"PIVOT_CONFIGURATOR_ACTION_REMOVE_ROW_AXES\";\n        PIVOT_CONFIGURATOR_ACTION[\"addMeasureAxis\"] = \"PIVOT_CONFIGURATOR_ACTION_ADD_MEASURE_AXIS\";\n        PIVOT_CONFIGURATOR_ACTION[\"addMeasureAxes\"] = \"PIVOT_CONFIGURATOR_ACTION_ADD_MEASURE_AXES\";\n        PIVOT_CONFIGURATOR_ACTION[\"removeMeasureAxis\"] = \"PIVOT_CONFIGURATOR_ACTION_REMOVE_MEASURE_AXIS\";\n        PIVOT_CONFIGURATOR_ACTION[\"removeMeasureAxes\"] = \"PIVOT_CONFIGURATOR_ACTION_REMOVE_MEASURE_AXES\";\n        // Removal\n        PIVOT_CONFIGURATOR_ACTION[\"remove\"] = \"PIVOT_CONFIGURATOR_ACTION_REMOVE\";\n        // Sort\n        PIVOT_CONFIGURATOR_ACTION[\"setSort\"] = \"PIVOT_CONFIGURATOR_ACTION_SET_SORT\";\n        // Filter\n        PIVOT_CONFIGURATOR_ACTION[\"setFilter\"] = \"PIVOT_CONFIGURATOR_ACTION_SET_FILTER\";\n        PIVOT_CONFIGURATOR_ACTION[\"addFilter\"] = \"PIVOT_CONFIGURATOR_ACTION_ADD_FILTER\";\n        PIVOT_CONFIGURATOR_ACTION[\"changeFilter\"] = \"PIVOT_CONFIGURATOR_ACTION_CHANGE_FILTER\";\n        PIVOT_CONFIGURATOR_ACTION[\"removeFilter\"] = \"PIVOT_CONFIGURATOR_ACTION_REMOVE_FILTER\";\n        // Drag\n        PIVOT_CONFIGURATOR_ACTION[\"setDragItem\"] = \"PIVOT_CONFIGURATOR_ACTION_SET_DRAGITEM\";\n        PIVOT_CONFIGURATOR_ACTION[\"drop\"] = \"PIVOT_CONFIGURATOR_ACTION_DROP\";\n        PIVOT_CONFIGURATOR_ACTION[\"setDropZone\"] = \"PIVOT_CONFIGURATOR_ACTION_SET_DROP_ZONE\";\n        PIVOT_CONFIGURATOR_ACTION[\"setDropTarget\"] = \"PIVOT_CONFIGURATOR_ACTION_SET_DROP_TARGET\";\n        PIVOT_CONFIGURATOR_ACTION[\"setDropDirection\"] = \"PIVOT_CONFIGURATOR_ACTION_SET_DROP_DIRECTION\";\n    })(exports.H || (exports.H = {}));\n    /**\n     * @hidden\n     */\n    var configuratorReducer = function (state, action) {\n        var newRows;\n        var newColumns;\n        var newMeasures;\n        var newSort;\n        var newFilter;\n        var newDragitem;\n        var newDropZone;\n        var newDropDirection;\n        var newDropTarget;\n        switch (action.type) {\n            case exports.H.toggleSelection: {\n                if (Array.isArray(action.payload)) {\n                    // TODO;\n                }\n                else {\n                    var payload_1 = action.payload;\n                    if (payload_1.type === 2 || 'aggregator' in payload_1) {\n                        if (state.measureAxes.some(function (s) { return compareAxisWithField(s, payload_1); })) {\n                            return configuratorReducer(state, __assign({}, action, { type: exports.H.removeMeasureAxis }));\n                        }\n                        else {\n                            return configuratorReducer(state, __assign({}, action, { type: exports.H.addMeasureAxis }));\n                        }\n                    }\n                    else if (payload_1.type === 'kpi') {\n                        var measures = buildKPIMeasures(payload_1);\n                        if (measures.every(function (m) { return state.measureAxes.some(function (s) { return compareAxisWithField(s, m); }); })) {\n                            return configuratorReducer(state, __assign({}, action, { type: exports.H.removeMeasureAxes, payload: measures }));\n                        }\n                        else {\n                            return configuratorReducer(state, __assign({}, action, { type: exports.H.addMeasureAxes, payload: measures.filter(function (m) { return !state.measureAxes.some(function (s) { return compareAxisWithField(s, m); }); }) }));\n                        }\n                    }\n                    else if (action.payload.kpi) {\n                        if (state.measureAxes.some(function (s) { return compareAxisWithField(s, payload_1); })) {\n                            return configuratorReducer(state, __assign({}, action, { type: exports.H.removeMeasureAxis }));\n                        }\n                        else {\n                            return configuratorReducer(state, __assign({}, action, { type: exports.H.addMeasureAxis }));\n                        }\n                    }\n                    else {\n                        if (state.columnAxes.some(function (s) { return compareAxisWithField(s, payload_1); })) {\n                            return configuratorReducer(state, __assign({}, action, { type: exports.H.removeColumnAxis }));\n                        }\n                        else if (state.rowAxes.some(function (s) { return compareAxisWithField(s, payload_1); })) {\n                            return configuratorReducer(state, __assign({}, action, { type: exports.H.removeRowAxis }));\n                        }\n                        else if ((state.columnAxes && state.columnAxes.length) && (!state.rowAxes || !state.rowAxes.length)) {\n                            return configuratorReducer(state, __assign({}, action, { type: exports.H.addRowAxis }));\n                        }\n                        else {\n                            return configuratorReducer(state, __assign({}, action, { type: exports.H.addColumnAxis }));\n                        }\n                    }\n                }\n                break;\n            }\n            case exports.H.addColumnAxis: {\n                newColumns = (state.columnAxes || []).concat([\n                    { name: [action.payload.defaultHierarchy || action.payload.uniqueName] }\n                ]);\n                break;\n            }\n            case exports.H.addColumnAxes: {\n                // TODO;\n                break;\n            }\n            case exports.H.removeColumnAxis: {\n                newColumns = (state.columnAxes || []).filter(function (s) { return !compareAxisWithField(s, action.payload); }).slice();\n                filterField(newColumns, action.payload);\n                break;\n            }\n            case exports.H.removeColumnAxes: {\n                // TODO;\n                break;\n            }\n            case exports.H.addRowAxis: {\n                newRows = (state.rowAxes || []).concat([\n                    { name: [action.payload.defaultHierarchy || action.payload.uniqueName] }\n                ]);\n                break;\n            }\n            case exports.H.addRowAxes: {\n                // TODO;\n                break;\n            }\n            case exports.H.removeRowAxis: {\n                newRows = (state.rowAxes || []).filter(function (s) { return !compareAxisWithField(s, action.payload); }).slice();\n                filterField(newRows, action.payload);\n                break;\n            }\n            case exports.H.removeRowAxes: {\n                // TODO;\n                break;\n            }\n            case exports.H.addMeasureAxis: {\n                newMeasures = (state.measureAxes || []).concat([\n                    { name: [action.payload.defaultHierarchy || action.payload.uniqueName] }\n                ]);\n                break;\n            }\n            case exports.H.removeMeasureAxis: {\n                newMeasures = (state.measureAxes || []).filter(function (s) { return !compareAxisWithField(s, action.payload); }).slice();\n                break;\n            }\n            case exports.H.addMeasureAxes: {\n                newMeasures = (state.measureAxes || []).concat((action.payload || []).map(function (p) { return ({ name: [p.defaultHierarchy || p.uniqueName] }); }));\n                break;\n            }\n            case exports.H.removeMeasureAxes: {\n                newMeasures = (state.measureAxes || []).filter(function (s) { return !action.payload.some(function (p) { return compareAxisWithField(s, p); }); }).slice();\n                break;\n            }\n            case exports.H.remove: {\n                if (state.columnAxes.some(function (s) { return compareAxes(s, action.payload); })) {\n                    newColumns = state.columnAxes.filter(function (s) { return !compareAxes(s, action.payload); }).slice();\n                    filterField(newColumns, { uniqueName: action.payload.name });\n                }\n                if (state.rowAxes.some(function (s) { return compareAxes(s, action.payload); })) {\n                    newRows = state.rowAxes.filter(function (s) { return !compareAxes(s, action.payload); }).slice();\n                    filterField(newRows, { uniqueName: action.payload.name });\n                }\n                if (state.measureAxes.some(function (s) { return compareAxes(s, action.payload); })) {\n                    newMeasures = state.measureAxes.filter(function (s) { return !compareAxes(s, action.payload); }).slice();\n                }\n                break;\n            }\n            case exports.H.setDragItem:\n                newDragitem = action.payload;\n                break;\n            case exports.H.setDropZone:\n                newDropZone = action.payload;\n                break;\n            case exports.H.setDropTarget:\n                newDropTarget = action.payload;\n                break;\n            case exports.H.setDropDirection:\n                newDropDirection = action.payload;\n                break;\n            case exports.H.drop:\n                if (state.dragItem && state.dropZone) {\n                    var currentColumn = state.columnAxes.find(function (s) { return compareAxes(s, action.payload); });\n                    var currentRow = state.rowAxes.find(function (s) { return compareAxes(s, action.payload); });\n                    var currentMeasure = state.measureAxes.find(function (s) { return compareAxes(s, action.payload); });\n                    var current = void 0;\n                    if (currentColumn) {\n                        current = currentColumn;\n                        newColumns = state.columnAxes.filter(function (s) { return !compareAxes(s, action.payload); }).slice();\n                        filterField(newColumns, { uniqueName: action.payload.name });\n                    }\n                    if (currentRow) {\n                        current = currentRow;\n                        newRows = state.rowAxes.filter(function (s) { return !compareAxes(s, action.payload); }).slice();\n                        filterField(newRows, { uniqueName: action.payload.name });\n                    }\n                    if (currentMeasure) {\n                        current = currentMeasure;\n                        newMeasures = state.measureAxes.filter(function (s) { return !compareAxes(s, action.payload); }).slice();\n                    }\n                    switch (state.dropZone) {\n                        case 'columnAxes': {\n                            newColumns = newColumns || state.columnAxes.slice();\n                            insertAxis(newColumns, current, state);\n                            break;\n                        }\n                        case 'rowAxes': {\n                            newRows = newRows || state.rowAxes.slice();\n                            insertAxis(newRows, current, state);\n                            break;\n                        }\n                        case 'measureAxes': {\n                            newMeasures = newMeasures || state.measureAxes.slice();\n                            insertAxis(newMeasures, current, state);\n                            break;\n                        }\n                        default:\n                            break;\n                    }\n                }\n                newDragitem = null;\n                newDropZone = null;\n                newDropTarget = null;\n                break;\n            case exports.H.setSort:\n                newSort = action.payload;\n                break;\n            case exports.H.setFilter:\n                if (Array.isArray(action.payload)) {\n                    newFilter = action.payload;\n                }\n                else {\n                    newFilter = [action.payload];\n                }\n                break;\n            case exports.H.addFilter:\n                newFilter = (state.filter || []).slice();\n                if (Array.isArray(action.payload)) {\n                    newFilter.push.apply(newFilter, action.payload);\n                }\n                else {\n                    newFilter.push(action.payload);\n                }\n                break;\n            case exports.H.changeFilter:\n                newFilter = (Array.isArray(action.payload)\n                    ? (state.filter || []).map(function (f) { return action.payload.some(function (a) { return a.field === f.field; })\n                        ? action.payload.find(function (a) { return a.field === f.field; })\n                        : f; })\n                    : (state.filter || []).map(function (f) { return f.field === action.payload.field\n                        ? action.payload\n                        : f; }));\n                break;\n            case exports.H.removeFilter:\n                newFilter = (state.filter || []).slice();\n                if (Array.isArray(action.payload)) {\n                    newFilter = newFilter.filter(function (f) { return !action.payload.some(function (p) { return p.field === f.field &&\n                        p.operator === f.operator; }); });\n                }\n                else {\n                    newFilter = newFilter.filter(function (f) { return !(f.field === action.payload.field\n                        && f.operator === action.payload.operator); });\n                }\n                break;\n            default:\n                break;\n        }\n        return {\n            dragItem: newDragitem,\n            dropTarget: newDropTarget,\n            dropDirection: newDropDirection,\n            dropZone: newDropZone,\n            columnAxes: newColumns,\n            rowAxes: newRows,\n            measureAxes: newMeasures,\n            filter: newFilter,\n            sort: newSort\n        };\n    };\n\n    // tslint:disable:object-literal-sort-keys\n    /**\n     * Represents the aggregate object which calculates the total value. Applicable for local data binding.\n     */\n    var sumAggregate = {\n        init: function (data) {\n            if (('sum' in data) === false) {\n                data.sum = 0;\n            }\n        },\n        merge: function (src, dest) {\n            dest.sum += src.sum;\n        },\n        accumulate: function (acc, value) {\n            acc.sum += value;\n        },\n        result: function (data) { return data.sum; },\n        format: function (value) { return value.toFixed(2); }\n    };\n    /**\n     * Represents the aggregate object which calculates the count value. Applicable for local data binding.\n     */\n    var countAggregate = {\n        init: function (data) {\n            if (('countA' in data) === false) {\n                data.countA = 0;\n            }\n        },\n        merge: function (src, dest) {\n            dest.countA += src.countA;\n        },\n        accumulate: function (acc, _value) {\n            acc.countA += 1;\n        },\n        result: function (data) { return data.countA; },\n        format: function (value) { return value.toFixed(); }\n    };\n    /**\n     * Represents the aggregate object which calculates the minimum value. Applicable for local data binding.\n     */\n    var minAggregate = {\n        init: function (data) {\n            if (('min' in data) === false) {\n                data.min = Number.POSITIVE_INFINITY;\n            }\n        },\n        merge: function (src, dest) {\n            dest.min = Math.min(src.min, dest.min);\n        },\n        accumulate: function (acc, value) {\n            acc.min = Math.min(value, acc.min);\n        },\n        result: function (data) { return Number.isFinite(data.min) ? data.min : NaN; },\n        format: function (value) { return value.toFixed(2); }\n    };\n    /**\n     * Represents the aggregate object which calculates the maximum value. Applicable for local data binding.\n     */\n    var maxAggregate = {\n        init: function (data) {\n            if (('max' in data) === false) {\n                data.max = Number.NEGATIVE_INFINITY;\n            }\n        },\n        merge: function (src, dest) {\n            dest.max = Math.max(src.max, dest.max);\n        },\n        accumulate: function (acc, value) {\n            acc.max = Math.max(value, acc.max);\n        },\n        result: function (data) { return Number.isFinite(data.max) ? data.max : NaN; },\n        format: function (value) { return value.toFixed(2); }\n    };\n    /**\n     * Represents the aggregate object which calculates the average value. Applicable for local data binding.\n     */\n    var averageAggregate = {\n        init: function (data) {\n            if (('count' in data) === false) {\n                data.sumA = 0;\n                data.count = 0;\n            }\n        },\n        merge: function (src, dest) {\n            dest.sumA += src.sumA;\n            dest.count += src.count;\n        },\n        accumulate: function (acc, value) {\n            acc.sumA += value;\n            acc.count += 1;\n        },\n        result: function (data) { return data.sumA / data.count; },\n        format: function (value) { return value.toFixed(2); }\n    };\n\n    function forEachDesc(desc, callbackfn) {\n        if ('filters' in desc) {\n            desc.filters.map(function (child) { return forEachDesc(child, callbackfn); });\n        }\n        else {\n            callbackfn(desc);\n        }\n    }\n    var filterFields = function (filter, callback) {\n        var descriptors = Array.isArray(filter) ? filter : filter.filters;\n        descriptors.forEach(function (desc) { return forEachDesc(desc, callback); });\n    };\n    /** @hidden */\n    var initializeFiltering = function (rows, columns, filter) {\n        var compositeFilter = filter ?\n            (Array.isArray(filter) ? { logic: 'and', filters: filter } : filter) : undefined;\n        var predicate = compositeFilter ? kendo_dataQuery_cmn_chunk_js.c(compositeFilter) : function () { return true; };\n        var axes = rows.concat(columns);\n        var fieldValues = [];\n        filterFields(filter || [], function (desc) {\n            if ('field' in desc && desc.field) {\n                fieldValues.push(desc.field);\n            }\n        });\n        var result = { hasFilter: false, predicate: predicate, filteringAxes: [] };\n        if (fieldValues.some(function (f) { return typeof f === 'function'; })) {\n            result.filteringAxes = axes.slice();\n        }\n        else if (fieldValues.length > 0) {\n            var filteringFields_1 = Array.from(new Set(fieldValues).values());\n            var filteringAxes = axes.filter(function (a) { return filteringFields_1.indexOf(a.key) >= 0; });\n            result.filteringAxes = filteringAxes;\n        }\n        result.hasFilter = result.filteringAxes.length > 0;\n        return result;\n    };\n\n    /** @hidden */\n    var subNode = function (node, field, initialNode) {\n        var childNode = node.get(field);\n        if (!childNode) {\n            childNode = initialNode || new Map();\n            node.set(field, childNode);\n        }\n        return childNode;\n    };\n    var separator = '&';\n    /** @hidden */\n    var createKey = function (key, value) { return key + separator + value; };\n    /** @hidden */\n    var splitKeyValue = function (keyValue) {\n        var separatorIndex = keyValue.indexOf(separator);\n        if (separatorIndex !== -1) {\n            var key = keyValue.substring(0, separatorIndex);\n            var value = keyValue.substring(separatorIndex + 1);\n            return [key, value];\n        }\n        else {\n            return [keyValue, undefined];\n        }\n    };\n\n    var calculateColumnData = function (node, measures, dataField) {\n        node.forEach(function (childNode, k) {\n            if (k !== dataField) {\n                if (childNode.size > 0) {\n                    calculateColumnData(childNode, measures, dataField);\n                }\n                var childData_1 = childNode.get(dataField);\n                var parentData_1 = subNode(node, dataField, {});\n                measures.forEach(function (m) {\n                    m.aggregate.init(parentData_1);\n                    m.aggregate.merge(childData_1, parentData_1);\n                });\n            }\n        });\n    };\n    /** @hidden */\n    var mergeTrees = function (src, dest, measures, dataField) {\n        src.forEach(function (srcChild, k) {\n            var destChild;\n            if (k !== dataField) {\n                destChild = subNode(dest, k);\n                mergeTrees(srcChild, destChild, measures, dataField);\n            }\n            else {\n                destChild = subNode(dest, k, {});\n                measures.forEach(function (m) {\n                    m.aggregate.init(destChild);\n                    m.aggregate.merge(srcChild, destChild);\n                });\n            }\n        });\n    };\n    var calculateColumns = function (node, measures, columnsData, dataField) {\n        node.forEach(function (childNode, k) {\n            if (k !== columnsData) {\n                if (childNode.size > 0) {\n                    calculateColumns(childNode, measures, columnsData, dataField);\n                }\n                var srcColumns = subNode(childNode, columnsData);\n                var destColumns = subNode(node, columnsData);\n                mergeTrees(srcColumns, destColumns, measures, dataField);\n            }\n        });\n    };\n    /** @hidden */\n    var createDataTree = function (data, rows, columns, measures, fields, filter) {\n        var result = new Map();\n        var cache = new Map();\n        var axes = rows.concat(columns);\n        var leafNodes = new Set();\n        var dataField = fields.dataField, columnsData = fields.columnsData;\n        var _a = initializeFiltering(rows, columns, filter), hasFilter = _a.hasFilter, predicate = _a.predicate, filteringAxes = _a.filteringAxes;\n        var empty = '';\n        data.forEach(function (dataItem) {\n            if (hasFilter) {\n                var filteringDataItem_1 = {};\n                filteringAxes.forEach(function (axis) { filteringDataItem_1[axis.key] = axis.displayValue(dataItem); });\n                if (!predicate(filteringDataItem_1)) {\n                    return;\n                }\n            }\n            var values = axes.map(function (a) { return a.displayValue(dataItem); });\n            var dataKey = empty.concat.apply(empty, values);\n            var nodeData = cache.get(dataKey);\n            if (!nodeData) {\n                var node_1 = result;\n                var eachAxis = function (axis) {\n                    node_1 = subNode(node_1, createKey(axis.key, axis.displayValue(dataItem)));\n                };\n                rows.forEach(eachAxis);\n                node_1 = subNode(node_1, columnsData);\n                leafNodes.add(node_1);\n                columns.forEach(eachAxis);\n                nodeData = {};\n                node_1.set(dataField, nodeData);\n                cache.set(dataKey, nodeData);\n                measures.forEach(function (m) {\n                    m.aggregate.init(nodeData);\n                });\n            }\n            measures.forEach(function (m) {\n                m.aggregate.accumulate(nodeData, m.value(dataItem));\n            });\n        });\n        leafNodes.forEach(function (leaf) { return calculateColumnData(leaf, measures, dataField); });\n        calculateColumns(result, measures, columnsData, dataField);\n        return result;\n    };\n    /** @hidden */\n    var cloneDataTree = function (dataTree, dataField, measures) {\n        var result = new Map();\n        mergeTrees(dataTree, result, measures, dataField);\n        return result;\n    };\n\n    var createPath = function (name, axes, path) {\n        var _a = splitKeyValue(name), key = _a[0], value = _a[1];\n        var result = path.slice();\n        if (key && value) {\n            var axis = axes.find(function (a) { return a.key === key; });\n            var caption_1 = axis ? axis.caption : '';\n            return result.map(function (p) { return p === caption_1 ? name : p; });\n        }\n        return result;\n    };\n    var membersNode = function (tree, members, field, axisSettings, measures, dataField, cache) {\n        var cacheData = cache || new Map();\n        var path = axisSettings.map(function (a) { return a.caption; });\n        while (members.length > 1 && axisSettings.some(function (a) { return a.caption === members[members.length - 1].caption; })) {\n            members.pop();\n            path.pop();\n        }\n        var node = tree;\n        members.forEach(function (m, i) {\n            path = createPath(m.name, axisSettings, path);\n            if (node && !axisSettings.some(function (a) { return a.caption === m.name; })) {\n                if (!node.has(m.name) && !cacheData.has(path.slice(0, path.indexOf(m.name) + 1).join('-'))) {\n                    var currentLevel = Array.from(node).find(function (n) { return n[0] !== field; });\n                    var currentLevelNode = currentLevel && currentLevel[0];\n                    var levelField_1 = currentLevelNode && splitKeyValue(currentLevelNode)[0];\n                    var depth = levelField_1 ? i - axisSettings.findIndex(function (a) { return a.key === levelField_1; }) : 0;\n                    var _loop_1 = function (t) {\n                        var data = [];\n                        node.forEach(function (value, key) {\n                            if (key !== field) {\n                                data.push.apply(data, Array.from(value).filter(function (d) { return d[0] !== field; }));\n                            }\n                        });\n                        var next = new Map();\n                        data.forEach(function (item) {\n                            if (next.has(item[0])) {\n                                var dest = next.get(item[0]);\n                                var src = item[1];\n                                var newDest = new Map();\n                                mergeTrees(dest, newDest, measures, dataField);\n                                mergeTrees(src, newDest, measures, dataField);\n                                next.set(item[0], newDest);\n                            }\n                            else {\n                                next.set(item[0], new Map(item[1]));\n                            }\n                        });\n                        var currentPath = path.slice(0, path.indexOf(m.name));\n                        next.forEach(function (value, key) {\n                            cacheData.set(createPath(key, axisSettings, currentPath.concat([key])).join('-'), value);\n                        });\n                        next.set(field, node.get(field));\n                        node = next;\n                    };\n                    for (var t = 0; t < depth; t++) {\n                        _loop_1(t);\n                    }\n                }\n                node = node.get(m.name) || cacheData.get(path.slice(0, path.indexOf(m.name) + 1).join('-'));\n            }\n        });\n        return node;\n    };\n    /** @hidden */\n    var readData = function (dataTree, rowTuples, columnTuples, fields, columnSettings, rowSettings, measures) {\n        var data = [];\n        var dataField = fields.dataField, columnsData = fields.columnsData;\n        var rowsCache = new Map();\n        rowTuples.forEach(function (row) {\n            var rowNode = membersNode(dataTree, row.members.slice(), columnsData, rowSettings, measures, dataField, rowsCache);\n            var rowColumnsNode = rowNode && rowNode.get(columnsData);\n            columnTuples.forEach(function (col) {\n                var members = col.members.slice();\n                var measure = measures[0];\n                if (members[members.length - 1].levelName === \"[Measures].[MeasuresLevel]\") {\n                    var measuresMember_1 = members.pop();\n                    measure = measures.find(function (m) { return String(m.name) === measuresMember_1.caption; }) || measure;\n                }\n                var colNode = rowColumnsNode && membersNode(rowColumnsNode, members, dataField, columnSettings, measures, dataField);\n                var value = '', fmtValue = '', ordinal = 0;\n                if (colNode && measure) {\n                    var result = measure.aggregate.result(colNode.get(dataField));\n                    value = String(result);\n                    fmtValue = measure.aggregate.format(result);\n                }\n                data.push({\n                    columnTuple: col,\n                    data: { fmtValue: fmtValue, ordinal: ordinal, value: value },\n                    rowTuple: row\n                });\n            });\n        });\n        return data;\n    };\n\n    var getTopMembersTuple = function (parentFields, axesSettings) {\n        var allTuple = { members: [] };\n        parentFields.forEach(function (topField) {\n            var axis = axesSettings.find(function (a) { return a.key === topField; });\n            var caption = axis ? axis.caption : \"\";\n            var member = {\n                caption: caption,\n                children: [],\n                hasChildren: true,\n                parentName: \"\",\n                levelNum: 0,\n                levelName: caption,\n                hierarchy: topField,\n                name: caption\n            };\n            allTuple.members.push(member);\n        });\n        return allTuple;\n    };\n    var sortFunc = function (descriptor, axe) {\n        return function (a, b) {\n            var order = descriptor.dir;\n            var sortableA = axe.sortValue(splitKeyValue(a[0])[1]);\n            var sortableB = axe.sortValue(splitKeyValue(b[0])[1]);\n            if (sortableA < sortableB) {\n                return order === \"asc\" ? -1 : 1;\n            }\n            if (sortableA > sortableB) {\n                return order === \"asc\" ? 1 : -1;\n            }\n            return 0;\n        };\n    };\n    var mergeData = function (src, dest, exclude) {\n        src.forEach(function (srcChild, k) {\n            if (!exclude[k]) {\n                var destChild = subNode(dest, k);\n                mergeData(srcChild, destChild, exclude);\n            }\n        });\n    };\n    var childrenByKeys = function (dataTree, keys, exclude) {\n        var result = [];\n        var nodeData = function (node) { return Array.from(node).filter(function (n) { return !exclude[n[0]]; }); };\n        var element = new Map(dataTree);\n        var next;\n        var _loop_1 = function (i) {\n            next = element.get(keys[i]);\n            if (next) {\n                element = new Map(next);\n            }\n            else if (i < keys.length - 1 && Array.from(element).some(function (e) { return splitKeyValue(e[0])[0] === keys[i]; })) {\n                var curLevel_1 = [];\n                element.forEach(function (child, key) {\n                    if (!exclude[key]) {\n                        curLevel_1.push.apply(curLevel_1, nodeData(new Map(child)));\n                    }\n                });\n                element = new Map();\n                curLevel_1.forEach(function (item) {\n                    if (element.has(item[0])) {\n                        var dest = element.get(item[0]);\n                        var src = item[1];\n                        var newDest = new Map();\n                        mergeData(dest, newDest, exclude);\n                        mergeData(src, newDest, exclude);\n                        element.set(item[0], newDest);\n                    }\n                    else {\n                        element.set(item[0], new Map(item[1]));\n                    }\n                });\n            }\n            else if (i === 0 || i === keys.length - 1) {\n                if (Array.from(element).some(function (e) { return splitKeyValue(e[0])[0] === keys[i]; })) {\n                    result.push.apply(result, nodeData(element));\n                }\n            }\n        };\n        for (var i = 0; i < keys.length; i++) {\n            _loop_1(i);\n        }\n        return result;\n    };\n    /** @hidden */\n    var rootFields = function (definitions) {\n        var fields = new Set();\n        definitions.forEach(function (item) {\n            if (item.name.length === 1 && !splitKeyValue(item.name[0])[1]) {\n                fields.add(item.name[0]);\n            }\n        });\n        return fields;\n    };\n    /** @hidden */\n    var createTuples = function (axesSettings, definitions, dataTree, sortDescriptors, excludeFields) {\n        var parentFields = rootFields(definitions);\n        var flatMembers = [];\n        var topTuple = getTopMembersTuple(parentFields, axesSettings);\n        flatMembers.push(topTuple);\n        var _loop_2 = function (i) {\n            var currDef = definitions[i];\n            if (currDef.name.length === 1 && !currDef.expand && parentFields.has(currDef.name[0])) {\n                return \"continue\";\n            }\n            var keysToAdd = new Set(parentFields.keys());\n            var currDefMembers = [];\n            var keys = [];\n            var tuples = [];\n            var axe;\n            currDef.name.forEach(function (element, index) {\n                var _a;\n                var _b = splitKeyValue(element), field = _b[0], value = _b[1];\n                axe = axesSettings.find(function (a) { return a.key === field; });\n                if (value) {\n                    keysToAdd.delete(field);\n                    keys.push(element);\n                    var member = {\n                        children: [],\n                        caption: value,\n                        hierarchy: field,\n                        levelNum: 1,\n                        levelName: field + \" \" + field,\n                        name: element,\n                        parentName: axe ? axe.caption : \"\"\n                    };\n                    currDefMembers.push(member);\n                }\n                else if (currDef.expand && currDef.name.length - 1 === index) {\n                    keysToAdd.delete(element);\n                    keys.push(element);\n                    var children = childrenByKeys(dataTree, keys, excludeFields);\n                    var descriptor = sortDescriptors.find(function (desc) { return desc.field === field; });\n                    if (descriptor && descriptor.dir) {\n                        children.sort(sortFunc(descriptor, axe));\n                    }\n                    for (var c = 0; c < children.length; c++) {\n                        var leafValue = children[c][0];\n                        var leafTuple = { members: [] };\n                        tuples.push(leafTuple);\n                        var caption = splitKeyValue(leafValue)[1];\n                        axe = axesSettings.find(function (a) { return a.key === element; });\n                        var member = {\n                            caption: caption,\n                            children: [],\n                            levelName: element + \" \" + element,\n                            levelNum: 1,\n                            parentName: axe ? axe.caption : \"\",\n                            hierarchy: element,\n                            name: leafValue\n                        };\n                        (_a = leafTuple.members).push.apply(_a, currDefMembers);\n                        leafTuple.members.push(member);\n                    }\n                }\n                else if (currDef.expand) {\n                    axe = axesSettings.find(function (a) { return a.key === element; });\n                    var axisCaption = axe ? axe.caption : \"\";\n                    keysToAdd.delete(element);\n                    keys.push(element);\n                    var member = {\n                        children: [],\n                        caption: axisCaption,\n                        hierarchy: element,\n                        levelName: axisCaption,\n                        levelNum: 0,\n                        name: axisCaption,\n                        parentName: \"\"\n                    };\n                    currDefMembers.push(member);\n                }\n                keysToAdd.forEach(function (key) {\n                    tuples.forEach(function (tuple) {\n                        axe = axesSettings.find(function (a) { return a.key === key; });\n                        var curCaption = axe ? axe.caption : \"\";\n                        var member = {\n                            children: [],\n                            hasChildren: true,\n                            caption: curCaption,\n                            hierarchy: key,\n                            levelName: curCaption,\n                            levelNum: 0,\n                            name: curCaption,\n                            parentName: \"\"\n                        };\n                        tuple.members.push(member);\n                    });\n                });\n                flatMembers.push.apply(flatMembers, tuples);\n            });\n        };\n        for (var i = 0; i < definitions.length; i++) {\n            _loop_2(i);\n        }\n        return flatMembers;\n    };\n    var measureToMember = function (measure) {\n        return {\n            caption: String(measure.name),\n            children: [],\n            hasChildren: false,\n            hierarchy: \"[Measures]\",\n            levelName: \"[Measures].[MeasuresLevel]\",\n            levelNum: 0,\n            name: \"[Measures].[\" + measure.name + \"]\",\n            parentName: \"\"\n        };\n    };\n    var addMeasure = function (tuple, measure) {\n        var measureMember = measureToMember(measure);\n        var tupleCopy = copy(tuple);\n        tupleCopy.members.push(measureMember);\n        return tupleCopy;\n    };\n    /** @hidden */\n    var addMultipleMeasures = function (tuples, measures) {\n        if (measures.length < 2) {\n            return tuples;\n        }\n        var result = tuples.slice();\n        for (var i = result.length - 1; i >= 0; i--) {\n            var tuple = result[i];\n            result[i] = addMeasure(result[i], measures[0]);\n            for (var m = 1; m < measures.length; m++) {\n                var tupleWithMeasure = addMeasure(tuple, measures[m]);\n                result.splice(i + m, 0, tupleWithMeasure);\n            }\n        }\n        return reverseColumnsByMeasures(result);\n    };\n    /** @hidden */\n    var createLocalDataState = function (args) {\n        var _a;\n        var dataTree = args.dataTree, rowSettings = args.rowSettings, columnSettings = args.columnSettings, rowAxes = args.rowAxes, columnAxes = args.columnAxes, measures = args.measures, sort = args.sort, fields = args.fields;\n        var exclude = (_a = {}, _a[fields.columnsData] = fields.columnsData, _a[fields.dataField] = fields.dataField, _a);\n        var colTuples = columnAxes.length ?\n            createTuples(columnSettings, columnAxes, dataTree.get(fields.columnsData), sort, exclude) :\n            measures.map(function (m) { return ({ members: [measureToMember(m)] }); });\n        var columnTuples = columnAxes.length > 0 ? addMultipleMeasures(colTuples, measures) : colTuples;\n        var rowTuples = rowAxes.length ? createTuples(rowSettings, rowAxes, dataTree, sort, exclude) : [{ members: [] }];\n        var resultData = readData(dataTree, rowTuples, columnTuples, fields, columnSettings, rowSettings, measures);\n        return {\n            columns: columnTuples,\n            data: resultData,\n            rows: rowTuples\n        };\n    };\n\n    /** @hidden */\n    var createFlatSchemaDimensions = function (dimensions, measures) {\n        var result = Object.keys(dimensions).map(function (dim) { return ({\n            caption: dim,\n            defaultHierarchy: dim,\n            description: '',\n            name: dim,\n            uniqueName: dim,\n            hierarchyUniqueName: dim,\n            measure: true,\n            type: 1 // https://github.com/telerik/kendo-pivotgrid-common/blob/develop/src/models/responseDiscover.ts#L12-L14\n        }); });\n        if (measures.length) {\n            result.push({\n                caption: 'Measures',\n                children: measures.map(function (m) { return ({\n                    aggregator: '1',\n                    caption: String(m.name),\n                    defaultFormat: '',\n                    description: '',\n                    displayFolder: '',\n                    groupName: String(m.name),\n                    name: String(m.name),\n                    uniqueName: String(m.name)\n                }); }),\n                type: 2,\n                description: '',\n                name: 'Measures',\n                uniqueName: '[Measures]'\n            });\n        }\n        return result;\n    };\n\n    var Navigation = /** @class */ (function () {\n        function Navigation(options) {\n            this.tabIndex = 0;\n            this.root = null;\n            this.eventHandlers = {};\n            this.update = function () { };\n            this.tabIndex = options.tabIndex;\n        }\n        Object.defineProperty(Navigation.prototype, \"elements\", {\n            get: function () {\n                return this.root ? Array.from(this.root.querySelectorAll(this.selectors.join(','))) : [];\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Navigation.prototype, \"first\", {\n            get: function () {\n                return (this.root && this.root.querySelector(this.selectors.join(','))) || null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Navigation.prototype, \"last\", {\n            get: function () {\n                var all = this.elements;\n                return all[all.length - 1] || null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Navigation.prototype, \"current\", {\n            get: function () {\n                return this.elements.find(function (el) { return el.matches(':focus'); });\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Navigation.prototype.start = function (root) {\n            var _this = this;\n            this.root = root;\n            var _loop_1 = function (eventType) {\n                if (this_1.mouseEvents[eventType]) {\n                    this_1.eventHandlers[eventType] = (function (ev) {\n                        var target = ev.target instanceof Element && ev.target.closest(_this.selectors.join(','));\n                        if (target) {\n                            _this.mouseEvents[eventType].call(undefined, target, _this, ev);\n                        }\n                    });\n                    root.addEventListener(eventType, this_1.eventHandlers[eventType]);\n                }\n            };\n            var this_1 = this;\n            for (var eventType in this.mouseEvents) {\n                _loop_1(eventType);\n            }\n            var _loop_2 = function (eventType) {\n                if (this_2.keyboardEvents[eventType]) {\n                    this_2.eventHandlers[eventType] = (function (ev) {\n                        var target = ev.target instanceof Element && ev.target.closest(_this.selectors.join(','));\n                        var key = ev.key === ' ' ? 'Space' : ev.key;\n                        if (target && _this.keyboardEvents[eventType][key]) {\n                            _this.keyboardEvents[eventType][key].call(undefined, target, _this, ev);\n                        }\n                    });\n                    root.addEventListener(eventType, this_2.eventHandlers[eventType]);\n                }\n            };\n            var this_2 = this;\n            for (var eventType in this.keyboardEvents) {\n                _loop_2(eventType);\n            }\n        };\n        Navigation.prototype.stop = function () {\n            if (this.root) {\n                for (var eventType in this.eventHandlers) {\n                    if (this.eventHandlers[eventType]) {\n                        this.root.removeEventListener(eventType, this.eventHandlers[eventType]);\n                    }\n                }\n            }\n            this.root = null;\n        };\n        Navigation.prototype.focusElement = function (element, previous) {\n            if (element) {\n                if (previous) {\n                    previous.removeAttribute('tabindex');\n                    previous.classList.remove('k-focus');\n                }\n                element.setAttribute('tabindex', String(this.tabIndex));\n                element.focus({ preventScroll: true });\n            }\n        };\n        return Navigation;\n    }());\n\n    var scrollableValuesSel = '.k-pivotgrid .k-pivotgrid-values';\n    var scrollableColumnHeaderSel = '.k-pivotgrid .k-pivotgrid-column-headers';\n    var scrollableRowHeaderSel = '.k-pivotgrid .k-pivotgrid-row-headers';\n    var emptyCellSel = '.k-pivotgrid > .k-pivotgrid-empty-cell';\n    var tableSel = 'table.k-pivotgrid-table';\n    var cellSel = '.k-pivotgrid-cell';\n    var scrollables = [scrollableValuesSel, scrollableColumnHeaderSel, scrollableRowHeaderSel].join(',');\n    var selectors$1 = [\n        emptyCellSel,\n        [scrollableColumnHeaderSel, tableSel, cellSel].join(' '),\n        [scrollableRowHeaderSel, tableSel, cellSel].join(' '),\n        [scrollableValuesSel, tableSel, cellSel].join(' ')\n    ];\n    var onEnter = function (target, nav, ev) {\n        var icon = target.querySelector('.k-icon, .k-svg-icon');\n        if (icon) {\n            var index_1 = nav.elements.indexOf(target);\n            nav.update = function () {\n                nav.focusElement(nav.elements[index_1], null);\n                nav.update = function () { };\n            };\n            icon.click();\n            ev.preventDefault();\n        }\n    };\n    var tryScrollLeft = function (target, scrollable, elToScroll) {\n        if (target.offsetLeft < scrollable.scrollLeft) {\n            elToScroll.scrollLeft = target.offsetLeft;\n        }\n    };\n    var tryScrollRight = function (target, scrollable, elToScroll) {\n        if (target.offsetLeft + target.offsetWidth > scrollable.scrollLeft + scrollable.offsetWidth &&\n            target.offsetWidth < scrollable.offsetWidth) {\n            elToScroll.scrollLeft = target.offsetLeft + target.offsetWidth - scrollable.offsetWidth;\n        }\n    };\n    var tryScrollUp = function (target, scrollable, elToScroll) {\n        if (scrollable.scrollTop && target.offsetTop < scrollable.scrollTop) {\n            elToScroll.scrollTop = target.offsetTop;\n        }\n    };\n    var tryScrollDown = function (target, scrollable, elToScroll) {\n        if (target.offsetTop + target.offsetHeight > scrollable.scrollTop + scrollable.offsetHeight &&\n            target.offsetHeight < scrollable.offsetHeight) {\n            elToScroll.scrollTop = target.offsetTop + target.offsetHeight - scrollable.offsetHeight;\n        }\n    };\n    var scrollTo = function (target, root, scrollFunc) {\n        var elToScroll = root.querySelector(scrollableValuesSel);\n        var scrollable = target && target.closest(scrollables);\n        if (!elToScroll || !scrollable || !target) {\n            return;\n        }\n        scrollFunc.forEach(function (scroll) { return scroll(target, scrollable, elToScroll); });\n    };\n    var tableMap = function (table) {\n        var rows = Array.from(table.rows);\n        var colsCount = Array.from((rows && rows[0] && rows[0].cells) || [])\n            .map(function (c) { return c.colSpan; })\n            .reduce(function (prev, cur) { return prev + cur; }, 0);\n        var map = rows.map(function () { return new Array(colsCount); });\n        rows.forEach(function (row, r) {\n            var curColSpan = 0;\n            Array.from(row.cells).forEach(function (c) {\n                for (var colSp = 0; colSp < c.colSpan; colSp++) {\n                    for (var rowSp = 0; rowSp < c.rowSpan; rowSp++) {\n                        var ind = map[r + rowSp].findIndex(function (val, curInd) { return curInd >= curColSpan && !val; });\n                        map[r + rowSp][ind] = c;\n                    }\n                    curColSpan++;\n                }\n            });\n        });\n        return map;\n    };\n    var navigationMap = function (root) {\n        var columnHeader = tableMap(root.querySelector([scrollableColumnHeaderSel, tableSel].join(' ')));\n        var rowHeader = tableMap(root.querySelector([scrollableRowHeaderSel, tableSel].join(' ')));\n        var values = tableMap(root.querySelector([scrollableValuesSel, tableSel].join(' ')));\n        var emptyCell = root.querySelector(emptyCellSel);\n        var emptyCellRow = new Array(rowHeader[0].length).fill(emptyCell);\n        var map = [];\n        for (var i = 0; i < columnHeader.length; i++) {\n            map.push(emptyCellRow.concat(columnHeader[i]));\n        }\n        for (var i = 0; i < rowHeader.length; i++) {\n            map.push(rowHeader[i].concat(values[i]));\n        }\n        return map;\n    };\n    var getTargetPos = function (map, target) {\n        for (var r = 0; r < map.length; r++) {\n            for (var c = 0; c < map[r].length; c++) {\n                if (map[r][c] === target) {\n                    return [r, c];\n                }\n            }\n        }\n        return [-1, -1];\n    };\n    var ctrlKey = function (ev) { return ev.ctrlKey || ev.metaKey; };\n    var cellAt = function (root, target, pos) {\n        var map = navigationMap(root);\n        var targetPos = getTargetPos(map, target);\n        var nextPos = [targetPos[0] + pos[0], targetPos[1] + pos[1]];\n        var next = map[nextPos[0]] && map[nextPos[0]][nextPos[1]];\n        while (next && next === target) {\n            nextPos = [nextPos[0] + pos[0], nextPos[1] + pos[1]];\n            next = map[nextPos[0]] && map[nextPos[0]][nextPos[1]];\n        }\n        return next;\n    };\n    var keyboardEvents$1 = {\n        keydown: {\n            ArrowLeft: function (target, nav, ev) {\n                ev.preventDefault();\n                var next = cellAt(nav.root, target, [0, -1]);\n                nav.focusElement(next, target);\n                scrollTo(next, nav.root, [tryScrollRight, tryScrollLeft, tryScrollDown, tryScrollUp]);\n            },\n            ArrowRight: function (target, nav, ev) {\n                ev.preventDefault();\n                var next = cellAt(nav.root, target, [0, 1]);\n                nav.focusElement(next, target);\n                scrollTo(next, nav.root, [tryScrollLeft, tryScrollRight, tryScrollDown, tryScrollUp]);\n            },\n            ArrowUp: function (target, nav, ev) {\n                ev.preventDefault();\n                var next = cellAt(nav.root, target, [-1, 0]);\n                nav.focusElement(next, target);\n                scrollTo(next, nav.root, [tryScrollRight, tryScrollLeft, tryScrollDown, tryScrollUp]);\n            },\n            ArrowDown: function (target, nav, ev) {\n                ev.preventDefault();\n                var next = cellAt(nav.root, target, [1, 0]);\n                nav.focusElement(next, target);\n                scrollTo(next, nav.root, [tryScrollRight, tryScrollLeft, tryScrollUp, tryScrollDown]);\n            },\n            o: function (_target, nav, _ev) {\n                if (!nav.root) {\n                    return;\n                }\n                var next = nav.root.nextElementSibling;\n                if (next && next instanceof HTMLElement && next.matches('div.k-pivotgrid-configurator-button')) {\n                    next.click();\n                    setTimeout(function () {\n                        if (nav.root.parentNode) {\n                            var confHeader = nav.root.parentNode.querySelector('.k-pivotgrid-configurator-content .k-form-field .k-fields-list-wrapper .k-treeview');\n                            if (confHeader instanceof HTMLElement) {\n                                confHeader.setAttribute('tabindex', String(nav.tabIndex));\n                                confHeader.focus();\n                            }\n                        }\n                    }, 0);\n                }\n            },\n            Enter: onEnter,\n            Space: onEnter,\n            Home: function (target, nav, ev) {\n                var map = navigationMap(nav.root);\n                var ctrl = ctrlKey(ev);\n                var row = ctrl ? map[0] : (map.find(function (ro) { return Boolean(ro.find(function (x) { return x === target; })); }) || []);\n                var next = row[0];\n                if (next) {\n                    nav.focusElement(next, target);\n                    scrollTo(next, nav.root, [tryScrollRight, tryScrollLeft, tryScrollDown, tryScrollUp]);\n                    ev.preventDefault();\n                }\n            },\n            End: function (target, nav, ev) {\n                var map = navigationMap(nav.root);\n                var ctrl = ctrlKey(ev);\n                var row = ctrl ? map[map.length - 1] : (map.find(function (ro) { return Boolean(ro.find(function (x) { return x === target; })); }) || []);\n                var next = row && row[row.length - 1] || null;\n                if (next) {\n                    nav.focusElement(next, target);\n                    scrollTo(next, nav.root, [tryScrollLeft, tryScrollRight, tryScrollUp, tryScrollDown]);\n                    ev.preventDefault();\n                }\n            }\n        }\n    };\n    var mouseEvents$1 = {\n        click: function (target, nav) {\n            if (target && target instanceof HTMLElement) {\n                var prev = nav.elements.find(function (c) { return c.hasAttribute('tabindex'); }) || null;\n                nav.focusElement(target, prev);\n            }\n        }\n    };\n    /**\n     * The PivotGrid keyboard navigation functionality.\n     *\n     * Usage:\n     *\n     * On Initialize\n     * const navigation = new PivotGridNavigation({ tabindex: 0 });\n     *\n     * Turn on\n     * navigation.start(rootDomElement);\n     *\n     * On After Update\n     * navigation.update();\n     *\n     * On Destroy / Turn off\n     * navigation.stop();\n     */\n    var PivotGridNavigation = /** @class */ (function (_super) {\n        __extends(PivotGridNavigation, _super);\n        function PivotGridNavigation() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.selectors = selectors$1;\n            _this.mouseEvents = mouseEvents$1;\n            _this.keyboardEvents = keyboardEvents$1;\n            return _this;\n        }\n        return PivotGridNavigation;\n    }(Navigation));\n\n    var selectors = [\n        '.k-pivotgrid-configurator-content .k-form-field .k-fields-list-wrapper .k-treeview',\n        '.k-pivotgrid-configurator-content .k-chip',\n        '.k-pivotgrid-configurator-actions button'\n    ];\n    var onEscape = function (_target, nav, ev) {\n        if (ev.target instanceof HTMLElement) {\n            if (nav.root) {\n                var pivot = nav.root.previousElementSibling;\n                var confButton = nav.root.nextElementSibling;\n                var pivotCell = Array.from(pivot instanceof HTMLElement ? pivot.querySelectorAll('[tabindex]') : []).find(function (c) { return c.tabIndex >= 0; });\n                if (pivotCell instanceof HTMLElement) {\n                    pivotCell.focus();\n                    if (confButton instanceof HTMLElement) {\n                        confButton.click();\n                    }\n                }\n            }\n        }\n    };\n    var navigate = function (target, nav, ev, dir) {\n        ev.preventDefault();\n        var all = nav.elements;\n        var index = all.indexOf(target) + dir;\n        if (index < 0) {\n            index = all.length - 1;\n        }\n        nav.focusElement(all[index % all.length], target);\n    };\n    var onDelete = function (target, nav, ev) {\n        if (ev.target instanceof HTMLElement) {\n            var deleteButton = ev.target.querySelector('.k-icon.k-i-x-circle, .k-svg-icon.k-svg-i-x-circle');\n            if (deleteButton instanceof HTMLElement) {\n                ev.preventDefault();\n                navigate(target, nav, ev, -1);\n            }\n        }\n    };\n    var keyboardEvents = {\n        keydown: {\n            Tab: function (target, nav, ev) {\n                navigate(target, nav, ev, ev.shiftKey ? -1 : 1);\n            },\n            Escape: onEscape,\n            Delete: onDelete,\n            Backspace: onDelete\n        }\n    };\n    var mouseEvents = {\n        click: function (target, nav) {\n            if (target && target instanceof HTMLElement) {\n                var prev = nav.elements.find(function (c) { return c.hasAttribute('tabindex'); }) || null;\n                nav.focusElement(target, prev);\n            }\n        }\n    };\n    /**\n     * The PivotGrid Configurator keyboard navigation functionality.\n     *\n     * Usage:\n     *\n     * On Initialize\n     * const navigation = new ConfiguratorNavigation({ tabindex: 0 });\n     *\n     * Turn on\n     * navigation.start(rootDomElement);\n     *\n     * On After Update\n     * navigation.update();\n     *\n     * On Destroy / Turn off\n     * navigation.stop();\n     */\n    var ConfiguratorNavigation = /** @class */ (function (_super) {\n        __extends(ConfiguratorNavigation, _super);\n        function ConfiguratorNavigation() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.selectors = selectors;\n            _this.mouseEvents = mouseEvents;\n            _this.keyboardEvents = keyboardEvents;\n            return _this;\n        }\n        return ConfiguratorNavigation;\n    }(Navigation));\n\n    exports.A = createAxisDescriptors;\n    exports.B = configuratorReducer;\n    exports.C = compareAxes;\n    exports.D = cloneDataTree;\n    exports.E = buildKPIMeasures;\n    exports.F = addMultipleMeasures;\n    exports.G = addKPI;\n    exports.I = ConfiguratorNavigation;\n    exports.P = PivotGridNavigation;\n    exports.__meta__ = __meta__;\n    exports.a = createLocalDataState;\n    exports.b = countAggregate;\n    exports.c = createDataTree;\n    exports.d = minAggregate;\n    exports.e = averageAggregate;\n    exports.f = fetchDiscover;\n    exports.g = fetchData;\n    exports.h = createDataState;\n    exports.i = headersReducer;\n    exports.j = toTree;\n    exports.k = toColumns;\n    exports.l = toRows;\n    exports.m = maxAggregate;\n    exports.n = setSort;\n    exports.o = setFilter;\n    exports.p = readData;\n    exports.q = parseResponse;\n    exports.r = rootFields;\n    exports.s = sumAggregate;\n    exports.t = toData;\n    exports.u = mergeTrees;\n    exports.v = discoverCommands;\n    exports.w = createTuples;\n    exports.x = createRequestBody;\n    exports.y = createFlatSchemaDimensions;\n    exports.z = createDiscoverBody;\n\n}));\n"]}