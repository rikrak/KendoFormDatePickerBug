{"version":3,"sources":["raw-js/kendo.scheduler.recurrence.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendo","_globals","SchedulerRecurrence","this","$","undefined$1","window","encode","htmlEncode","timezone","Class","ui","Widget","DropDownList","ButtonGroup","kendoDate","date","setTime","setDayOfWeek","adjustDST","firstDayOfMonth","getMilliseconds","DAYS_IN_LEAPYEAR","DAYS_IN_YEAR","MONTHS","WEEK_DAYS","WEEK_DAYS_IDX","SU","MO","TU","WE","TH","FR","SA","DATE_FORMATS","RULE_NAMES","RULE_NAMES_LENGTH","length","limitation","months","end","rule","monthRules","ruleValues","getMonth","changed","setMonth","setFullYear","getFullYear","monthDays","monthLength","month","days","hours","getHours","normalize","monthDay","getMonthLength","getDate","sort","numberSortPredicate","yearDays","year","yearDay","leapYear","dayInYear","weeks","day","weekStart","week","weekInYear","weekDays","weekDayRule","offsetDate","Date","getTime","offsets","start","normalizeDay","getDay","weekDayRules","ruleWeekOffset","weekDay","weekNumber","currentDay","normalizeDayIndex","result","idx","weekInMonth","normalizeOffset","push","ruleWeekValues","freq","positions","position","forEach","nextMonthFirstDay","ruleDay","offset","isInWeek","numberOfWeeks","setDate","hourRules","startTime","_startTime","startHours","setHours","minutes","setMinutes","getMinutes","minuteRules","seconds","setSeconds","getSeconds","secondRules","BaseFrequency","extend","next","options","_hour","limit","ruleName","firstRule","modified","interval","current","diff","startTimeHours","_startPeriod","frequency","excess","getTimezoneOffset","MS_PER_HOUR","MS_PER_MINUTE","intervalExcess","Math","floor","round","MS_PER_DAY","_date","_getNumberOfWeeksBetweenDates","_hasRuleValue","first","second","exactWeeks","HourlyFrequency","fn","DailyFrequency","WeeklyFrequency","setup","eventStartDate","MonthlyFrequency","YearlyFrequency","frequencies","hourly","daily","weekly","monthly","yearly","CLICK","CHANGE","firstWeekLength","ceil","lastDate","weeksInMonth","skipFirst","skipLast","rules","value","ruleValue","availableRules","parseArray","list","range","parseInt","isNaN","parseWeekDayList","valueLength","substring","toUpperCase","a","b","parseExceptions","exceptions","zone","dates","split","indexOf","parseUTCDate","isException","Array","isArray","dateTime","toExceptionString","concat","convert","toString","join","endPeriodByFreq","eventsByPosition","periodEvents","until","event","inPeriod","periodEventsLength","events","removeExceptionDates","exceptionDates","getZoneOffset","parseDate","apply","parseDateRule","dateRule","pair","property","tzid","valueIdx","pairs","parseRule","recur","splits","part","parts","instance","trim","exdates","toLowerCase","count","culture","calendar","firstDay","day1","day2","serializeDateRule","val","serialize","ruleString","valueString","serializeWeekDayList","recurrence","parse","expand","endTime","endDate","durationMS","startPeriod","ruleStart","ruleEnd","useEventStart","freqName","eventStartTime","eventStartMS","eventStart","currentIdx","shiftedStart","shiftedEnd","shiftedStartTime","shifterEndTime","recurrenceRule","startTimezone","endTimezone","clone","recurrenceException","set","startPeriodByFreq","_endPeriod","duration","dateOffset","dateMinusHour","dateMinusHourOffset","allDayCompensation","isAllDay","toInvariantTime","inPeriodCheckEndDate","toUtcTime","startZone","endZone","startOffsetDiff","endOffsetDiff","startTZOffsetDiff","endTZOffsetDiff","offsetTicksStart","offsetTicksEnd","toOccurrence","_endTime","slice","isMissingDSTHour","RECURRENCE_VIEW_TEMPLATE","template","messages","repeatEvery","repeatOn","attr","of","label","never","after","occurrence","on","DAY_RULE","WEEKDAY_RULE","WEEKEND_RULE","BaseRecurrenceEditor","init","element","that","call","wrapper","today","firstWeekDay","_namespace","name","spinners","mobile","repeat","recurrenceEditorTitle","mobileLabel","offsetPositions","third","fourth","last","weekdays","weekday","weekend","_initInterval","input","_container","find","_value","_interval","kendoNumericTextBox","decimals","format","min","change","_trigger","data","addClass","_weekDayButtons","names","abbreviated","namesAbbr","values","items","text","attributes","_weekDayButtonGroup","selection","select","selectedDays","map","i","Number","getAttribute","_weekDayRule","clear","_weekDay","_weekDayOffset","_weekDayView","weekDayOffset","weekDayValue","method","weekDayOffsetWidget","_initWeekDay","weekdayMessage","offsetMessage","weekDayInput","autoWidth","dataTextField","dataValueField","dataSource","dayName","_initWeekDays","weekDayButtonGroup","selectedWeekDayButtons","ruleDays","ruleDaysLength","selectors","_initMonthDay","monthDayInput","_monthDay","NumericTextBox","max","_initCount","_count","_initUntil","startInput","closest","validDateValidationMessage","Validator","prototype","dateCompareValidationMessage","dateCompare","initialValue","_until","kendoDatePicker","untilEl","readonly","Boolean","enable","is","parents","setOptions","trigger","RecurrenceEditor","_initFrequency","_initContainer","destroy","_frequency","off","freqButton","_initView","container","editContainer","parent","insertAfter","append","buttonGroupElement","title","recurrenceViewHtml","empty","applyStylesFromKendoAttributes","html","_initMonth","_period","_end","monthInputs","monthName","_month1","_month2","endRule","namespace","click","e","_toggleEnd","currentTarget","_buttonNever","_buttonCount","_buttonUntil","toggleRule","_toggleMonthDay","_toggleYear","selector","radioButtons","_buttonMonthDay","eq","_buttonWeekDay","enableCount","enableUntil","prop","monthRule","enableMonthDay","enableWeekDay","yearRule","enableMonth1","enableMonth2","plugin","RECURRENCE_HEADER_TEMPLATE","headerTitle","RECURRENCE_REPEAT_PATTERN_TEMPLATE","repeatBy","every","RECURRENCE_END_PATTERN_TEMPLATE","endPattern","RECURRENCE_GROUP_BUTTON_TEMPLATE","item","MobileRecurrenceEditor","_optionTemplate","_pane","pane","_initRepeatButton","_initParentRepeatEnd","_defaultValue","animations","left","right","cancel","update","endTitle","repeatTitle","patterns","dayOfMonth","dayOfWeek","_destroyView","_endFields","target","_chevronButton","icon","_repeatValue","preventDefault","_createView","navigate","_view","_endLiItem","endLabelField","endEditField","appendTo","_navigateToView","_endParentLabelField","toggle","_endParentEndButton","_endText","_initRepeatEnd","_endLabelField","toggleClass","_endButton","viewName","frequencyMessages","ns","_initRepeatView","_initEndNavigation","endMessages","_initEndView","viewType","renderButton","fillMode","returnViewId","view","id","stopPropagation","hasClass","one","remove","$html","content","hide","show","ev","weekDaySelect","_options","monthSelect","monthNames","_monthSelect","repeatRuleGroupButton","weekDayView","monthDayView","currentValue","weekDayName","support","optionLabel","jQuery","kendo$1","__meta__","category","depends","hidden","default","Object","defineProperty"],"mappings":"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","file":"kendo.scheduler.recurrence.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('kendo.dropdownlist.js'), require('kendo.datepicker.js'), require('kendo.numerictextbox.js'), require('kendo.buttongroup.js'), require('kendo.icons.js')) :\n    typeof define === 'function' && define.amd ? define(['exports', 'kendo.dropdownlist', 'kendo.datepicker', 'kendo.numerictextbox', 'kendo.buttongroup', 'kendo.icons'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.kendo = global.kendo || {}, global.kendo._globals = global.kendo._globals || {}, global.kendo._globals.SchedulerRecurrence = {})));\n})(this, (function (exports) {\n    const __meta__ = {\n        id: \"scheduler.recurrence\",\n        name: \"Recurrence\",\n        category: \"web\",\n        depends: [ \"dropdownlist\", \"datepicker\", \"numerictextbox\", \"buttongroup\", \"icons\" ],\n        hidden: true\n    };\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            encode = kendo.htmlEncode,\n            timezone = kendo.timezone,\n            Class = kendo.Class,\n            ui = kendo.ui,\n            Widget = ui.Widget,\n            DropDownList = ui.DropDownList,\n            ButtonGroup = ui.ButtonGroup,\n            kendoDate = kendo.date,\n            setTime = kendoDate.setTime,\n            setDayOfWeek = kendoDate.setDayOfWeek,\n            adjustDST = kendoDate.adjustDST,\n            firstDayOfMonth = kendoDate.firstDayOfMonth,\n            getMilliseconds = kendoDate.getMilliseconds,\n            DAYS_IN_LEAPYEAR = [0,31,60,91,121,152,182,213,244,274,305,335,366],\n            DAYS_IN_YEAR = [0,31,59,90,120,151,181,212,243,273,304,334,365],\n            MONTHS = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n            WEEK_DAYS = {\n                0: \"SU\",\n                1: \"MO\",\n                2: \"TU\",\n                3: \"WE\",\n                4: \"TH\",\n                5: \"FR\",\n                6: \"SA\"\n            },\n            WEEK_DAYS_IDX = {\n                \"SU\": 0,\n                \"MO\": 1,\n                \"TU\": 2,\n                \"WE\": 3,\n                \"TH\": 4,\n                \"FR\": 5,\n                \"SA\": 6\n            },\n            DATE_FORMATS = [\n                \"yyyy-MM-ddTHH:mm:ss.fffzzz\",\n                \"yyyy-MM-ddTHH:mm:sszzz\",\n                \"yyyy-MM-ddTHH:mm:ss\",\n                \"yyyy-MM-ddTHH:mm\",\n                \"yyyy-MM-ddTHH\",\n                \"yyyy-MM-dd\",\n                \"yyyyMMddTHHmmssfffzzz\",\n                \"yyyyMMddTHHmmsszzz\",\n                \"yyyyMMddTHHmmss\",\n                \"yyyyMMddTHHmm\",\n                \"yyyyMMddTHH\",\n                \"yyyyMMdd\"\n            ],\n            RULE_NAMES = [\"months\", \"weeks\", \"yearDays\", \"monthDays\", \"weekDays\", \"hours\", \"minutes\", \"seconds\"],\n            RULE_NAMES_LENGTH = RULE_NAMES.length,\n            RECURRENCE_DATE_FORMAT = \"yyyyMMddTHHmmssZ\",\n            limitation = {\n                months: function(date, end, rule) {\n                    var monthRules = rule.months,\n                        months = ruleValues(monthRules, date.getMonth() + 1),\n                        changed = false;\n\n                    if (months !== null) {\n                        if (months.length) {\n                            date.setMonth(months[0] - 1, 1);\n                        } else {\n                            date.setFullYear(date.getFullYear() + 1, monthRules[0] - 1, 1);\n                        }\n\n                        changed = true;\n                    }\n\n                    return changed;\n                },\n\n                monthDays: function(date, end, rule) {\n                    var monthLength, month, days,\n                        changed = false,\n                        hours = date.getHours(),\n                        normalize = function(monthDay) {\n                            if (monthDay < 0) {\n                                monthDay = monthLength + monthDay + 1;\n                            }\n                            return monthDay;\n                        };\n\n                    while (date <= end) {\n                        month = date.getMonth();\n                        monthLength = getMonthLength(date);\n                        days = ruleValues(rule.monthDays, date.getDate(), normalize);\n\n                        if (days === null) {\n                            return changed;\n                        }\n\n                        changed = true;\n\n                        if (days.length) {\n                            date.setMonth(month, days.sort(numberSortPredicate)[0]);\n                            adjustDST(date, hours);\n\n                            if (month === date.getMonth()) {\n                                break;\n                            }\n                        } else {\n                            date.setMonth(month + 1, 1);\n                        }\n                    }\n\n                    return changed;\n                },\n\n                yearDays: function(date, end, rule) {\n                    var year, yearDays,\n                        changed = false,\n                        hours = date.getHours(),\n                        normalize = function(yearDay) {\n                            if (yearDay < 0) {\n                                yearDay = year + yearDay;\n                            }\n                            return yearDay;\n                        };\n\n                    while (date < end) {\n                        year = leapYear(date) ? 366 : 365;\n                        yearDays = ruleValues(rule.yearDays, dayInYear(date), normalize);\n\n                        if (yearDays === null) {\n                            return changed;\n                        }\n\n                        changed = true;\n                        year = date.getFullYear();\n\n                        if (yearDays.length) {\n                            date.setFullYear(year, 0, yearDays.sort(numberSortPredicate)[0]);\n                            adjustDST(date, hours);\n                            break;\n                        } else {\n                            date.setFullYear(year + 1, 0, 1);\n                        }\n                    }\n\n                    return changed;\n                },\n\n                weeks: function(date, end, rule) {\n                    var weekStart = rule.weekStart,\n                        year, weeks, day,\n                        changed = false,\n                        hours = date.getHours(),\n                        normalize = function(week) {\n                            if (week < 0) {\n                                week = 53 + week;\n                            }\n                            return week;\n                        };\n\n                    while (date < end) {\n                        weeks = ruleValues(rule.weeks, weekInYear(date, weekStart), normalize);\n\n                        if (weeks === null) {\n                            return changed;\n                        }\n\n                        changed = true;\n                        year = date.getFullYear();\n\n                        if (weeks.length) {\n                            day = (weeks.sort(numberSortPredicate)[0] * 7) - 1;\n\n                            date.setFullYear(year, 0, day);\n                            setDayOfWeek(date, weekStart, -1);\n\n                            adjustDST(date, hours);\n                            break;\n                        } else {\n                            date.setFullYear(year + 1, 0, 1);\n                        }\n                    }\n\n                    return changed;\n                },\n\n                weekDays: function(date, end, rule) {\n                    var offsetDate = new Date(date.getTime() + rule.offsets.start);\n                    var normalizeDay = offsetDate.getDay() - date.getDay();\n                    var weekDays = rule.weekDays;\n                    var weekStart = rule.weekStart;\n                    var weekDayRules = ruleWeekValues(weekDays, offsetDate, weekStart);\n                    var hours = date.getHours();\n                    var traverseRuleForNextMont = function(rule) {\n                        var nextMonthFirstDay = new Date(date.getFullYear(), date.getMonth() + 1, 1);\n                        var ruleDay = normalizeDayIndex(rule.day, weekStart);\n\n                        if (nextMonthFirstDay.getDay() <= ruleDay) {\n                            if (!weekDayRule || normalizeDayIndex(weekDayRule.day, weekStart) > ruleDay) {\n                                weekDayRule = rule;\n                            }\n                        }\n                    };\n                    var weekDayRule, day;\n\n\n                    if (weekDayRules === null) {\n                        return false;\n                    }\n\n                    weekDayRule = weekDayRules[0];\n\n                    if (!weekDayRule) {\n                        if (rule.freq === \"monthly\" && !rule.positions || rule.position > 0) {\n                            weekDays.forEach(traverseRuleForNextMont);\n                        }\n                        if (!weekDayRule) {\n                            weekDayRule = weekDays[0];\n                        }\n                        setDayOfWeek(date, weekStart);\n                    }\n\n                    day = weekDayRule.day;\n                    day -= normalizeDay;\n\n                    if (weekDayRule.offset) {\n                        while (date <= end && !isInWeek(date, weekDayRule, weekStart)) {\n                            if (weekInMonth(date, weekStart) === numberOfWeeks(date, weekStart)) {\n                                date.setMonth(date.getMonth() + 1, 1);\n                                adjustDST(date, hours);\n                            } else {\n                                date.setDate(date.getDate() + 7);\n                                adjustDST(date, hours);\n\n                                setDayOfWeek(date, weekStart, -1);\n                            }\n                        }\n                    }\n\n                    if (date.getDay() !== day) {\n                        setDayOfWeek(date, day);\n                    }\n\n                    return true;\n                },\n\n                hours: function(date, end, rule) {\n                    var hourRules = rule.hours,\n                        startTime = rule._startTime,\n                        startHours = startTime.getHours(),\n                        hours = ruleValues(hourRules, startHours),\n                        changed = false;\n\n                    if (hours !== null) {\n                        changed = true;\n\n                        date.setHours(startHours);\n                        adjustDST(date, startHours);\n\n                        if (hours.length) {\n                            hours = hours[0];\n                            date.setHours(hours);\n                        } else {\n                            hours = date.getHours();\n                            date.setDate(date.getDate() + 1);\n                            adjustDST(date, hours);\n\n                            hours = hourRules[0];\n                            date.setHours(hours);\n                            adjustDST(date, hours);\n                        }\n\n                        if (rule.minutes) {\n                            date.setMinutes(0);\n                        }\n\n                        startTime.setHours(hours, date.getMinutes());\n                    }\n\n                    return changed;\n                },\n\n                minutes: function(date, end, rule) {\n                    var minuteRules = rule.minutes,\n                        currentMinutes = date.getMinutes(),\n                        minutes = ruleValues(minuteRules, currentMinutes),\n                        hours = rule._startTime.getHours(),\n                        changed = false;\n\n                    if (minutes !== null) {\n                        changed = true;\n\n                        if (minutes.length) {\n                            minutes = minutes[0];\n                        } else {\n                            hours += 1;\n                            minutes = minuteRules[0];\n                        }\n\n                        if (rule.seconds) {\n                            date.setSeconds(0);\n                        }\n\n                        date.setHours(hours, minutes);\n\n                        hours = hours % 24;\n                        adjustDST(date, hours);\n                        rule._startTime.setHours(hours, minutes, date.getSeconds());\n                    }\n\n                    return changed;\n                },\n\n                seconds: function(date, end, rule) {\n                    var secondRules = rule.seconds,\n                        hours = rule._startTime.getHours(),\n                        seconds = ruleValues(secondRules, date.getSeconds()),\n                        minutes = date.getMinutes(),\n                        changed = false;\n\n                    if (seconds !== null) {\n                        changed = true;\n\n                        if (seconds.length) {\n                            date.setSeconds(seconds[0]);\n                        } else {\n                            minutes += 1;\n                            date.setMinutes(minutes, secondRules[0]);\n\n                            if (minutes > 59) {\n                                minutes = minutes % 60;\n                                hours = (hours + 1) % 24;\n                            }\n                        }\n\n                        rule._startTime.setHours(hours, minutes, date.getSeconds());\n                    }\n\n                    return changed;\n                }\n            },\n            BaseFrequency = Class.extend({\n                next: function(date, rule) {\n                    var startTime = rule._startTime,\n                        day = startTime.getDate(),\n                        minutes, seconds;\n\n                    if (rule.seconds) {\n                        seconds = date.getSeconds() + 1;\n\n                        date.setSeconds(seconds);\n                        startTime.setSeconds(seconds);\n                        startTime.setDate(day);\n\n                    } else if (rule.minutes) {\n                        minutes = date.getMinutes() + 1;\n\n                        date.setMinutes(minutes);\n                        startTime.setMinutes(minutes);\n                        startTime.setDate(day);\n                    } else {\n                        return false;\n                    }\n\n                    return true;\n                },\n\n                normalize: function(options) {\n                    var rule = options.rule;\n\n                    if (options.idx === 4 && rule.hours) {\n                        rule._startTime.setHours(0);\n                        this._hour(options.date, rule);\n                    }\n                },\n\n                limit: function(date, end, rule) {\n                    var interval = rule.interval,\n                        ruleName, firstRule,\n                        modified,\n                        idx, day;\n\n                    while (date <= end) {\n                        modified = firstRule = undefined$1;\n                        day = date.getDate();\n\n                        for (idx = 0; idx < RULE_NAMES_LENGTH; idx++) {\n                            ruleName = RULE_NAMES[idx];\n\n                            if (rule[ruleName]) {\n                                modified = limitation[ruleName](date, end, rule);\n                                if (firstRule !== undefined$1 && modified) {\n                                    break;\n                                } else {\n                                    firstRule = modified;\n                                }\n                            }\n\n                            if (modified) {\n                                this.normalize({ date: date, rule: rule, day: day, idx: idx });\n                            }\n                        }\n\n                        if ((interval === 1 || !this.interval(rule, date)) && idx === RULE_NAMES_LENGTH) {\n                            break;\n                        }\n                    }\n                },\n\n                interval: function(rule, current) {\n                    var start = new Date(rule._startPeriod);\n                    var date = new Date(current);\n                    var hours = current.getHours();\n                    var weekStart = rule.weekStart;\n                    var interval = rule.interval;\n                    var frequency = rule.freq;\n                    var modified = false;\n                    var excess = 0;\n                    var month = 0;\n                    var day = 1;\n                    var diff;\n\n                    var startTimeHours;\n\n                    if (frequency === \"hourly\") {\n                        diff = date.getTimezoneOffset() - start.getTimezoneOffset();\n                        startTimeHours = rule._startTime.getHours();\n\n                        date = date.getTime();\n                        if (hours !== startTimeHours) {\n                            date += (startTimeHours - hours) * kendoDate.MS_PER_HOUR;\n                        }\n                        date -= start;\n\n                        if (diff) {\n                            date -= diff * kendoDate.MS_PER_MINUTE;\n                        }\n\n                        diff = Math.floor(date / kendoDate.MS_PER_HOUR);\n                        excess = intervalExcess(diff, interval);\n\n                        if (excess !== 0) {\n                            this._hour(current, rule, excess);\n                            modified = true;\n                        }\n                    } else if (frequency === \"daily\") {\n                        kendoDate.setTime(date, -start, true);\n\n                        diff = Math.round(date / kendoDate.MS_PER_DAY);\n                        excess = intervalExcess(diff, interval);\n\n                        if (excess !== 0) {\n                            this._date(current, rule, excess);\n                            modified = true;\n                        }\n\n                    } else if (frequency === \"weekly\") {\n                        excess = this._getNumberOfWeeksBetweenDates(start, current);\n\n                        var normalizedCurrentIndex = normalizeDayIndex(current.getDay(), weekStart);\n                        var normalizedStartIndex = normalizeDayIndex(start.getDay(), weekStart);\n\n                        if (normalizedCurrentIndex < normalizedStartIndex) {\n                            excess += 1;\n                        }\n\n                        excess = intervalExcess(excess, interval);\n                        if (excess !== 0) {\n                            kendoDate.setDayOfWeek(current, rule.weekStart, -1);\n\n                            current.setDate(current.getDate() + (excess * 7));\n                            adjustDST(current, hours);\n\n                            modified = true;\n                        }\n                    } else if (frequency === \"monthly\") {\n                        diff = current.getFullYear() - start.getFullYear();\n                        diff = current.getMonth() - start.getMonth() + (diff * 12);\n\n                        excess = intervalExcess(diff, interval);\n\n                        if (excess !== 0) {\n                            day = rule._hasRuleValue ? 1 : current.getDate();\n\n                            current.setFullYear(current.getFullYear(), current.getMonth() + excess, day);\n                            adjustDST(current, hours);\n\n                            modified = true;\n                        }\n                    } else if (frequency === \"yearly\") {\n                        diff = current.getFullYear() - start.getFullYear();\n                        excess = intervalExcess(diff, interval);\n\n                        if (!rule.months) {\n                            month = current.getMonth();\n                        }\n\n                        if (!rule.yearDays && !rule.monthDays && !rule.weekDays) {\n                            day = current.getDate();\n                        }\n\n                        if (excess !== 0) {\n                            current.setFullYear(current.getFullYear() + excess, month, day);\n                            adjustDST(current, hours);\n\n                            modified = true;\n                        }\n                    }\n\n                    return modified;\n                },\n\n                _getNumberOfWeeksBetweenDates: function(first, second) {\n                     var weeks = (second - first) / 604800000;\n                     var exactWeeks = Math.floor(weeks);\n\n                    //this is happening when weeks pass DST change\n                    if (weeks - exactWeeks > 0.99) {\n                        exactWeeks = Math.round(weeks);\n                    }\n                    return exactWeeks;\n                },\n\n                _hour: function(date, rule, interval) {\n                    var startTime = rule._startTime,\n                        hours = startTime.getHours();\n\n                    if (interval) {\n                        hours += interval;\n                    }\n\n                    date.setHours(hours);\n\n                    hours = hours % 24;\n                    startTime.setHours(hours);\n                    adjustDST(date, hours);\n                },\n\n                _date: function(date, rule, interval) {\n                    var hours = date.getHours();\n\n                    date.setDate(date.getDate() + interval);\n                    if (!adjustDST(date, hours)) {\n                        this._hour(date, rule);\n                    }\n                }\n            }),\n            HourlyFrequency = BaseFrequency.extend({\n                next: function(date, rule) {\n                    if (!BaseFrequency.fn.next(date, rule)) {\n                        this._hour(date, rule, 1);\n                    }\n                },\n\n                normalize: function(options) {\n                    var rule = options.rule;\n\n                    if (options.idx === 4) {\n                        rule._startTime.setHours(0);\n                        this._hour(options.date, rule);\n                    }\n                }\n            }),\n            DailyFrequency = BaseFrequency.extend({\n                next: function(date, rule) {\n                    if (!BaseFrequency.fn.next(date, rule)) {\n                        this[rule.hours ? \"_hour\" : \"_date\"](date, rule, 1);\n                    }\n                }\n            }),\n            WeeklyFrequency = DailyFrequency.extend({\n                setup: function(rule, eventStartDate) {\n                    if (!rule.weekDays) {\n                        rule.weekDays = [{\n                            day: eventStartDate.getDay(),\n                            offset: 0\n                        }];\n                    }\n                }\n            }),\n            MonthlyFrequency = BaseFrequency.extend({\n                next: function(date, rule) {\n                    var day, hours;\n                    if (!BaseFrequency.fn.next(date, rule)) {\n                        if (rule.hours) {\n                            this._hour(date, rule, 1);\n                        } else if (rule.monthDays || rule.weekDays || rule.yearDays || rule.weeks) {\n                            this._date(date, rule, 1);\n                        } else {\n                            day = date.getDate();\n                            hours = date.getHours();\n\n                            date.setMonth(date.getMonth() + 1);\n                            adjustDST(date, hours);\n\n                            while (date.getDate() !== day) {\n                                date.setDate(day);\n                                adjustDST(date, hours);\n                            }\n\n                            this._hour(date, rule);\n                        }\n                    }\n                },\n                normalize: function(options) {\n                    var rule = options.rule,\n                        date = options.date,\n                        hours = date.getHours();\n\n                    if (options.idx === 0 && !rule.monthDays && !rule.weekDays) {\n                        date.setDate(options.day);\n                        adjustDST(date, hours);\n                    } else {\n                        BaseFrequency.fn.normalize(options);\n                    }\n                },\n                setup: function(rule, eventStartDate, date) {\n                    if (!rule.monthDays && !rule.weekDays) {\n                        date.setDate(eventStartDate.getDate());\n                    }\n                }\n            }),\n            YearlyFrequency = MonthlyFrequency.extend({\n                next: function(date, rule) {\n                    var day,\n                        hours = date.getHours();\n\n                    if (!BaseFrequency.fn.next(date, rule)) {\n                        if (rule.hours) {\n                            this._hour(date, rule, 1);\n                        } else if (rule.monthDays || rule.weekDays || rule.yearDays || rule.weeks) {\n                            this._date(date, rule, 1);\n                        } else if (rule.months) {\n                            day = date.getDate();\n\n                            date.setMonth(date.getMonth() + 1);\n                            adjustDST(date, hours);\n\n                            while (date.getDate() !== day) {\n                                date.setDate(day);\n                                adjustDST(date, hours);\n                            }\n\n                            this._hour(date, rule);\n                        } else {\n                            date.setFullYear(date.getFullYear() + 1);\n                            adjustDST(date, hours);\n\n                            this._hour(date, rule);\n                        }\n                    }\n                },\n                setup: function() {}\n            }),\n            frequencies = {\n                \"hourly\": new HourlyFrequency(),\n                \"daily\": new DailyFrequency(),\n                \"weekly\": new WeeklyFrequency(),\n                \"monthly\": new MonthlyFrequency(),\n                \"yearly\": new YearlyFrequency()\n            },\n            CLICK = \"click\",\n            CHANGE = \"change\";\n\n        function intervalExcess(diff, interval) {\n            var excess;\n            if (diff !== 0 && diff < interval) {\n                excess = interval - diff;\n            } else {\n                excess = diff % interval;\n                if (excess) {\n                    excess = interval - excess;\n                }\n            }\n\n            return excess;\n        }\n\n        function dayInYear(date) {\n            var month = date.getMonth();\n            var days = leapYear(date) ? DAYS_IN_LEAPYEAR[month] : DAYS_IN_YEAR[month];\n\n            return days + date.getDate();\n        }\n\n        function weekInYear(date, weekStart) {\n            var year, days;\n\n            date = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n            adjustDST(date, 0);\n\n            year = date.getFullYear();\n\n            if (weekStart !== undefined$1) {\n                setDayOfWeek(date, weekStart, -1);\n                date.setDate(date.getDate() + 4);\n            } else {\n                date.setDate(date.getDate() + (4 - (date.getDay() || 7)));\n            }\n\n            adjustDST(date, 0);\n            days = Math.floor((date.getTime() - new Date(year, 0, 1, -6)) / 86400000);\n\n            return 1 + Math.floor(days / 7);\n        }\n\n        function weekInMonth(date, weekStart) {\n            var firstWeekDay = firstDayOfMonth(date).getDay();\n            var firstWeekLength = 7 - (firstWeekDay + 7 - (weekStart || 7)) || 7;\n\n            if (firstWeekLength < 0) {\n                firstWeekLength += 7;\n            }\n\n            return Math.ceil((date.getDate() - firstWeekLength) / 7) + 1;\n        }\n\n        function normalizeDayIndex(weekDay, weekStart) {\n            return weekDay + (weekDay < weekStart ? 7 : 0);\n        }\n\n        function normalizeOffset(date, rule, weekStart) {\n            var offset = rule.offset;\n\n            if (!offset) {\n                return weekInMonth(date, weekStart);\n            }\n\n            var lastDate = new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            var weeksInMonth = weekInMonth(lastDate, weekStart);\n\n            var day = normalizeDayIndex(rule.day, weekStart);\n\n            var skipFirst = day < normalizeDayIndex(new Date(date.getFullYear(), date.getMonth(), 1).getDay(), weekStart);\n            var skipLast = day > normalizeDayIndex(lastDate.getDay(), weekStart);\n\n            if (offset < 0) {\n                offset = weeksInMonth + (offset + 1 - (skipLast ? 1 : 0));\n            } else if (skipFirst) {\n                offset += 1;\n            }\n\n            weeksInMonth -= (skipLast ? 1 : 0);\n\n            if (offset < (skipFirst ? 1 : 0) || offset > weeksInMonth) {\n                return null;\n            }\n\n            return offset;\n        }\n\n        function numberOfWeeks(date, weekStart) {\n            return weekInMonth(new Date(date.getFullYear(), date.getMonth() + 1, 0), weekStart);\n        }\n\n        function isInWeek(date, rule, weekStart) {\n            return weekInMonth(date, weekStart) === normalizeOffset(date, rule, weekStart);\n        }\n\n        function ruleWeekValues(weekDays, date, weekStart) {\n            var currentDay = normalizeDayIndex(date.getDay(), weekStart);\n            var length = weekDays.length;\n            var ruleWeekOffset;\n            var weekDay, day;\n            var weekNumber;\n            var result = [];\n            var idx = 0;\n\n            for (;idx < length; idx++) {\n                weekDay = weekDays[idx];\n\n                weekNumber = weekInMonth(date, weekStart);\n                ruleWeekOffset = normalizeOffset(date, weekDay, weekStart);\n\n                if (ruleWeekOffset === null) {\n                    continue;\n                }\n\n                if (weekNumber < ruleWeekOffset) {\n                    result.push(weekDay);\n                } else if (weekNumber === ruleWeekOffset) {\n                    day = normalizeDayIndex(weekDay.day, weekStart);\n\n                    if (currentDay < day) {\n                        result.push(weekDay);\n                    } else if (currentDay === day) {\n                        return null;\n                    }\n                }\n            }\n\n            return result;\n        }\n\n        function ruleValues(rules, value, normalize) {\n            var idx = 0,\n                length = rules.length,\n                availableRules = [],\n                ruleValue;\n\n            for (; idx < length; idx++) {\n                ruleValue = rules[idx];\n\n                if (normalize) {\n                    ruleValue = normalize(ruleValue);\n                }\n\n                if (value === ruleValue) {\n                    return null;\n                } else if (value < ruleValue) {\n                    availableRules.push(ruleValue);\n                }\n            }\n\n            return availableRules;\n        }\n\n        function parseArray(list, range) {\n            var idx = 0,\n                length = list.length,\n                value;\n\n            for (; idx < length; idx++) {\n                value = parseInt(list[idx], 10);\n                if (isNaN(value) || value < range.start || value > range.end || (value === 0 && range.start < 0)) {\n                    return null;\n                }\n\n                list[idx] = value;\n            }\n\n            return list.sort(numberSortPredicate);\n        }\n\n        function parseWeekDayList(list) {\n            var idx = 0, length = list.length,\n                value, valueLength, day;\n\n            for (; idx < length; idx++) {\n                value = list[idx];\n                valueLength = value.length;\n                day = value.substring(valueLength - 2).toUpperCase();\n\n                day = WEEK_DAYS_IDX[day];\n                if (day === undefined$1) {\n                    return null;\n                }\n\n                list[idx] = {\n                    offset: parseInt(value.substring(0, valueLength - 2), 10) || 0,\n                    day: day\n                };\n            }\n            return list;\n        }\n\n        function serializeWeekDayList(list) {\n            var idx = 0, length = list.length,\n                value, valueString, result = [];\n\n            for (; idx < length; idx++) {\n                value = list[idx];\n                if (typeof value === \"string\") {\n                    valueString = value;\n                } else {\n                    valueString = \"\" + WEEK_DAYS[value.day];\n\n                    if (value.offset) {\n                        valueString = value.offset + valueString;\n                    }\n                }\n\n                result.push(valueString);\n            }\n            return result.toString();\n        }\n\n        function getMonthLength(date) {\n            var month = date.getMonth();\n\n            if (month === 1) {\n                if (new Date(date.getFullYear(), 1, 29).getMonth() === 1) {\n                    return 29;\n                }\n                return 28;\n            }\n            return MONTHS[month];\n        }\n\n        function leapYear(year) {\n            year = year.getFullYear();\n            return ((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0);\n        }\n\n        function numberSortPredicate(a, b) {\n            return a - b;\n        }\n\n        function parseExceptions(exceptions, zone) {\n            var idx = 0, length, date,\n                dates = [];\n\n            if (exceptions) {\n                exceptions = exceptions.split(exceptions.indexOf(\";\") !== -1 ? \";\" : \",\");\n                length = exceptions.length;\n\n                for (; idx < length; idx++) {\n                    date = parseUTCDate(exceptions[idx], zone);\n\n                    if (date) {\n                        dates.push(date);\n                    }\n                }\n            }\n\n            return dates;\n        }\n\n        function isException(exceptions, date, zone) {\n            var dates = Array.isArray(exceptions) ? exceptions : parseExceptions(exceptions, zone),\n                dateTime = date.getTime() - date.getMilliseconds(),\n                idx = 0, length = dates.length;\n\n            for (; idx < length; idx++) {\n                if (dates[idx].getTime() === dateTime) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        function toExceptionString(dates, zone) {\n            var idx = 0;\n            var length;\n            var date;\n            var result = [].concat(dates);\n\n            for (length = result.length; idx < length; idx++) {\n                date = result[idx];\n                date = kendo.timezone.convert(date, zone || date.getTimezoneOffset(), \"Etc/UTC\");\n                result[idx] = kendo.toString(date, RECURRENCE_DATE_FORMAT);\n            }\n\n            return result.join(\",\");\n        }\n\n        function startPeriodByFreq(start, rule) {\n            var date = new Date(start);\n\n            switch (rule.freq) {\n                case \"yearly\":\n                    date.setFullYear(date.getFullYear(), 0, 1);\n                    break;\n\n                case \"monthly\":\n                    date.setFullYear(date.getFullYear(), date.getMonth(), 1);\n                    break;\n\n                case \"weekly\":\n                    setDayOfWeek(date, rule.weekStart, -1);\n                    break;\n\n                default:\n                    break;\n            }\n\n            if (rule.hours) {\n                date.setHours(0);\n            }\n\n            if (rule.minutes) {\n                date.setMinutes(0);\n            }\n\n            if (rule.seconds) {\n                date.setSeconds(0);\n            }\n\n            return date;\n        }\n\n        function endPeriodByFreq(start, rule) {\n            var date = new Date(start);\n\n            switch (rule.freq) {\n                case \"yearly\":\n                    date.setFullYear(date.getFullYear(), 11, 31);\n                    break;\n\n                case \"monthly\":\n                    date.setFullYear(date.getFullYear(), date.getMonth() + 1, 0);\n                    break;\n\n                case \"weekly\":\n                    setDayOfWeek(date, rule.weekStart, -1);\n                    date.setDate(date.getDate() + 6);\n                    break;\n\n                default:\n                    break;\n            }\n\n            if (rule.hours) {\n                date.setHours(23);\n            }\n\n            if (rule.minutes) {\n                date.setMinutes(59);\n            }\n\n            if (rule.seconds) {\n                date.setSeconds(59);\n            }\n\n            return date;\n        }\n\n        function eventsByPosition(periodEvents, start, positions, until) {\n            var periodEventsLength = periodEvents.length;\n            var events = [];\n            var position;\n            var event;\n            var inPeriod;\n\n            for (var idx = 0, length = positions.length; idx < length; idx++) {\n                position = positions[idx];\n\n                if (position < 0) {\n                    position = periodEventsLength + position;\n                } else {\n                    position -= 1; //convert to zero based index\n                }\n\n                event = periodEvents[position];\n                inPeriod = until ? event.start < until : true;\n\n                if (event && event.start >= start && inPeriod) {\n                    events.push(event);\n                }\n            }\n\n            return events;\n        }\n\n        function removeExceptionDates(periodEvents, exceptionDates, zone) {\n            var events = [];\n            var event;\n\n            for (var idx = 0; idx < periodEvents.length; idx++) {\n                event = periodEvents[idx];\n                if (!isException(exceptionDates, event.start, zone)) {\n                    events.push(event);\n                }\n            }\n\n            return events;\n        }\n\n        function expand(event, start, end, zone) {\n            var rule,\n                startTime, endTime, endDate,\n                hours, minutes, seconds,\n                durationMS, startPeriod, inPeriod,\n                ruleStart, ruleEnd,\n                useEventStart, freqName,\n                exceptionDates,\n                eventStartTime,\n                eventStartMS,\n                eventStart,\n                count, freq,\n                positions,\n                currentIdx,\n                periodEvents,\n                events = [],\n                shiftedStart,\n                shiftedEnd,\n                shiftedStartTime,\n                shifterEndTime;\n\n            rule = parseRule(event.recurrenceRule, zone, { // offsets argument\n                start: (getZoneOffset(event.start, zone) - getZoneOffset(event.start, event.startTimezone || zone)) * kendo.date.MS_PER_MINUTE,\n                end: (getZoneOffset(event.end, zone) - getZoneOffset(event.end, event.endTimezone || zone)) * kendo.date.MS_PER_MINUTE\n            });\n\n            if (!rule) {\n                return [event];\n            }\n\n            positions = rule.positions;\n            currentIdx = positions ? 0 : 1;\n\n            ruleStart = rule.start;\n            ruleEnd = rule.end;\n\n            if (ruleStart || ruleEnd) {\n                event = event.clone({\n                    start: ruleStart ? new Date(ruleStart.value[0]) : undefined$1,\n                    end: ruleEnd ? new Date(ruleEnd.value[0]) : undefined$1\n                });\n            }\n\n            eventStart = event.start;\n            eventStartMS = eventStart.getTime();\n            eventStartTime = getMilliseconds(eventStart);\n\n            exceptionDates = parseExceptions(event.recurrenceException, zone);\n\n            if (!exceptionDates[0] && rule.exdates) {\n                exceptionDates = rule.exdates.value;\n                event.set(\"recurrenceException\", toExceptionString(exceptionDates, zone));\n            }\n\n            startPeriod = start = new Date(start);\n            end = new Date(end);\n\n            freqName = rule.freq;\n            freq = frequencies[freqName];\n            count = rule.count;\n\n            if (rule.until && rule.until < end) {\n                end = new Date(rule.until);\n            }\n\n            useEventStart = freqName === \"yearly\" || freqName === \"monthly\" || freqName === \"weekly\";\n\n            if (start < eventStartMS || count || rule.interval > 1 || useEventStart ||\n                 ((freqName === \"daily\" || freqName === \"hourly\") && !rule.seconds)) {\n                        start = new Date(eventStartMS);\n            } else {\n                hours = start.getHours();\n                minutes = start.getMinutes();\n                seconds = start.getSeconds();\n\n                if (!rule.hours) {\n                    hours = eventStart.getHours();\n                }\n\n                if (!rule.minutes) {\n                    minutes = eventStart.getMinutes();\n                }\n\n                if (!rule.seconds) {\n                    seconds = eventStart.getSeconds();\n                }\n\n                start.setHours(hours, minutes, seconds, eventStart.getMilliseconds());\n            }\n\n            rule._startPeriod = new Date(start);\n\n            if (positions) {\n                start = startPeriodByFreq(start, rule);\n                end = endPeriodByFreq(end, rule);\n\n                var diff = getMilliseconds(end) - getMilliseconds(start);\n                if (diff < 0) {\n                    hours = start.getHours();\n                    end.setHours(hours, start.getMinutes(), start.getSeconds(), start.getMilliseconds());\n                    kendoDate.adjustDST(end, hours);\n                }\n\n                rule._startPeriod = new Date(start);\n                rule._endPeriod = endPeriodByFreq(start, rule);\n            }\n\n            durationMS = event.duration();\n            var allDayCompensation = event.isAllDay ? 86400000 : 0;\n            rule._startTime = startTime = kendoDate.toInvariantTime(start);\n\n            if (freq.setup) {\n                freq.setup(rule, eventStart, start);\n            }\n\n            freq.limit(start, end, rule);\n\n            while (start <= end) {\n                endDate = new Date(start);\n                setTime(endDate, durationMS);\n                var inPeriodCheckEndDate = new Date(start);\n                setTime(inPeriodCheckEndDate, durationMS + allDayCompensation);\n\n                inPeriod = start >= startPeriod || inPeriodCheckEndDate > startPeriod;\n\n                if (inPeriod && !isException(exceptionDates, start, zone) || positions) {\n                    startTime = kendoDate.toUtcTime(kendoDate.getDate(start)) + getMilliseconds(rule._startTime);\n                    endTime = startTime + durationMS;\n\n                    if (eventStartMS !== start.getTime() || eventStartTime !== getMilliseconds(rule._startTime)) {\n                        var startZone = event.startTimezone || event.endTimezone;\n                        var endZone = event.endTimezone || event.startTimezone;\n\n                        if (!event.isAllDay) {\n                            if ((zone && startZone) || (!zone && !startZone)) {\n                                var startOffsetDiff = getZoneOffset(start, zone) - getZoneOffset(event.start, zone);\n                                var endOffsetDiff = getZoneOffset(endDate, zone) - getZoneOffset(event.end, zone);\n                                var startTZOffsetDiff = getZoneOffset(start, startZone) - getZoneOffset(event.start, startZone);\n                                var endTZOffsetDiff = getZoneOffset(endDate, endZone) - getZoneOffset(event.end, endZone);\n\n                                if (startOffsetDiff !== startTZOffsetDiff) {\n                                    var offsetTicksStart = (startOffsetDiff - startTZOffsetDiff) * 60000;\n                                    shiftedStart = new Date(start.getTime() - offsetTicksStart);\n                                    shiftedStartTime = startTime - offsetTicksStart;\n                                }\n\n                                if (endOffsetDiff !== endTZOffsetDiff) {\n                                    var offsetTicksEnd = (endOffsetDiff - endTZOffsetDiff) * 60000;\n                                    shiftedEnd = new Date(endDate.getTime() - offsetTicksEnd);\n                                    shifterEndTime = endTime - offsetTicksEnd;\n                                }\n                            }\n                        }\n\n\n                        events.push(event.toOccurrence({\n                            start: shiftedStart || new Date(start),\n                            end: shiftedEnd || endDate,\n                            _startTime: shiftedStartTime || startTime,\n                            _endTime: shifterEndTime || endTime\n                        }));\n\n                        shiftedStart = shiftedEnd = shiftedStartTime = shifterEndTime = null;\n                    } else {\n                        event._startTime = startTime;\n                        event._endTime = endTime;\n                        events.push(event);\n                    }\n                }\n\n                if (positions) {\n                    freq.next(start, rule);\n                    freq.limit(start, end, rule);\n\n                    if (start > rule._endPeriod) {\n                        periodEvents = eventsByPosition(events.slice(currentIdx), eventStart, positions, rule.until);\n                        periodEvents = removeExceptionDates(periodEvents, exceptionDates, zone);\n                        events = events.slice(0, currentIdx).concat(periodEvents);\n\n                        rule._endPeriod = endPeriodByFreq(start, rule);\n\n                        currentIdx = events.length;\n                    }\n\n                    if (count && count === currentIdx) {\n                        break;\n                    }\n\n                } else {\n                    if (count && count === currentIdx) {\n                        break;\n                    }\n\n                    currentIdx += 1;\n\n                    var isMissingDSTHour = isDSTMissingHour(start);\n                    freq.next(start, rule);\n\n                    if (isMissingDSTHour && rule.freq !== \"hourly\" && kendoDate.toInvariantTime(event.start).getTime() !== kendoDate.toInvariantTime(start).getTime()) {\n                        rule._startTime = startTime = new Date(start.getTime() - 3600000);\n                    }\n\n                    freq.limit(start, end, rule);\n                }\n            }\n\n            return events;\n        }\n\n        function isDSTMissingHour(date) {\n            var dateOffset = date.getTimezoneOffset();\n            var dateMinusHour = new Date(date.getTime() - 3600000);\n            var dateMinusHourOffset = dateMinusHour.getTimezoneOffset();\n\n            return dateOffset < dateMinusHourOffset;\n        }\n\n        function getZoneOffset(date, zone) {\n            return zone ? kendo.timezone.offset(date, zone) : date.getTimezoneOffset();\n        }\n\n        function parseUTCDate(value, zone) {\n            value = kendo.parseDate(value, DATE_FORMATS); //Parse UTC to local time\n\n            if (value && zone) {\n                value = timezone.apply(value, zone);\n            }\n\n            return value;\n        }\n\n        function parseDateRule(dateRule, zone) {\n            var pairs = dateRule.split(\";\");\n            var pair;\n            var property;\n            var value;\n            var tzid;\n            var valueIdx, valueLength;\n\n            for (var idx = 0, length = pairs.length; idx < length; idx++) {\n                pair = pairs[idx].split(\":\");\n                property = pair[0];\n                value = pair[1];\n\n                if (property.indexOf(\"TZID\") !== -1) {\n                    tzid = property.substring(property.indexOf(\"TZID\")).split(\"=\")[1];\n                }\n\n                if (value) {\n                    value = value.split(\",\");\n\n                    for (valueIdx = 0, valueLength = value.length; valueIdx < valueLength; valueIdx++) {\n                        value[valueIdx] = parseUTCDate(value[valueIdx], tzid || zone);\n                    }\n                }\n            }\n\n            if (value) {\n                return {\n                    value: value,\n                    tzid: tzid\n                };\n            }\n        }\n\n        function parseRule(recur, zone, offsets) {\n            var instance = {};\n            var splits, value;\n            var idx = 0, length;\n            var ruleValue = false;\n            var rule, part, parts;\n            var property, weekStart, weekDays;\n            var predicate = function(a, b) {\n                var day1 = a.day,\n                    day2 = b.day;\n\n                if (day1 < weekStart) {\n                   day1 += 7;\n                }\n\n                if (day2 < weekStart) {\n                    day2 += 7;\n                }\n\n                return day1 - day2;\n            };\n\n            if (!recur) {\n                return null;\n            }\n\n            parts = recur.split(\"\\n\");\n\n            if (!parts[1] && (recur.indexOf(\"DTSTART\") !== -1 || recur.indexOf(\"DTEND\") !== -1 || recur.indexOf(\"EXDATE\") !== -1)) {\n                parts = recur.split(\" \");\n            }\n\n            for (idx = 0, length = parts.length; idx < length; idx++) {\n                part = kendo.trim(parts[idx]);\n\n                if (part.indexOf(\"DTSTART\") !== -1) {\n                    instance.start = parseDateRule(part, zone);\n                } else if (part.indexOf(\"DTEND\") !== -1) {\n                    instance.end = parseDateRule(part, zone);\n                } else if (part.indexOf(\"EXDATE\") !== -1) {\n                    instance.exdates = parseDateRule(part, zone);\n                } else if (part.indexOf(\"RRULE\") !== -1) {\n                    rule = part.substring(6);\n                } else if (kendo.trim(part)) {\n                    rule = part;\n                }\n            }\n\n            rule = rule.split(\";\");\n\n            for (idx = 0, length = rule.length; idx < length; idx++) {\n                property = rule[idx];\n                splits = property.split(\"=\");\n                value = kendo.trim(splits[1]).split(\",\");\n\n                switch (kendo.trim(splits[0]).toUpperCase()) {\n                    case \"FREQ\":\n                        instance.freq = value[0].toLowerCase();\n                        break;\n                    case \"UNTIL\":\n                        instance.until = parseUTCDate(value[0], zone);\n                        break;\n                    case \"COUNT\":\n                        instance.count = parseInt(value[0], 10);\n                        break;\n                    case \"INTERVAL\":\n                        instance.interval = parseInt(value[0], 10);\n                        break;\n                    case \"BYSECOND\":\n                        instance.seconds = parseArray(value, { start: 0, end: 60 });\n                        ruleValue = true;\n                        break;\n                    case \"BYMINUTE\":\n                        instance.minutes = parseArray(value, { start: 0, end: 59 });\n                        ruleValue = true;\n                        break;\n                    case \"BYHOUR\":\n                        instance.hours = parseArray(value, { start: 0, end: 23 });\n                        ruleValue = true;\n                        break;\n                    case \"BYMONTHDAY\":\n                        instance.monthDays = parseArray(value, { start: -31, end: 31 });\n                        ruleValue = true;\n                        break;\n                    case \"BYYEARDAY\":\n                        instance.yearDays = parseArray(value, { start: -366, end: 366 });\n                        ruleValue = true;\n                        break;\n                    case \"BYMONTH\":\n                        instance.months = parseArray(value, { start: 1, end: 12 });\n                        ruleValue = true;\n                        break;\n                    case \"BYDAY\":\n                        instance.weekDays = weekDays = parseWeekDayList(value);\n                        ruleValue = true;\n                        break;\n                    case \"BYWEEKNO\":\n                        instance.weeks = parseArray(value, { start: -53, end: 53 });\n                        ruleValue = true;\n                        break;\n                    case \"BYSETPOS\":\n                        instance.positions = parseArray(value, { start: -366, end: 366 });\n                        break;\n                    case \"WKST\":\n                        instance.weekStart = weekStart = WEEK_DAYS_IDX[value[0]];\n                        break;\n                }\n            }\n\n            if (instance.freq === undefined$1 || (instance.count !== undefined$1 && instance.until)) {\n                return null;\n            }\n\n            if (!instance.interval) {\n                instance.interval = 1;\n            }\n\n            if (weekStart === undefined$1) {\n                instance.weekStart = weekStart = kendo.culture().calendar.firstDay;\n            }\n\n            if (weekDays) {\n                instance.weekDays = weekDays.sort(predicate);\n            }\n\n            if (instance.positions && !ruleValue) {\n                instance.positions = null;\n            }\n\n            instance._hasRuleValue = ruleValue;\n            instance.offsets = offsets;\n\n            return instance;\n        }\n\n        function serializeDateRule(dateRule, zone) {\n            var value = dateRule.value;\n            var tzid = dateRule.tzid || \"\";\n            var length = value.length;\n            var idx = 0;\n            var val;\n\n            for (; idx < length; idx++) {\n                val = value[idx];\n                val = timezone.convert(val, tzid || zone || val.getTimezoneOffset(), \"Etc/UTC\");\n                value[idx] = kendo.toString(val, \"yyyyMMddTHHmmssZ\");\n            }\n\n            if (tzid) {\n                tzid = \";TZID=\" + tzid;\n            }\n\n            return tzid + \":\" + value.join(\",\") + \" \";\n        }\n\n        function serialize(rule, zone) {\n            var weekStart = rule.weekStart;\n            var ruleString = \"FREQ=\" + rule.freq.toUpperCase();\n            var exdates = rule.exdates || \"\";\n            var start = rule.start || \"\";\n            var end = rule.end || \"\";\n            var until = rule.until;\n\n            if (weekStart === undefined$1) {\n                weekStart = kendo.culture().calendar.firstDay;\n            }\n\n            if (rule.interval > 1) {\n                ruleString += \";INTERVAL=\" + rule.interval;\n            }\n\n            if (rule.count) {\n                ruleString += \";COUNT=\" + rule.count;\n            }\n\n            if (until) {\n                until = timezone.convert(until, zone || until.getTimezoneOffset(), \"Etc/UTC\");\n\n                ruleString += \";UNTIL=\" + kendo.toString(until, \"yyyyMMddTHHmmssZ\");\n            }\n\n            if (rule.months) {\n                ruleString += \";BYMONTH=\" + rule.months;\n            }\n\n            if (rule.weeks) {\n                ruleString += \";BYWEEKNO=\" + rule.weeks;\n            }\n\n            if (rule.yearDays) {\n                ruleString += \";BYYEARDAY=\" + rule.yearDays;\n            }\n\n            if (rule.monthDays) {\n                ruleString += \";BYMONTHDAY=\" + rule.monthDays;\n            }\n\n            if (rule.weekDays) {\n                ruleString += \";BYDAY=\" + serializeWeekDayList(rule.weekDays);\n            }\n\n            if (rule.hours) {\n                ruleString += \";BYHOUR=\" + rule.hours;\n            }\n\n            if (rule.minutes) {\n                ruleString += \";BYMINUTE=\" + rule.minutes;\n            }\n\n            if (rule.seconds) {\n                ruleString += \";BYSECOND=\" + rule.seconds;\n            }\n\n            if (rule.positions) {\n                ruleString += \";BYSETPOS=\" + rule.positions;\n            }\n\n            if (weekStart !== undefined$1) {\n                ruleString += \";WKST=\" + WEEK_DAYS[weekStart];\n            }\n\n            if (start) {\n                start = \"DTSTART\" + serializeDateRule(start, zone);\n            }\n\n            if (end) {\n                end = \"DTEND\" + serializeDateRule(end, zone);\n            }\n\n            if (exdates) {\n                exdates = \"EXDATE\" + serializeDateRule(exdates, zone);\n            }\n\n            if (start || end || exdates) {\n                ruleString = start + end + exdates + \"RRULE:\" + ruleString;\n            }\n\n            return ruleString;\n        }\n\n        kendo.recurrence = {\n            rule: {\n                parse: parseRule,\n                serialize: serialize\n            },\n            expand: expand,\n            dayInYear: dayInYear,\n            weekInYear: weekInYear,\n            weekInMonth: weekInMonth,\n            numberOfWeeks: numberOfWeeks,\n            isException: isException,\n            toExceptionString: toExceptionString\n        };\n\n        var RECURRENCE_VIEW_TEMPLATE = kendo.template(({ frequency, messages, end }) =>\n           (frequency !== \"never\" ?\n                '<div class=\"k-form-field\">' +\n                    `<label id=\"recur_interval_label\" class=\"k-label k-form-label\" for=\"recur_interval\">${encode(messages.repeatEvery)}</label>` +\n                    '<div class=\"k-form-field-wrap\">' +\n                        `<input id=\"recur_interval\" ref-recur-interval title=\"${encode(messages.repeatEvery)} ${encode(messages.interval)}\" aria-labelledby=\"recur_interval_label\">${encode(messages.interval)}` +\n                    '</div>' +\n                '</div>' : ''\n           ) +\n           (frequency === \"weekly\" ?\n                '<div class=\"k-form-field\">' +\n                    `<label class=\"k-label k-form-label\">${encode(messages.repeatOn)}</label>` +\n                    '<div class=\"k-form-field-wrap\">' +\n                        `<div class=\"k-button-group-stretched k-recur-weekday-buttons\" title=\"${encode(messages.repeatOn)}\"></div></div>` +\n                    '</div>' +\n                '</div>' : ''\n            ) +\n            (frequency === \"monthly\" ?\n                `<div class=\"k-form-field\"><label class=\"k-label k-form-label\">${encode(messages.repeatOn)}</label></div>` +\n                    '<div class=\"k-form-field-wrap\">' +\n                        '<ul class=\"k-radio-list\">' +\n                            '<li class=\"k-radio-item\">' +\n                                `<label class=\"k-radio-label\"><input class=\"k-recur-month-radio k-radio k-radio-md\" type=\"radio\" name=\"month\" value=\"monthday\" title=\"${encode(messages.repeatOn)}\" />${encode(messages.date)}:</label>` +\n                                `<input ref-recur-monthday aria-label=\"${encode(messages.date)}\" title=\"${encode(messages.date)}\" />` +\n                            '</li>' +\n                            '<li class=\"k-radio-item\">' +\n                                `<input class=\"k-recur-month-radio k-radio k-radio-md\" type=\"radio\" name=\"month\" value=\"weekday\" aria-label=\"${encode(messages.repeatOn)} ${encode(messages.day)}\" title=\"${encode(messages.repeatOn)} ${encode(messages.day)}\" />` +\n                                `<input class=\"k-recur-weekday-offset\" title=\"${encode(messages.repeatOn)}\" ${kendo.attr(\"style-width\")}=\"8em\" />` +\n                                `<input class=\"k-recur-weekday\" title=\"${encode(messages.day)}\" ${kendo.attr(\"style-width\")}=\"8em\" />` +\n                            '</li>' +\n                        '</ul>' +\n                    '</div>' +\n                '</div>' : ''\n            ) +\n           (frequency === \"yearly\" ?\n                `<div class=\"k-form-field\"><label class=\"k-label k-form-label\">${encode(messages.repeatOn)}</label>` +\n                    '<div class=\"k-form-field-wrap\">' +\n                        '<ul class=\"k-radio-list\">' +\n                            '<li class=\"k-radio-item\">' +\n                                `<input class=\"k-recur-year-radio k-radio k-radio-md\" type=\"radio\" name=\"year\" value=\"monthday\" title=\"${encode(messages.repeatOn)} ${encode(messages.month)}\" />` +\n                                `<input class=\"k-recur-month\" aria-label=\"${encode(messages.month)}\" title=\"${encode(messages.month)}\" ${kendo.attr(\"style-width\")}=\"8em\" />` +\n                                `<input ref-recur-monthday aria-label=\"${encode(messages.date)}\" title=\"${encode(messages.date)}\" />` +\n                            '</li>' +\n                            '<li class=\"k-radio-item\">' +\n                                `<input class=\"k-recur-year-radio k-radio k-radio-md\" type=\"radio\" name=\"year\" value=\"weekday\" title=\"${encode(messages.repeatOn)} ${encode(messages.day)}\" />` +\n                                `<input class=\"k-recur-weekday-offset\" title=\"${encode(messages.repeatOn)}\" ${kendo.attr(\"style-width\")}=\"8em\"/><input class=\"k-recur-weekday\" title=\"${encode(messages.day)}\" ${kendo.attr(\"style-width\")}=\"8em\"/>${encode(messages.of)}<input class=\"k-recur-month\" title=\"${encode(messages.of + messages.month)}\" ${kendo.attr(\"style-width\")}=\"8em\"/>` +\n                            '</li>' +\n                        '</ul>' +\n                    '</div>' +\n                '</div>' : ''\n           ) +\n           (frequency !== \"never\" ?\n                `<div class=\"k-form-field\"><label class=\"k-label k-form-label\">${encode(end.label)}</label>` +\n                    '<div class=\"k-form-field-wrap\">' +\n                        '<ul class=\"k-radio-list\">' +\n                            '<li class=\"k-radio-item\">' +\n                                `<label class=\"k-radio-label\"><input class=\"k-recur-end-never k-radio k-radio-md\" type=\"radio\" name=\"end\" value=\"never\" title=\"${encode(end.label)}\" />${encode(end.never)}</label>` +\n                            '</li>' +\n                            '<li class=\"k-radio-item\">' +\n                                `<label class=\"k-radio-label\"><input class=\"k-recur-end-count k-radio k-radio-md\" type=\"radio\" name=\"end\" value=\"count\" title=\"${encode(end.label)}\" />${encode(end.after)}</label>` +\n                                `<input ref-recur-count aria-label=\"${encode(end.occurrence)}\" title=\"${encode(end.occurrence)}\" />${encode(end.occurrence)}` +\n                            '</li>' +\n                            '<li class=\"k-radio-item\">' +\n                                `<label class=\"k-radio-label\"><input class=\"k-recur-end-until k-radio k-radio-md\" type=\"radio\" name=\"end\" value=\"until\" title=\"${encode(end.label)}\" />${encode(end.on)}</label>` +\n                                `<input title=\"${encode(end.on)}\" aria-label=\"${encode(end.on)}\" ref-recur-until />` +\n                            '</li>' +\n                        '</ul>' +\n                    '</div>' +\n                '</div>' : ''\n           )\n        );\n\n        var DAY_RULE = [\n            { day: 0, offset: 0 },\n            { day: 1, offset: 0 },\n            { day: 2, offset: 0 },\n            { day: 3, offset: 0 },\n            { day: 4, offset: 0 },\n            { day: 5, offset: 0 },\n            { day: 6, offset: 0 }\n        ];\n\n        var WEEKDAY_RULE = [\n            { day: 1, offset: 0 },\n            { day: 2, offset: 0 },\n            { day: 3, offset: 0 },\n            { day: 4, offset: 0 },\n            { day: 5, offset: 0 }\n        ];\n\n        var WEEKEND_RULE = [\n            { day: 0, offset: 0 },\n            { day: 6, offset: 0 }\n        ];\n\n        var BaseRecurrenceEditor = Widget.extend({\n            init: function(element, options) {\n                var start;\n                var that = this;\n                var frequencies = options && options.frequencies;\n\n                Widget.fn.init.call(that, element, options);\n\n                that.wrapper = that.element;\n\n                options = that.options;\n                options.start = start = options.start || kendoDate.today();\n\n                if (frequencies) {\n                    options.frequencies = frequencies;\n                }\n\n                if (typeof start === \"string\") {\n                    options.start = kendo.parseDate(start, \"yyyyMMddTHHmmss\");\n                }\n\n                if (options.firstWeekDay === null) {\n                    options.firstWeekDay = kendo.culture().calendar.firstDay;\n                }\n\n                that._namespace = \".\" + options.name;\n            },\n\n            options: {\n                value: \"\",\n                start: \"\",\n                timezone: \"\",\n                spinners: true,\n                firstWeekDay: null,\n                frequencies: [\n                    \"never\",\n                    \"daily\",\n                    \"weekly\",\n                    \"monthly\",\n                    \"yearly\"\n                ],\n                mobile: false,\n                messages: {\n                    repeat: \"Repeat\",\n                    recurrenceEditorTitle: \"Recurrence editor\",\n                    frequencies: {\n                        never: \"Never\",\n                        hourly: \"Hourly\",\n                        daily: \"Daily\",\n                        weekly: \"Weekly\",\n                        monthly: \"Monthly\",\n                        yearly: \"Yearly\"\n                    },\n                    hourly: {\n                        repeatEvery: \"Repeat every: \",\n                        interval: \" hour(s)\"\n                    },\n                    daily: {\n                        repeatEvery: \"Repeat every: \",\n                        interval: \" day(s)\"\n                    },\n                    weekly: {\n                        interval: \" week(s)\",\n                        repeatEvery: \"Repeat every: \",\n                        repeatOn: \"Repeat on: \"\n                    },\n                    monthly: {\n                        repeatEvery: \"Repeat every: \",\n                        repeatOn: \"Repeat on: \",\n                        interval: \" month(s)\",\n                        day: \"Day \",\n                        date: \"Date\"\n                    },\n                    yearly: {\n                        repeatEvery: \"Repeat every: \",\n                        repeatOn: \"Repeat on: \",\n                        interval: \" year(s)\",\n                        of: \" of \",\n                        month: \"month\",\n                        day: \"day\",\n                        date: \"Date\"\n                    },\n                    end: {\n                        label: \"End:\",\n                        mobileLabel: \"Ends\",\n                        never: \"Never\",\n                        after: \"After \",\n                        occurrence: \" occurrence(s)\",\n                        on: \"On \"\n                    },\n                    offsetPositions: {\n                        first: \"first\",\n                        second: \"second\",\n                        third: \"third\",\n                        fourth: \"fourth\",\n                        last: \"last\"\n                    },\n                    weekdays: {\n                        day: \"day\",\n                        weekday: \"weekday\",\n                        weekend: \"weekend day\"\n                    }\n                }\n            },\n\n            events: [\"change\"],\n\n            _initInterval: function() {\n                var that = this,\n                    input = that._container.find(\"[ref-recur-interval]\"),\n                    rule = that._value;\n\n                that._interval = input.kendoNumericTextBox({\n                        spinners: that.options.spinners,\n                        value: rule.interval || 1,\n                        decimals: 0,\n                        format: \"#\",\n                        min: 1,\n                        change: function() {\n                            rule.interval = this.value();\n                            that._trigger();\n                        }\n                    }).data(\"kendoNumericTextBox\");\n\n                    that._interval.wrapper.addClass('k-recur-interval');\n            },\n\n            _weekDayButtons: function(firstDay) {\n                var that = this,\n                    names = kendo.culture().calendar.days.names,\n                    abbreviated = kendo.culture().calendar.days.namesAbbr,\n                    repeatOn = that.options.messages.weekly.repeatOn,\n                    length = names.length,\n                    idx = 0,\n                    values = [],\n                    items = [];\n\n                for (; idx < length; idx++) {\n                    values.push(idx);\n                }\n\n                names = names.slice(firstDay).concat(names.slice(0, firstDay));\n                abbreviated = abbreviated.slice(firstDay).concat(abbreviated.slice(0, firstDay));\n                values = values.slice(firstDay).concat(values.slice(0, firstDay));\n\n                for (idx = 0; idx < length; idx++) {\n                    items.push({\n                        text: abbreviated[idx],\n                        attributes: {\n                            \"data-value\": values[idx],\n                            \"aria-label\": repeatOn + \" \" + names[idx]\n                        }\n                    });\n                }\n\n                if (that._container.find(\".k-recur-weekday-buttons\").length > 0) {\n                    that._weekDayButtonGroup = new ButtonGroup(that._container.find(\".k-recur-weekday-buttons\"), {\n                        items: items,\n                        selection: \"multiple\",\n                        select: function() {\n                            var rule = that._value,\n                                selectedDays = that._weekDayButtonGroup.current();\n\n                            rule.weekDays = selectedDays.map(function(i, day) {\n                                return {\n                                    day: Number(day.getAttribute(\"data-value\")),\n                                    offset: 0\n                                };\n                            });\n\n                            if (!that.options.mobile) {\n                                that._trigger();\n                            }\n                        }\n                    });\n                }\n            },\n\n            _weekDayRule: function(clear) {\n                var that = this;\n                var weekday = (that._weekDay.element || that._weekDay).val();\n                var offset = Number((that._weekDayOffset.element || that._weekDayOffset).val());\n                var weekDays = null;\n                var positions = null;\n\n                if (!clear) {\n                    if (weekday === \"day\") {\n                        weekDays = DAY_RULE;\n                        positions = offset;\n                    } else if (weekday === \"weekday\") {\n                        weekDays = WEEKDAY_RULE;\n                        positions = offset;\n                    } else if (weekday === \"weekend\") {\n                        weekDays = WEEKEND_RULE;\n                        positions = offset;\n                    } else {\n                        weekDays = [{\n                            offset: offset,\n                            day: Number(weekday)\n                        }];\n                    }\n                }\n\n                that._value.weekDays = weekDays;\n                that._value.positions = positions;\n            },\n\n            _weekDayView: function() {\n                var that = this;\n                var weekDays = that._value.weekDays;\n                var positions = that._value.positions;\n                var weekDayOffsetWidget = that._weekDayOffset;\n                var weekDayOffset;\n                var weekDayValue;\n                var length;\n                var method;\n\n                if (weekDays) {\n                    length = weekDays.length;\n\n                    if (positions) {\n                        if (length === 7) {\n                            weekDayValue = \"day\";\n                            weekDayOffset = positions;\n                        } else if (length === 5) {\n                            weekDayValue = \"weekday\";\n                            weekDayOffset = positions;\n                        } else if (length === 2) {\n                            weekDayValue = \"weekend\";\n                            weekDayOffset = positions;\n                        }\n                    }\n\n                    if (!weekDayValue) {\n                        weekDays = weekDays[0];\n                        weekDayValue = weekDays.day;\n                        weekDayOffset = weekDays.offset || \"\";\n                    }\n\n                    method = weekDayOffsetWidget.value ? \"value\" : \"val\";\n\n                    weekDayOffsetWidget[method](weekDayOffset);\n                    that._weekDay[method](weekDayValue);\n                }\n            },\n\n            _initWeekDay: function() {\n                var that = this, data;\n\n                var weekdayMessage = that.options.messages.weekdays;\n                var offsetMessage = that.options.messages.offsetPositions;\n\n                var weekDayInput = that._container.find(\".k-recur-weekday\");\n\n                var change = function() {\n                    that._weekDayRule();\n                    that._trigger();\n                };\n\n                if (weekDayInput[0]) {\n                    that._weekDayOffset = new DropDownList(that._container.find(\".k-recur-weekday-offset\"), {\n                        autoWidth: true,\n                        change: change,\n                        dataTextField: \"text\",\n                        dataValueField: \"value\",\n                        dataSource: [\n                            { text: offsetMessage.first, value: \"1\" },\n                            { text: offsetMessage.second, value: \"2\" },\n                            { text: offsetMessage.third, value: \"3\" },\n                            { text: offsetMessage.fourth, value: \"4\" },\n                            { text: offsetMessage.last, value: \"-1\" }\n                        ]\n                    });\n\n                    data = [\n                        { text: weekdayMessage.day, value: \"day\" },\n                        { text: weekdayMessage.weekday, value: \"weekday\" },\n                        { text: weekdayMessage.weekend, value: \"weekend\" }\n                    ];\n\n                    that._weekDay = new DropDownList(weekDayInput, {\n                        autoWidth: true,\n                        value: that.options.start.getDay(),\n                        change: change,\n                        dataTextField: \"text\",\n                        dataValueField: \"value\",\n                        dataSource: data.concat($.map(kendo.culture().calendar.days.names, function(dayName, idx) {\n                            return {\n                                text: dayName,\n                                value: idx\n                            };\n                        }))\n                    });\n\n                    that._weekDayView();\n                }\n            },\n\n            _initWeekDays: function() {\n                var that = this;\n                var rule = that._value;\n                var weekDayButtonGroup = that._weekDayButtonGroup;\n\n                if (weekDayButtonGroup && rule.weekDays && rule.weekDays.length) {\n                    var ruleDays = rule.weekDays,\n                        ruleDaysLength = ruleDays.length,\n                        selectors = [],\n                        i = 0,\n                        selectedWeekDayButtons;\n\n                    for (; i < ruleDaysLength; i++) {\n                        selectors.push(\"[data-value='\" + ruleDays[i].day + \"']\");\n                    }\n\n                    selectedWeekDayButtons = weekDayButtonGroup.element.find(selectors.join(\",\"));\n                    weekDayButtonGroup.select(selectedWeekDayButtons);\n                }\n            },\n\n            _initMonthDay: function() {\n                var that = this;\n                var rule = that._value;\n                var monthDayInput = that._container.find(\"[ref-recur-monthday]\");\n\n                if (monthDayInput[0]) {\n                    that._monthDay = new kendo.ui.NumericTextBox(monthDayInput, {\n                        spinners: that.options.spinners,\n                        min: 1,\n                        max: 31,\n                        decimals: 0,\n                        format: \"#\",\n                        value: rule.monthDays ? rule.monthDays[0] : that.options.start.getDate(),\n                        change: function() {\n                            var value = this.value();\n\n                            rule.monthDays = value ? [value] : value;\n                            that._trigger();\n                        }\n                    });\n\n                    that._monthDay.wrapper.addClass('k-recur-monthday');\n                }\n            },\n\n            _initCount: function() {\n                var that = this,\n                    input = that._container.find(\"[ref-recur-count]\"),\n                    rule = that._value;\n\n                that._count = input.kendoNumericTextBox({\n                    spinners: that.options.spinners,\n                    value: rule.count || 1,\n                    decimals: 0,\n                    format: \"#\",\n                    min: 1,\n                    change: function() {\n                        rule.count = this.value();\n                        that._trigger();\n                    }\n                }).data(\"kendoNumericTextBox\");\n\n                that._count.wrapper.addClass('k-recur-count');\n            },\n\n            _initUntil: function() {\n                var that = this,\n                    input = that._container.find(\"[ref-recur-until]\"),\n                    start = that.options.start,\n                    rule = that._value,\n                    until = rule.until,\n                    min = until && until < start ? until : start,\n                    startInput = that.wrapper.closest(\".k-scheduler-edit-form\").find(\"[name=start]:visible\"),\n                    validDateValidationMessage = kendo.format(kendo.ui.Validator.prototype.options.messages.date, that.options.messages.end.on),\n                    dateCompareValidationMessage = kendo.ui.Validator.prototype.options.messages.dateCompare,\n                    initialValue = new Date(start.getFullYear(), start.getMonth(), start.getDate(), 23, 59, 59);\n\n                input.attr(\"data-validDate-msg\", validDateValidationMessage);\n                input.attr(\"data-untilDateCompare-msg\", dateCompareValidationMessage);\n\n                if (startInput.length === 0) {\n                    startInput = that.wrapper.closest(\".k-scheduler-edit-form\").find(\"[name=start]\");\n                }\n\n                if (startInput.length > 0 && startInput.val()) {\n                    min = kendo.parseDate(startInput.val());\n\n                    if (initialValue < min) {\n                        initialValue = min;\n                    }\n                }\n\n                that._until = input.kendoDatePicker({\n                    min: min,\n                    value: until || initialValue,\n                    change: function() {\n                        var date = this.value();\n                        if (date) {\n                            rule.until = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 23, 59, 59);\n                        }\n                        that._trigger();\n                    }\n                }).data(\"kendoDatePicker\");\n\n                that._until.wrapper.addClass('k-recur-until');\n\n                if (startInput) {\n                    startInput.on(\"change\", function() {\n                        var untilEl = that._until.element,\n                            readonly = Boolean(untilEl.attr(\"readonly\")),\n                            enable = !(Boolean(untilEl.is(\"[disabled]\") || untilEl.parents(\"fieldset\").is(':disabled')));\n\n                        that._until.setOptions({\n                            min: startInput.val(),\n                            readonly,\n                            enable\n                        });\n                    });\n                }\n            },\n\n            _trigger: function() {\n                if (!this.options.mobile) {\n                    this.trigger(\"change\");\n                }\n            }\n        });\n\n        var RecurrenceEditor = BaseRecurrenceEditor.extend({\n            init: function(element, options) {\n                var that = this;\n\n                BaseRecurrenceEditor.fn.init.call(that, element, options);\n\n                that._initFrequency();\n\n                that._initContainer();\n\n                that.value(that.options.value);\n            },\n\n            options: {\n                name: \"RecurrenceEditor\"\n            },\n\n            events: [ \"change\" ],\n\n            destroy: function() {\n                var that = this;\n\n                that._frequency.destroy();\n\n                if (this._weekDayButtonGroup) {\n                    this._weekDayButtonGroup.destroy();\n                }\n\n                that._container.find(\"input[type=radio],input[type=checkbox]\").off(CLICK + that._namespace);\n\n                kendo.destroy(that._container);\n\n                BaseRecurrenceEditor.fn.destroy.call(that);\n            },\n\n            value: function(value) {\n                var that = this;\n                var timezone = that.options.timezone;\n                var freq, freqButton;\n\n                if (value === undefined$1) {\n                    if (!that._value.freq) {\n                        return \"\";\n                    }\n\n                    return serialize(that._value, timezone);\n                }\n\n                that._value = parseRule(value, timezone) || {};\n\n                freq = that._value.freq;\n\n                if (freq) {\n                    freqButton = that._frequency.element.find(\"[data-value='\" + freq + \"']\");\n                    that._frequency.select(freqButton);\n                } else {\n                    that._frequency.select(0);\n                }\n\n                that._initView(that._frequency.current().data(\"value\"));\n            },\n\n            _initContainer: function() {\n                var element = this.element,\n                    container = $('<div class=\"k-recur-view\" />'),\n                    editContainer = element.parent(\".k-edit-field\");\n\n                if (editContainer[0]) {\n                    container.insertAfter(editContainer);\n                } else {\n                    element.append(container);\n                }\n\n                this._container = container;\n            },\n\n            _initFrequency: function() {\n                var that = this,\n                    options = that.options,\n                    frequencies = options.frequencies,\n                    messages = options.messages.frequencies,\n                    buttonGroupElement = $('<div class=\"k-button-group-stretched k-flex-1\"/>').attr({ title: options.messages.recurrenceEditorTitle }),\n                    frequency;\n\n                frequencies = $.map(frequencies, function(frequency) {\n                    return {\n                        text: messages[frequency],\n                        attributes: { \"data-value\": frequency, \"aria-label\": options.messages.repeat + messages[frequency] }\n                    };\n                });\n\n                frequency = frequencies[0];\n                if (frequency && frequency.attributes && frequency.attributes[\"data-value\"] === \"never\") {\n                    frequency.attributes[\"data-value\"] = \"\";\n                }\n\n                that.element.append(buttonGroupElement);\n                that._frequency = new ButtonGroup(buttonGroupElement, {\n                    items: frequencies,\n                    select: function() {\n                        that._value = {};\n                        that._initView(that._frequency.current().data(\"value\"));\n                        that.trigger(\"change\");\n                    }\n                });\n            },\n\n            _initView: function(frequency) {\n                var that = this;\n                var rule = that._value;\n                var options = that.options;\n                var recurrenceViewHtml;\n\n                var data = {\n                     frequency: frequency || \"never\",\n                     firstWeekDay: options.firstWeekDay,\n                     messages: options.messages[frequency],\n                     end: options.messages.end\n                };\n\n                if (that._weekDayButtonGroup) {\n                    that._weekDayButtonGroup.destroy();\n                    that._container.find(\".k-recur-weekday-buttons\").empty();\n                    that._weekDayButtonGroup = null;\n                }\n\n                kendo.destroy(that._container);\n\n                recurrenceViewHtml = $(RECURRENCE_VIEW_TEMPLATE(data));\n                kendo.applyStylesFromKendoAttributes(recurrenceViewHtml, [\"width\"]);\n\n                that._container.html(recurrenceViewHtml);\n\n                if (!frequency) {\n                    that._value = {};\n                    return;\n                }\n\n                rule.freq = frequency;\n\n                if (frequency === \"weekly\" && !rule.weekDays) {\n                    rule.weekDays = [{\n                        day: options.start.getDay(),\n                        offset: 0\n                    }];\n                }\n\n                that._weekDayButtons(options.firstWeekDay);\n\n                that._initInterval();\n                that._initWeekDays();\n                that._initMonthDay();\n                that._initWeekDay();\n                that._initMonth();\n                that._initCount();\n                that._initUntil();\n\n                that._period();\n                that._end();\n            },\n\n            _initMonth: function() {\n                var that = this;\n                var rule = that._value;\n                var month = rule.months || [that.options.start.getMonth() + 1];\n                var monthInputs = that._container.find(\".k-recur-month\");\n                var options;\n\n                if (monthInputs[0]) {\n                    options = {\n                        autoWidth: true,\n                        change: function() {\n                            rule.months = [Number(this.value())];\n                            that.trigger(\"change\");\n                        },\n                        dataTextField: \"text\",\n                        dataValueField: \"value\",\n                        dataSource: $.map(kendo.culture().calendar.months.names, function(monthName, idx) {\n                            return {\n                                text: monthName,\n                                value: idx + 1\n                            };\n                        })\n                    };\n\n                    that._month1 = new DropDownList(monthInputs[0], options);\n                    that._month2 = new DropDownList(monthInputs[1], options);\n\n                    if (month) {\n                        month = month[0];\n                        that._month1.value(month);\n                        that._month2.value(month);\n                    }\n                }\n\n            },\n\n            _end: function() {\n                var that = this;\n                var rule = that._value;\n                var container = that._container;\n                var namespace = that._namespace;\n                var click = function(e) {\n                    that._toggleEnd(e.currentTarget.value);\n                    that.trigger(\"change\");\n                };\n                var endRule;\n\n                that._buttonNever = container.find(\".k-recur-end-never\").on(CLICK + namespace, click);\n                that._buttonCount = container.find(\".k-recur-end-count\").on(CLICK + namespace, click);\n                that._buttonUntil = container.find(\".k-recur-end-until\").on(CLICK + namespace, click);\n\n                if (rule.count) {\n                    endRule = \"count\";\n                } else if (rule.until) {\n                    endRule = \"until\";\n                }\n\n                that._toggleEnd(endRule);\n            },\n\n            _period: function() {\n                var that = this;\n                var rule = that._value;\n                var monthly = rule.freq === \"monthly\";\n\n                var toggleRule = monthly ? that._toggleMonthDay : that._toggleYear;\n\n                var selector = \".k-recur-\" + (monthly ? \"month\" : \"year\") + \"-radio\";\n                var radioButtons = that._container.find(selector);\n\n                if (!monthly && rule.freq !== \"yearly\") {\n                    return;\n                }\n\n                radioButtons.on(CLICK + that._namespace, function(e) {\n                    toggleRule.call(that, e.currentTarget.value);\n                    that.trigger(\"change\");\n                });\n\n                that._buttonMonthDay = radioButtons.eq(0);\n                that._buttonWeekDay = radioButtons.eq(1);\n\n                toggleRule.call(that, rule.weekDays ? \"weekday\" : \"monthday\");\n            },\n\n            _toggleEnd: function(endRule) {\n                var that = this;\n                var count, until;\n                var enableCount, enableUntil;\n\n                if (endRule === \"count\") {\n                    that._buttonCount.prop(\"checked\", true);\n\n                    enableCount = true;\n                    enableUntil = false;\n\n                    count = that._count.value();\n                    until = null;\n                } else if (endRule === \"until\") {\n                    that._buttonUntil.prop(\"checked\", true);\n\n                    enableCount = false;\n                    enableUntil = true;\n\n                    count = null;\n                    until = that._until.value();\n                } else {\n                    that._buttonNever.prop(\"checked\", true);\n\n                    enableCount = enableUntil = false;\n                    count = until = null;\n                }\n\n                if (that._count) {\n                    that._count.enable(enableCount);\n                }\n\n                if (that._until) {\n                    that._until.enable(enableUntil);\n                }\n\n                that._value.count = count;\n                that._value.until = until;\n            },\n\n            _toggleMonthDay: function(monthRule) {\n                var that = this;\n                var enableMonthDay = false;\n                var enableWeekDay = true;\n                var clear = false;\n                var monthDays;\n\n                if (monthRule === \"monthday\") {\n                    that._buttonMonthDay.prop(\"checked\", true);\n\n                    monthDays = [that._monthDay.value()];\n\n                    enableMonthDay = true;\n                    enableWeekDay = false;\n                    clear = true;\n                } else {\n                    that._buttonWeekDay.prop(\"checked\", true);\n                    monthDays = null;\n                }\n\n                that._weekDay.enable(enableWeekDay);\n                that._weekDayOffset.enable(enableWeekDay);\n                that._monthDay.enable(enableMonthDay);\n\n                that._value.monthDays = monthDays;\n\n                that._weekDayRule(clear);\n            },\n\n            _toggleYear: function(yearRule) {\n                var that = this;\n                var enableMonth1 = false;\n                var enableMonth2 = true;\n                var month;\n\n                if (yearRule === \"monthday\") {\n                    enableMonth1 = true;\n                    enableMonth2 = false;\n\n                    month = that._month1.value();\n                } else {\n                    month = that._month2.value();\n                }\n\n                that._month1.enable(enableMonth1);\n                that._month2.enable(enableMonth2);\n\n                that._value.months = [month];\n                that._toggleMonthDay(yearRule);\n            }\n        });\n\n        ui.plugin(RecurrenceEditor);\n\n\n        var RECURRENCE_HEADER_TEMPLATE = kendo.template(({ headerTitle }) =>\n            '<div data-role=\"content\">' +\n                '<ul class=\"k-listgroup k-listgroup-flush\">' +\n                    '<li class=\"k-item k-listgroup-item\">' +\n                        '<label class=\"k-label k-listgroup-form-row\">' +\n                            `<span class=\"k-item-title k-listgroup-form-field-label\">${headerTitle}</span>` +\n                            '<div class=\"k-recur-pattern k-listgroup-form-field-wrapper\"></div>' +\n                        '</label>' +\n                    '</li>' +\n                    '<li class=\"k-item k-listgroup-item k-recur-view\"></li>' +\n                '</ul>' +\n            '</div>'\n        );\n\n        var RECURRENCE_REPEAT_PATTERN_TEMPLATE = kendo.template(({ frequency, messages }) =>\n            (frequency !== \"never\" ?\n                '<label class=\"k-label k-listgroup-form-row\">' +\n                    `<span class=\"k-item-title k-listgroup-form-field-label\">${encode(messages.repeatEvery)}</span>` +\n                    '<div class=\"k-recur-editor-wrap k-listgroup-form-field-wrapper\">' +\n                        '<input ref-recur-interval type=\"number\" pattern=\"\\\\d*\"/>' +\n                        (messages.interval.length ? `<span class=\"k-recur-editor-text\">${encode(messages.interval)}</span>` : '') +\n                    '</div>' +\n                '</label>' : ''\n            ) +\n            (frequency === \"weekly\" ?\n                '<ul class=\"k-recur-items-wrap k-listgroup k-listgroup-flush\">' +\n                    '<li class=\"k-item k-listgroup-item k-no-click\">' +\n                        '<label class=\"k-label k-listgroup-form-row\">' +\n                            `<span class=\"k-item-title k-listgroup-form-field-label\">${encode(messages.repeatOn)}</span>` +\n                        '</label>' +\n                    '</li>' +\n                    `<div class=\"k-button-group-stretched k-recur-weekday-buttons\" title=\"${encode(messages.repeatOn)}\">` +\n                '</ul>' : '') +\n            (frequency === \"monthly\" ?\n                '<ul class=\"k-recur-items-wrap k-listgroup k-listgroup-flush\">' +\n                    '<li class=\"k-item k-listgroup-item\">' +\n                        '<label class=\"k-label k-listgroup-form-row\">' +\n                            `<span class=\"k-item-title k-listgroup-form-field-label\">${encode(messages.repeatBy)}</span>` +\n                            '<div class=\"k-repeat-rule k-listgroup-form-field-wrapper\"></div>' +\n                        '</label>' +\n                    '</li>' +\n                    `<li class=\"k-monthday-view k-item k-listgroup-item\" ${kendo.attr(\"style-display\")}=\"none\">` +\n                        '<label class=\"k-label k-listgroup-form-row\">' +\n                            `<span class=\"k-item-title k-listgroup-form-field-label\">${encode(messages.day)}</span>` +\n                            `<div class=\"k-listgroup-form-field-wrapper\"><input ref-recur-monthday type=\"number\" aria-label=\"${encode(messages.date)}\" title=\"${encode(messages.day)}\" pattern=\"\\\\d*\"/></div>` +\n                        '</label>' +\n                    '</li>' +\n                    `<li class=\"k-weekday-view k-item k-listgroup-item\" ${kendo.attr(\"style-display\")}=\"none\">` +\n                        '<label class=\"k-label k-listgroup-form-row\">' +\n                            `<span class=\"k-item-title k-listgroup-form-field-label\">${encode(messages.every)}</span>` +\n                            `<div class=\"k-listgroup-form-field-wrapper\"><select class=\"k-recur-weekday-offset\" title=\"${encode(messages.every)}\"></select></div>` +\n                        '</label>' +\n                    '</li>' +\n                    `<li class=\"k-weekday-view k-item k-listgroup-item\" ${kendo.attr(\"style-display\")}=\"none\">` +\n                        '<label class=\"k-label k-listgroup-form-row\">' +\n                            `<span class=\"k-item-title k-listgroup-form-field-label\">${encode(messages.day)}</span>` +\n                            `<div class=\"k-listgroup-form-field-wrapper\"><select class=\"k-recur-weekday\" title=\"${encode(messages.day)}\"></select></div>` +\n                        '</label>' +\n                    '</li>' +\n                '</ul>' : '') +\n            (frequency === \"yearly\" ?\n                '<ul class=\"k-recur-items-wrap k-listgroup k-listgroup-flush\">' +\n                    '<li class=\"k-item k-listgroup-item\">' +\n                        '<label class=\"k-label k-listgroup-form-row\">' +\n                            `<span class=\"k-item-title k-listgroup-form-field-label\">${encode(messages.repeatBy)}</span>` +\n                            '<div class=\"k-repeat-rule k-listgroup-form-field-wrapper\"></div>' +\n                        '</label>' +\n                    '</li>' +\n                    `<li class=\"k-monthday-view k-item k-listgroup-item\" ${kendo.attr(\"style-display\")}=\"none\">` +\n                        '<label class=\"k-label k-listgroup-form-row\">' +\n                            `<span class=\"k-item-title k-listgroup-form-field-label\">${encode(messages.day)}</span>` +\n                            `<div class=\"k-listgroup-form-field-wrapper\"><input ref-recur-monthday type=\"number\" aria-label=\"${encode(messages.date)}\" title=\"${encode(messages.day)}\" pattern=\"\\\\d*\"/></div>` +\n                        '</label>' +\n                    '</li>' +\n                    `<li class=\"k-weekday-view k-item k-listgroup-item\" ${kendo.attr(\"style-display\")}=\"none\">` +\n                        '<label class=\"k-label k-listgroup-form-row\">' +\n                            `<span class=\"k-item-title k-listgroup-form-field-label\">${encode(messages.every)}</span>` +\n                            `<div class=\"k-listgroup-form-field-wrapper\"><select class=\"k-recur-weekday-offset\" title=\"${encode(messages.every)}\"></select></div>` +\n                        '</label>' +\n                    '</li>' +\n                    `<li class=\"k-weekday-view k-item k-listgroup-item\" ${kendo.attr(\"style-display\")}=\"none\">` +\n                        '<label class=\"k-label k-listgroup-form-row\">' +\n                            `<span class=\"k-item-title k-listgroup-form-field-label\">${encode(messages.day)}</span>` +\n                            `<div class=\"k-listgroup-form-field-wrapper\"><select class=\"k-recur-weekday\" title=\"${encode(messages.day)}\"></select></div>` +\n                        '</label>' +\n                    '</li>' +\n                    '<li class=\"k-item k-item k-listgroup-item\">' +\n                        '<label class=\"k-label k-listgroup-form-row\">' +\n                            `<span class=\"k-item-title k-listgroup-form-field-label\">${encode(messages.month)}</span>` +\n                            `<div class=\"k-listgroup-form-field-wrapper\"><select class=\"k-recur-month\" title=\"${encode(messages.month)}\"></select></div>` +\n                        '</label>' +\n                    '</li>' +\n               '</ul>' : '')\n        );\n\n        var RECURRENCE_END_PATTERN_TEMPLATE = kendo.template(({ endPattern, messages }) => {\n            if (endPattern === \"count\") {\n                return '<label class=\"k-label k-listgroup-form-row\">' +\n                    `<span class=\"k-item-title k-listgroup-form-field-label\">${encode(messages.after)}</span>` +\n                    `<div class=\"k-listgroup-form-field-wrapper\"><input ref-recur-count aria-label=\"${encode(messages.occurrence)}\" type=\"number\" pattern=\"\\\\d*\" /></div>` +\n                '</label>';\n            } else if (endPattern === \"until\") {\n                return '<label class=\"k-label k-listgroup-form-row\">' +\n                    `<span class=\"k-item-title k-listgroup-form-field-label\">${encode(messages.on)}</span>` +\n                    `<div class=\"k-listgroup-form-field-wrapper\"><input type=\"date\" aria-label=\"${encode(messages.on)}\" ref-recur-until /></div>` +\n                '</label>';\n            }\n        });\n\n        var RECURRENCE_GROUP_BUTTON_TEMPLATE = kendo.template(({ dataSource, value }) =>\n            '<select class=\"k-scheduler-select\">' +\n                dataSource.map((item) => `<option value=\"${item.value}\" ${value === item.value ? 'selected' : ''}>${encode(item.text)}</option>`).join('') +\n            '</select>'\n        );\n\n        var MobileRecurrenceEditor = BaseRecurrenceEditor.extend({\n            init: function(element, options) {\n                var that = this;\n\n                BaseRecurrenceEditor.fn.init.call(that, element, options);\n\n                options = that.options;\n\n                that._optionTemplate = kendo.template(({ value, text }) => `<option value=\"${encode(value)}\">${encode(text)}</option>`);\n\n                that.value(options.value);\n\n                that._pane = options.pane || that.wrapper.closest(\"[data-role=pane]\").data(\"kendoPane\");\n\n                that._initRepeatButton();\n\n                that._initParentRepeatEnd();\n\n                that._defaultValue = that._value;\n            },\n\n            options: {\n                name: \"MobileRecurrenceEditor\",\n                animations: {\n                    left: \"slide\",\n                    right: \"slide:right\"\n                },\n                mobile: true,\n                messages: {\n                    cancel: \"Cancel\",\n                    update: \"Save\",\n                    endTitle: \"Repeat ends\",\n                    repeatTitle: \"Repeat pattern\",\n                    headerTitle: \"Repeat event\",\n                    end: {\n                        patterns: {\n                            never: \"Never\",\n                            after: \"After...\",\n                            on: \"On...\"\n                        },\n                        never: \"Never\",\n                        after: \"End repeat after\",\n                        on: \"End repeat on\"\n                    },\n                    daily: {\n                        interval: \"\"\n                    },\n                    hourly: {\n                        interval: \"\"\n                    },\n                    weekly: {\n                        interval: \"\"\n                    },\n                    monthly: {\n                        interval: \"\",\n                        repeatBy: \"Repeat by: \",\n                        dayOfMonth: \"Day of the month\",\n                        dayOfWeek: \"Day of the week\",\n                        repeatEvery: \"Repeat every\",\n                        every: \"Every\",\n                        day: \"Day \"\n                    },\n                    yearly: {\n                        interval: \"\",\n                        repeatBy: \"Repeat by: \",\n                        dayOfMonth: \"Day of the month\",\n                        dayOfWeek: \"Day of the week\",\n                        repeatEvery: \"Repeat every: \",\n                        every: \"Every\",\n                        month: \"Month\",\n                        day: \"Day\"\n                    }\n                }\n            },\n\n            events: [ \"change\" ],\n\n            value: function(value) {\n                var that = this;\n                var timezone = that.options.timezone;\n\n                if (value === undefined$1) {\n                    if (!that._value.freq) {\n                        return \"\";\n                    }\n\n                    return serialize(that._value, timezone);\n                }\n\n                that._value = parseRule(value, timezone) || {};\n            },\n\n            destroy: function() {\n                this._destroyView();\n\n                kendo.destroy(this._endFields);\n\n                this.element.off(CLICK + this._namespace);\n\n                BaseRecurrenceEditor.fn.destroy.call(this);\n            },\n\n            _initInterval: function() {\n                var that = this;\n                var rule = that._value;\n\n                that._container.find(\"[ref-recur-interval]\")\n                    .val(that._value.interval || 1)\n                    .on(CHANGE + that._namespace, function(e) {\n                        rule.interval = e.target.value;\n                        that._trigger();\n                    });\n\n            },\n\n            _initRepeatButton: function() {\n                var that = this;\n                var freq = that.options.messages.frequencies[this._value.freq || \"never\"];\n\n                that._chevronButton = $(kendo.ui.icon(\"chevron-right\"));\n                that._repeatValue = $('<span class=\"\">' + freq + '</span>');\n\n                that.element.append(that._repeatValue).append(that._chevronButton);\n\n                that.element.parents(\"li.k-item\").on(CLICK + that._namespace, function(e) {\n                    e.preventDefault();\n                    that._createView(\"repeat\");\n                    that._pane.navigate(that._view, that.options.animations.left);\n                });\n            },\n\n            _endLiItem: function() {\n                var that = this;\n                return '<li class=\"k-item k-listgroup-item\"><label class=\"k-label k-listgroup-form-row\"><span class=\"k-item-title k-listgroup-form-field-label\">' + that.options.messages.end.mobileLabel + '</span></label></li>';\n            },\n\n            _initParentRepeatEnd: function() {\n                var that = this;\n\n                var endLabelField = $(that._endLiItem()).insertAfter(that.element.parents(\"li.k-item\"));\n\n                var endEditField = $('<div class=\"k-scheduler-recur-end-wrap k-listgroup-form-field-wrapper\"><span class=\"k-scheduler-recur-end\"></span></div>')\n                    .appendTo(endLabelField.find(\".k-label\"));\n\n                endLabelField.on(CLICK + that._namespace, function(e) {\n                    e.preventDefault();\n                    that._navigateToView(\"repeat\");\n                });\n\n                that._endParentLabelField = endLabelField.toggle(!!that._value.freq);\n                that._endParentEndButton = endEditField.find(\".k-scheduler-recur-end\").text(that._endText());\n            },\n\n            _initRepeatEnd: function() {\n                var that = this;\n\n                var endLabelField = $(that._endLiItem()).insertAfter(that._container);\n\n                var endEditField = $(`<div class=\"k-scheduler-recur-end-wrap k-listgroup-form-field-wrapper\"><span class=\"k-scheduler-recur-end\"></span>${kendo.ui.icon(\"chevron-right\")}</div>`)\n                    .appendTo(endLabelField.find(\".k-label\"));\n\n                endLabelField.on(CLICK + that._namespace, function(e) {\n                    e.preventDefault();\n                    that._navigateToView(\"end\");\n                });\n\n                that._endLabelField = endLabelField.toggleClass(\"k-disabled\", !that._value.freq);\n                that._endButton = endEditField.find(\".k-scheduler-recur-end\").text(that._endText());\n            },\n\n            _navigateToView: function(viewName) {\n                var that = this;\n                that._createView(viewName);\n                that._pane.navigate(that._view, that.options.animations.left);\n            },\n\n            _endText: function() {\n                var rule = this._value;\n                var messages = this.options.messages.end;\n\n                var text = messages.never;\n\n                if (rule.count) {\n                    text = kendo.format(\"{0} {1}\", messages.after, rule.count);\n                } else if (rule.until) {\n                    text = kendo.format(\"{0} {1:d}\", messages.on, rule.until);\n                }\n\n                return text;\n            },\n\n            _initFrequency: function() {\n                var that = this;\n                var frequencyMessages = that.options.messages.frequencies;\n\n                var html = RECURRENCE_GROUP_BUTTON_TEMPLATE({\n                    dataSource: $.map(this.options.frequencies, function(frequency) {\n                        return {\n                            text: frequencyMessages[frequency],\n                            value: frequency !== \"never\" ? frequency : \"\"\n                        };\n                    }),\n                    value: that._value.freq || \"\",\n                    ns: kendo.ns\n                });\n\n                that._view.element\n                    .find(\".k-recur-pattern\")\n                    .append(html);\n\n                that._view.element.find(\".k-scheduler-select\")\n                    .on(CHANGE + that._namespace, function(e) {\n                        var value = e.target.value;\n                        that._value = { freq: value };\n                        that._defaultValue = $.extend({}, that._value);\n                        that._initRepeatView();\n                        that._endButton.text(that._endText());\n                        that._endParentEndButton.text(that._endText());\n                    });\n            },\n\n            _initEndNavigation: function() {\n                var that = this;\n                var endMessages = that.options.messages.end.patterns;\n                var rule = that._value;\n                var value = \"\";\n\n                if (rule.count) {\n                    value = \"count\";\n                } else if (rule.until) {\n                    value = \"until\";\n                }\n\n                var html = RECURRENCE_GROUP_BUTTON_TEMPLATE({\n                    dataSource: [\n                        { text: endMessages.never, value: \"\" },\n                        { text: endMessages.after, value: \"count\" },\n                        { text: endMessages.on, value: \"until\" }\n                    ],\n                    value: value,\n                    ns: kendo.ns\n                });\n\n                that._view.element\n                    .find(\".k-recur-pattern\")\n                    .append(html);\n\n                that._view.element.find(\".k-scheduler-select\")\n                    .on(CHANGE + that._namespace, function(e) {\n                        var value = e.target.value;\n                        var count = null;\n                        var until = null;\n\n                        that._initEndView(value);\n\n                        if (that._count.length) {\n                            count = that._count.val();\n                            until = null;\n                        } else if (that._until.length) {\n                            count = null;\n                            until = that._until.val ? kendo.parseDate(that._until.val(), \"yyyy-MM-dd\") : that._until.value();\n                        }\n\n                        rule.count = count;\n                        rule.until = until;\n                    });\n            },\n\n            _createView: function(viewType) {\n                var that = this;\n                var options = that.options;\n                var messages = options.messages;\n                var headerTitle = messages[viewType === \"repeat\" ? \"repeatTitle\" : \"endTitle\"];\n\n                var html = '<div data-role=\"view\" class=\"k-popup-edit-form k-scheduler-edit-form\" id=\"recurrence\">' +\n                           '<div data-role=\"header\" class=\"k-appbar k-appbar-primary\">' +\n                                kendo.html.renderButton(`<button class=\"k-header-cancel k-scheduler-cancel\" title=\"${messages.cancel}\" aria-label=\"${messages.cancel}\"></button>`, {\n                                    fillMode: \"flat\",\n                                    icon: \"chevron-left\"\n                                }) +\n                                '<span class=\"k-spacer\"></span>' +\n                                `<span>${encode(messages.headerTitle)}</span>` +\n                                '<span class=\"k-spacer\"></span>' +\n                                kendo.html.renderButton(`<button class=\"k-header-done k-scheduler-update\" title=\"${messages.update}\" aria-label=\"${messages.update}\"></button>`, {\n                                    fillMode: \"flat\",\n                                    icon: \"check\"\n                                }) +\n                           '</div>';\n\n                var returnViewId = that._pane.view().id;\n\n                that._view = that._pane.append(html + RECURRENCE_HEADER_TEMPLATE({ headerTitle: headerTitle }));\n\n                that._view.element.on(CLICK + that._namespace, \".k-scheduler-cancel, .k-scheduler-update\", function(e) {\n                    e.preventDefault();\n                    e.stopPropagation();\n\n                    if ($(this).hasClass(\"k-scheduler-update\")) {\n                        that.trigger(\"change\");\n                        that._defaultValue = $.extend({}, that._value);\n                    } else {\n                        that._value = that._defaultValue;\n                    }\n\n                    var frequency = that._value.freq;\n\n                    that._endParentEndButton.text(that._endText());\n                    that._endParentLabelField.toggle(!!frequency && frequency !== \"never\");\n                    that._endButton.text(that._endText());\n\n                    that._repeatValue.text(messages.frequencies[frequency || \"never\"]);\n\n                    that._pane.one(\"viewShow\", function() {\n                        that._destroyView();\n                    });\n\n                    that._pane.navigate(returnViewId, that.options.animations.right);\n                });\n\n                that._container = that._view.element.find(\".k-recur-view\");\n\n                if (viewType === \"repeat\") {\n                    that._initFrequency();\n                    that._initRepeatView();\n                    that._initRepeatEnd();\n                } else {\n                    that._initEndNavigation();\n                    that._initEndView();\n                }\n            },\n\n            _destroyView: function() {\n                if (this._view) {\n\n                    this._view.destroy();\n                    this._view.element.remove();\n                    this._container = null;\n                }\n\n\n                this._view = null;\n            },\n\n            _initRepeatView: function() {\n                var that = this;\n                var frequency = that._value.freq || \"never\";\n\n                var data = {\n                     frequency: frequency,\n                     firstWeekDay: that.options.firstWeekDay,\n                     messages: that.options.messages[frequency]\n                };\n\n                var html = RECURRENCE_REPEAT_PATTERN_TEMPLATE(data);\n                var $html = $(html);\n                kendo.applyStylesFromKendoAttributes($html, [\"display\"]);\n\n                var container = that._container = that._container || this._pane.view().content.find(\"li.k-recur-view\");\n                var rule = that._value;\n\n                if (that._endLabelField) {\n                    that._endLabelField.toggleClass(\"k-disabled\", frequency === \"never\");\n                }\n\n                kendo.destroy(container);\n                container.html($html);\n\n                if (!html) {\n                    that._value = {};\n                    container.hide();\n                    return;\n                } else {\n                    container.show();\n                }\n\n                if (frequency === \"weekly\" && !rule.weekDays) {\n                     rule.weekDays = [{\n                        day: that.options.start.getDay(),\n                        offset: 0\n                     }];\n                }\n\n                that._weekDayButtons(that.options.firstWeekDay);\n\n                that._initInterval();\n                that._initMonthDay();\n                that._initWeekDays();\n                that._initWeekDay();\n                that._initMonth();\n\n                that._period();\n            },\n\n            _initMonthDay: function() {\n                var that = this;\n                var rule = that._value;\n                var monthDayInput = that._monthDay = that._container.find(\"[ref-recur-monthday]\");\n\n                monthDayInput.attr({\n                    min: 1,\n                    max: 31\n                })\n                .val(rule.monthDays ? rule.monthDays[0] : that.options.start.getDate())\n                .on(CHANGE + that._namespace, function(e) {\n                    rule.count = e.target.value;\n                    that._trigger();\n                });\n            },\n\n            _initCount: function() {\n                var that = this,\n                    input = that._count = that._container.find(\"[ref-recur-count]\"),\n                    rule = that._value;\n\n                input.val(rule.count || 1)\n                    .on(CHANGE + that._namespace, function(ev) {\n                        rule.count = ev.target.value;\n                        that._trigger();\n                    });\n\n                input.parent().addClass('k-recur-count');\n            },\n\n            _initEndView: function(endPattern) {\n                var that = this;\n                var rule = that._value;\n\n                if (endPattern === undefined$1) {\n                    if (rule.count) {\n                        endPattern = \"count\";\n                    } else if (rule.until) {\n                        endPattern = \"until\";\n                    }\n                }\n\n                var data = {\n                     endPattern: endPattern,\n                     messages: that.options.messages.end\n                };\n\n                kendo.destroy(that._container);\n                that._container.html(RECURRENCE_END_PATTERN_TEMPLATE(data));\n\n                that._initCount();\n                that._initUntil();\n            },\n\n            _initWeekDay: function() {\n                var that = this, data;\n\n                var weekdayMessage = that.options.messages.weekdays;\n                var offsetMessage = that.options.messages.offsetPositions;\n\n                var weekDaySelect = that._container.find(\".k-recur-weekday\");\n\n                var change = function() {\n                    that._weekDayRule();\n                    that.trigger(\"change\");\n                };\n\n                if (weekDaySelect[0]) {\n                    that._weekDayOffset = that._container.find(\".k-recur-weekday-offset\")\n                                              .html(that._options([\n                                                { text: offsetMessage.first, value: \"1\" },\n                                                { text: offsetMessage.second, value: \"2\" },\n                                                { text: offsetMessage.third, value: \"3\" },\n                                                { text: offsetMessage.fourth, value: \"4\" },\n                                                { text: offsetMessage.last, value: \"-1\" }\n                                              ]))\n                                              .on(\"change\", change);\n\n                    data = [\n                        { text: weekdayMessage.day, value: \"day\" },\n                        { text: weekdayMessage.weekday, value: \"weekday\" },\n                        { text: weekdayMessage.weekend, value: \"weekend\" }\n                    ];\n\n                    data = data.concat($.map(kendo.culture().calendar.days.names, function(dayName, idx) {\n                        return {\n                            text: dayName,\n                            value: idx\n                        };\n                    }));\n\n                    that._weekDay = weekDaySelect.html(that._options(data))\n                                                 .on(\"change\", change)\n                                                 .val(that.options.start.getDay());\n\n                    that._weekDayView();\n                }\n            },\n\n            _initMonth: function() {\n                var that = this;\n                var rule = that._value;\n                var start = that.options.start;\n                var month = rule.months || [start.getMonth() + 1];\n                var monthSelect = that._container.find(\".k-recur-month\");\n                var monthNames = kendo.culture().calendar.months.names;\n\n                if (monthSelect[0]) {\n                    var data = $.map(monthNames, function(monthName, idx) {\n                        return {\n                            text: monthName,\n                            value: idx + 1\n                        };\n                    });\n\n                    monthSelect.html(that._options(data))\n                               .on(\"change\", function() {\n                                   rule.months = [Number(this.value)];\n                               });\n\n                    that._monthSelect = monthSelect;\n\n                    if (month) {\n                        monthSelect.val(month[0]);\n                    }\n                }\n\n            },\n\n            _period: function() {\n                var that = this;\n                var rule = that._value;\n                var container = that._container;\n                var messages = that.options.messages[rule.freq];\n                var repeatRuleGroupButton = container.find(\".k-repeat-rule\");\n                var weekDayView = container.find(\".k-weekday-view\");\n                var monthDayView = container.find(\".k-monthday-view\");\n\n                if (repeatRuleGroupButton[0]) {\n                    var currentValue = rule.weekDays ? \"weekday\" : \"monthday\";\n\n                    var html = RECURRENCE_GROUP_BUTTON_TEMPLATE({\n                        value: currentValue,\n                        dataSource: [\n                            { text: messages.dayOfMonth, value: \"monthday\" },\n                            { text: messages.dayOfWeek, value: \"weekday\" }\n                        ],\n                        ns: kendo.ns\n                    });\n\n                    var init = function(val) {\n                        var weekDayName = that._weekDay.val();\n                        var weekDayOffset = that._weekDayOffset.val();\n                        var monthDay = that._monthDay.val();\n                        var month = that._monthSelect ? that._monthSelect.val() : null;\n\n                        if (val === \"monthday\") {\n                            rule.weekDays = null;\n                            rule.monthDays = monthDay ? [monthDay] : monthDay;\n                            rule.months = month ? [Number(month)] : month;\n\n                            weekDayView.hide();\n                            monthDayView.show();\n                        } else {\n                            rule.monthDays = null;\n                            rule.months = month ? [Number(month)] : month;\n\n                            rule.weekDays = [{\n                                offset: Number(weekDayOffset),\n                                day: Number(weekDayName)\n                            }];\n\n                            weekDayView.show();\n                            monthDayView.hide();\n                        }\n                    };\n\n                    repeatRuleGroupButton\n                        .append(html);\n\n                    repeatRuleGroupButton.find(\".k-scheduler-select\")\n                        .on(CHANGE + that._namespace, function(e) {\n                            init(e.target.value);\n                        });\n\n                    init(currentValue);\n                }\n            },\n\n            _initUntil: function() {\n                var that = this;\n                var input = that._container.find(\"[ref-recur-until]\");\n                var start = that.options.start;\n                var rule = that._value;\n                var until = rule.until;\n                var min = until && until < start ? until : start;\n                var validDateValidationMessage = kendo.format(kendo.ui.Validator.prototype.options.messages.date, that.options.messages.end.on);\n                var dateCompareValidationMessage = kendo.ui.Validator.prototype.options.messages.dateCompare;\n\n                input.attr(\"data-validDate-msg\", validDateValidationMessage);\n                input.attr(\"data-untilDateCompare-msg\", dateCompareValidationMessage);\n\n                if (kendo.support.input.date) {\n                    that._until = input.attr(\"min\", kendo.toString(min, \"yyyy-MM-dd\"))\n                                       .val(kendo.toString(until || start, \"yyyy-MM-dd\"))\n                                       .on(\"change\", function() {\n                                            var date = kendo.parseDate(this.value, \"yyyy-MM-dd\");\n                                            if (date) {\n                                                rule.until = date;\n                                            }\n                                            that._trigger();\n                                       });\n                    that._until.parent().addClass('k-recur-until');\n                } else {\n                    that._until = input.kendoDatePicker({\n                        min: min,\n                        value: until || start,\n                        change: function() {\n                            var date = this.value();\n                            if (date) {\n                                rule.until = date;\n                            }\n                            that._trigger();\n                        }\n                    }).data(\"kendoDatePicker\");\n\n                    that._until.wrapper.addClass('k-recur-until');\n                }\n            },\n\n            _options: function(data, optionLabel) {\n                var idx = 0;\n                var html = \"\";\n                var length = data.length;\n                var template = this._optionTemplate;\n\n                if (optionLabel) {\n                    html += template({ value: \"\", text: optionLabel });\n                }\n\n                for (; idx < length; idx++) {\n                    html += template(data[idx]);\n                }\n\n                return html;\n            }\n        });\n\n        ui.plugin(MobileRecurrenceEditor);\n\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    exports.__meta__ = __meta__;\n    exports.default = kendo$1;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}