{"version":3,"sources":["raw-js/kendo.loaderContainer.chunk.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendo","_globals","LoaderContainerChunk","this","$","jQuery","__meta__","id","name","category","description","depends","hidden","chunk","u","toggle","options","that","wrapper","loader","find","length","defaultOptions","message","overlayColor","themeColor","extend","loaderOverlay","html","renderLoaderContainer","wrapperWidth","width","mask","wrapperClone","clone","removeAttr","addClass","append","element","insertBefore","destroy","remove"],"mappings":";;;;;;;;CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,oBAAAC,OAAAF,EAAAC,QAAAE,QAAA,kBACA,mBAAAC,QAAAA,OAAAC,IAAAD,OAAA,CAAA,UAAA,kBAAAJ,GACAA,IAAAD,EAAA,oBAAAO,WAAAA,WAAAP,GAAAQ,MAAAC,MAAAT,EAAAS,OAAA,CAAA,EAAAT,EAAAS,MAAAC,SAAAV,EAAAS,MAAAC,UAAA,CAAA,EAAAV,EAAAS,MAAAC,SAAAC,qBAAA,CAAA,GACA,CAJA,CAIAC,MAAA,SAAAV,GAaA,IAAAW,EAAAJ,MAAAK,OAwCAZ,EAAAa,SApDA,CACAC,GAAA,wBACAC,KAAA,uBACAC,SAAA,MACAC,YAAA,oCACAC,QAAA,CAAA,QACAC,QAAA,EACAC,OAAA,GA8CApB,EAAAqB,EAvCA,SAAAC,EAAAC,GACA,IAAAC,EAAAd,KACAe,EAAAD,EAAAC,QAEA,GAAAH,GAAAE,EAAAE,QACA,IAAAF,EAAAC,QAAAE,KAAA,uBAAAC,OAAA,CAEA,IAAAC,EAAA,CACAC,QAAA,aACAC,aAAA,OACAC,WAAA,WAEAH,EAAAlB,EAAAsB,OAAA,CAAA,EAAAJ,EAAAN,GAEA,MAAAW,EAAA3B,MAAA4B,KAAAC,sBAAAzB,EAAA,eAAAkB,GACAQ,EAAAb,EAAAC,QAAAa,QAEAC,EAAA5B,EAAA,0CACA6B,EAAAhB,EAAAC,QAAAgB,QAAAC,WAAA,MAAAC,SAAA,0BAAAL,MAAAD,GACAE,EAAAK,OAAAJ,GACAD,EAAAK,OAAAV,GACAV,EAAAe,KAAAA,EAEAd,EAAAmB,OAAAL,GAEAf,EAAAgB,aAAAD,EAAAZ,KAAA,gBACAH,EAAAU,cAAAK,EAAAZ,KAAA,uBAEAH,EAAAE,OAAAmB,QAAAC,aAAAP,EAAAZ,KAAA,6BACA,OAEAH,EAAAU,cAAAN,SACArB,MAAAwC,QAAAvB,EAAAU,eACAV,EAAAe,KAAAS,SAGA,CAKA","file":"kendo.loaderContainer.chunk.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('kendo.core.js')) :\n    typeof define === 'function' && define.amd ? define(['exports', 'kendo.core'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.kendo = global.kendo || {}, global.kendo._globals = global.kendo._globals || {}, global.kendo._globals.LoaderContainerChunk = {})));\n})(this, (function (exports) {\n    const __meta__ = {\n        id: \"loaderContainer.chunk\",\n        name: \"LoaderContainerChunk\",\n        category: \"web\",\n        description: \"A reusable outputed chunk of code\",\n        depends: ['core'],\n        hidden: true,\n        chunk: true\n    };\n\n\n\n    let $ = kendo.jQuery;\n\n    function useLoaderContainer(toggle, options) {\n        var that = this,\n            wrapper = that.wrapper;\n\n        if (toggle && that.loader) {\n            if (!that.wrapper.find(\".k-loader-container\").length) {\n\n                var defaultOptions = {\n                    message: \"Loading...\",\n                    overlayColor: \"dark\",\n                    themeColor: \"primary\",\n                };\n                defaultOptions = $.extend({}, defaultOptions, options);\n\n                const loaderOverlay = kendo.html.renderLoaderContainer($(\"<div></div>\"), defaultOptions);\n                const wrapperWidth = that.wrapper.width();\n\n                const mask = $(\"<div class='k-loading-pdf-mask'></div>\");\n                const wrapperClone = that.wrapper.clone().removeAttr(\"id\").addClass('k-loading-pdf-progress').width(wrapperWidth);\n                mask.append(wrapperClone);\n                mask.append(loaderOverlay);\n                that.mask = mask;\n\n                wrapper.append(mask);\n\n                that.wrapperClone = mask.find(\".k-pivotgrid\");\n                that.loaderOverlay = mask.find(\".k-loader-container\");\n\n                that.loader.element.insertBefore(mask.find(\".k-loader-container-label\"));\n            }\n        } else {\n            if (that.loaderOverlay.length) {\n                kendo.destroy(that.loaderOverlay);\n                that.mask.remove();\n            }\n        }\n    }\n\n    exports.__meta__ = __meta__;\n    exports.u = useLoaderContainer;\n\n}));\n"]}