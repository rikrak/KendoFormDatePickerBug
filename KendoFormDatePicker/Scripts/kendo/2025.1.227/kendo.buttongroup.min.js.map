{"version":3,"sources":["raw-js/kendo.buttongroup.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendo","_globals","Buttongroup","this","$","window","ui","Widget","ToggleButton","Button","keys","NS","KBUTTON","SELECTED","DISABLED","SELECT","ARIA_DISABLED","DOT","NONE","SINGLE","MULTIPLE","FOCUS","ButtonGroup","extend","init","element","options","that","fn","call","wrapper","selectedIndices","_buttons","_renderItems","items","fillMode","addClass","EMPTY","attr","_enable","enable","enabled","forEach","b","selection","select","index","_attachEvents","events","name","preventKeyNav","size","rounded","themeColor","badge","item","value","badgeEl","button","isNaN","find","getKendoToggleButton","getKendoButton","validValue","_badge","text","htmlEncode","destroy","empty","remove","current","off","each","i","el","component","toggleClass","focused","hasClass","is","removeAttr","trigger","nodeType","length","idx","toggle","_toggleIndex","_resetIndexes","_addButton","command","togglable","selected","btn","bind","_select","on","_keyDown","e","buttonGroup","focusableItems","focusedElement","currentIndex","isRtl","support","keyCode","LEFT","RIGHT","eq","preventDefault","_decorateButtons","buttons","groupOptions","children","image","disabled","attrValue","icon","push","encoded","url","sanitizeLink","html","attributes","appendTo","indices","target","indexOf","splice","plugin","jQuery","kendo$1","__meta__","id","category","description","depends","default","Object","defineProperty"],"mappings":"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","file":"kendo.buttongroup.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('kendo.core.js'), require('kendo.togglebutton.js'), require('kendo.button.js')) :\n    typeof define === 'function' && define.amd ? define(['exports', 'kendo.core', 'kendo.togglebutton', 'kendo.button'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.kendo = global.kendo || {}, global.kendo._globals = global.kendo._globals || {}, global.kendo._globals.Buttongroup = {})));\n})(this, (function (exports) {\n    const __meta__ = {\n        id: \"buttongroup\",\n        name: \"ButtonGroup\",\n        category: \"web\",\n        description: \"The Kendo ButtonGroup widget is a linear set of grouped buttons.\",\n        depends: [ \"core\", \"togglebutton\", \"button\" ]\n    };\n\n    (function($, undefined$1) {\n        var kendo = window.kendo;\n        var ui = kendo.ui;\n        var Widget = ui.Widget;\n        var ToggleButton = ui.ToggleButton;\n        var Button = ui.Button;\n        var keys = kendo.keys;\n        var NS = \".kendoButtonGroup\";\n        var KBUTTONGROUP = \"k-button-group k-button-group-\";\n        var KBUTTON = \"k-button\";\n        var SELECTED = \"k-selected\";\n        var DISABLED = \"k-disabled\";\n        var KFOCUS = \"k-focus\";\n        var SELECT = \"select\";\n        var KEYDOWN = \"keydown\";\n        var ARIA_DISABLED = \"aria-disabled\";\n        var EMPTY = \" \";\n        var DOT = \".\";\n        var NONE = \"none\";\n        var SINGLE = \"single\";\n        var MULTIPLE = \"multiple\";\n        var TOGGLE = \"toggle\";\n        var FOCUS = \"focus\";\n\n        var ButtonGroup = Widget.extend({\n            init: function(element, options) {\n                var that = this;\n\n                Widget.fn.init.call(that, element, options);\n\n                that.wrapper = that.element;\n\n                that.selectedIndices = [];\n\n                that._buttons = that._renderItems(that.options.items);\n                const fillMode = options && options.fillMode ? options.fillMode : 'solid';\n                that.element\n                    .addClass(EMPTY + KBUTTONGROUP + fillMode)\n                    .attr(\"role\", \"group\");\n\n                that._enable = true;\n\n                if (!that.options.enable || !that.options.enabled) {\n                    that._enable = false;\n                    that.element\n                            .attr(ARIA_DISABLED, true)\n                            .addClass(DISABLED);\n\n                    that._buttons.forEach((b) => {\n                        b.enable(false);\n                    });\n                }\n\n                if (that.options.selection !== NONE) {\n                    that.select(that.options.index);\n                }\n\n                that._attachEvents();\n            },\n\n            events: [\n                SELECT\n            ],\n\n            options: {\n                name: \"ButtonGroup\",\n                selection: SINGLE,\n                index: -1,\n                enable: true,\n                enabled: true,\n                preventKeyNav: false,\n                size: \"medium\",\n                rounded: \"medium\",\n                fillMode: \"solid\",\n                themeColor: \"base\"\n            },\n\n            badge: function(item, value) {\n                var that = this,\n                    element = that.element,\n                    button = !isNaN(item) ? that._buttons[item] : element.find(item).getKendoToggleButton() || element.find(item).getKendoButton(),\n                    validValue = value || value === 0,\n                    badge, badgeEl;\n\n                if (!button) {\n                    return;\n                }\n\n                badge = button.badge;\n\n                if (!badge && validValue) {\n                    button._badge({ text: kendo.htmlEncode(value) });\n                    return kendo.htmlEncode(value);\n                }\n\n                if (validValue) {\n                    badge.text(kendo.htmlEncode(value));\n                } else if (value === false) {\n                    button.badge = null;\n                    badgeEl = badge.element;\n                    badge.destroy();\n                    badgeEl.empty().remove();\n                    return;\n                }\n\n                return badge ? badge.text() : null;\n            },\n\n            current: function() {\n                return this.element.find(DOT + SELECTED);\n            },\n\n            destroy: function() {\n                var that = this;\n\n                that.element.off(NS);\n\n                that.element.find(DOT + KBUTTON).each(function(i, el) {\n                    var component = $(el).getKendoToggleButton() || $(el).getKendoButton();\n\n                    if (component) {\n                        component.destroy();\n                    }\n                });\n\n                Widget.fn.destroy.call(that);\n            },\n\n            enable: function(enable) {\n                if (typeof enable == \"undefined\") {\n                    enable = true;\n                }\n\n                this.element\n                        .attr(ARIA_DISABLED, !enable)\n                        .toggleClass(DISABLED, !enable);\n\n                this._buttons.forEach((b) => {\n                    var focused = b.element.hasClass(KFOCUS) || b.element.is(\":focus\");\n\n                    b.enable(enable);\n\n                    if (focused) {\n                        b.element.removeAttr(\"disabled\").addClass(\"k-focus\").trigger(\"focus\");\n                    }\n                });\n\n                this._enable = this.options.enable = enable;\n            },\n\n            select: function(el) {\n                var that = this,\n                    button,\n                    index = -1;\n\n                if (this.options.selection === NONE || el === undefined$1 || el === -1) {\n                    return;\n                }\n\n                if (typeof el === \"number\") {\n                    index = el;\n                } else if (el.nodeType) {\n                    el = $(el);\n                    index = el.index();\n                } else {\n                    index = el.index();\n                }\n\n                button = that._buttons[index];\n\n                if (!button) {\n                    return;\n                }\n\n                if (that.options.selection === MULTIPLE) {\n                    if (el.length > 1) {\n                        el.each((i, element) => {\n                            var idx = $(element).index();\n\n                            that._buttons[idx].toggle();\n                            that._toggleIndex(idx);\n                        });\n                    } else {\n                        that._buttons[index].toggle();\n                        that._toggleIndex(index);\n                    }\n                } else {\n                    that._resetIndexes(index);\n                }\n            },\n\n            _addButton: function(el, options) {\n                if (this.options.selection === NONE || (options.command && !options.togglable)) {\n                    delete options.selected;\n\n                    return new Button(el, options);\n                } else {\n                    var btn = new ToggleButton(el, options);\n\n                    btn.bind(TOGGLE, this._select.bind(this, el));\n\n                    return btn;\n                }\n            },\n\n            _attachEvents: function() {\n                if (!this.options.preventKeyNav) {\n                    this.element.on(KEYDOWN + NS, this._keyDown.bind(this));\n                }\n            },\n\n            _keyDown: function(e) {\n                var that = this,\n                    buttonGroup = $(that.element),\n                    focusableItems = buttonGroup.find(DOT + KBUTTON),\n                    focusedElement = buttonGroup.find(\":focus\"),\n                    currentIndex = focusableItems.index(focusedElement),\n                    isRtl = kendo.support.isRtl(that.element),\n                    itemToFocus;\n\n                if ((e.keyCode === keys.LEFT && !isRtl) || (e.keyCode === keys.RIGHT && isRtl)) {\n                    itemToFocus = currentIndex === 0 ? focusableItems.eq(focusableItems.length - 1) : $(focusableItems[currentIndex - 1]);\n                    itemToFocus.trigger(FOCUS);\n                    e.preventDefault();\n                } else if ((e.keyCode === keys.LEFT && isRtl) || (e.keyCode === keys.RIGHT && !isRtl)) {\n                    itemToFocus = currentIndex + 1 === focusableItems.length ? focusableItems.eq(0) : $(focusableItems[currentIndex + 1]);\n                    itemToFocus.trigger(FOCUS);\n                    e.preventDefault();\n                }\n            },\n\n            _decorateButtons: function(buttons) {\n                if (buttons.length) {\n                    $(buttons[0].element).addClass(\"k-group-start\");\n                    $(buttons[buttons.length - 1].element).addClass(\"k-group-end\");\n                }\n            },\n\n            _renderItems: function(items) {\n                var that = this,\n                    groupOptions = that.options,\n                    children = that.element.children(),\n                    buttons = [];\n\n                if (children.length > 0) {\n                    children.each(function(index) {\n                        var el = $(this),\n                            image = el.find(\"img\").addClass(\"k-image\"),\n                            disabled = el.is(\"[disabled]\") || el.hasClass(DISABLED),\n                            options = {\n                                badge: kendo.attrValue(el, \"badge\"),\n                                icon: !image[0] ? kendo.attrValue(el, \"icon\") : null,\n                                disabled: disabled,\n                                selected: !disabled ? el.is(DOT + SELECTED) : false,\n                                size: groupOptions.size,\n                                rounded: groupOptions.rounded,\n                                fillMode: groupOptions.fillMode,\n                                themeColor: groupOptions.themeColor\n                            };\n\n                        buttons.push(that._addButton(el, options));\n\n                        if (options.selected) {\n                            that.selectedIndices.push(index);\n                        }\n                    });\n                }\n\n                if (!items) {\n                    that._decorateButtons(buttons);\n                    return buttons;\n                }\n\n                items.forEach(function(item, index) {\n                    var text = item.text ? item.encoded === false ? item.text : kendo.htmlEncode(item.text) : \"\",\n                        el = item.url ? $(\"<a href=\" + kendo.sanitizeLink(item.url) + \">\") : $(\"<button>\");\n\n                    el.html(text);\n\n                    if (item.attributes) {\n                        el.attr(item.attributes);\n                    }\n\n                    item = $.extend({}, item, {\n                        size: groupOptions.size,\n                        rounded: groupOptions.rounded,\n                        fillMode: groupOptions.fillMode,\n                        themeColor: groupOptions.themeColor\n                    });\n\n                    el.appendTo(that.element);\n                    buttons.push(that._addButton(el, item));\n\n                    if (item.selected) {\n                        that.selectedIndices.push(index);\n                    }\n                });\n\n                that._decorateButtons(buttons);\n\n                return buttons;\n            },\n\n            _resetIndexes: function(index) {\n                this.selectedIndices = [];\n                this._buttons.forEach((b) => {\n                    b.toggle(false);\n                });\n\n                this._buttons[index].toggle(true);\n                this.selectedIndices.push(index);\n            },\n\n            _select: function(button) {\n                var selection = this.options.selection,\n                    index = button.index();\n\n                if (!this._enable || button.is(DOT + DISABLED)) {\n                    return;\n                }\n\n                if (selection === MULTIPLE) {\n                    this._toggleIndex(index);\n                } else if (selection === SINGLE) {\n                    this._resetIndexes(index);\n                }\n\n                this.trigger(SELECT, { indices: this.selectedIndices, target: button });\n            },\n\n            _toggleIndex: function(index) {\n                if (this.selectedIndices.indexOf(index) === -1) {\n                    this.selectedIndices.push(index);\n                } else {\n                    this.selectedIndices.splice(this.selectedIndices.indexOf(index), 1);\n                }\n            }\n        });\n\n        ui.plugin(ButtonGroup);\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    exports.__meta__ = __meta__;\n    exports.default = kendo$1;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}