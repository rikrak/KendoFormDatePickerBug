{"version":3,"sources":["raw-js/kendo.gantt.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendo","_globals","Gantt","this","$","undefined$1","window","keys","supportsMedia","mobileOS","support","Widget","ui","encode","htmlEncode","ObservableObject","data","ObservableArray","Query","isArray","Array","isFunction","extend","isPlainObject","outerWidth","_outerWidth","outerHeight","_outerHeight","NS","TABINDEX","STRING","DOT","VIEWS_DROPDOWN_TEMPLATE","label","styles","views","viewsDropdown","viewsDropdownDefaults","Object","map","view","title","join","ADD_ACTIONS","text","ganttStyles","wrapper","plannedTasks","rowHeight","content","listWrapper","list","timelineWrapper","timeline","splitBar","splitter","popupWrapper","popupList","resizeHandle","icon","item","line","buttonDelete","buttonCancel","buttonSave","buttonToggle","buttonDefaults","primary","hovered","selected","focused","focusedCell","gridHeader","gridHeaderWrap","gridContent","tasks","popup","form","editForm","formContainer","resourcesFormContainer","message","buttonsContainer","button","editField","editLabel","resourcesField","toolbar","headerWrapper","footerWrapper","viewsWrapper","iconPlus","iconPdf","iconToggle","viewButton","link","pdfButton","appendButton","selector","uid","attr","focusTable","table","direct","parents","scrollPositions","parentsUntil","filter","index","element","getComputedStyles","overflow","add","each","parent","scrollTop","setActive","e","focus","init","options","events","dataSource","fn","call","_events","_wrapper","_resources","length","_timeline","_processDefaults","_toolbar","_footer","_splitter","_adjustDimensions","_preventRefresh","_selectedViewName","_dataSource","_assignments","_list","_dependencies","_scrollable","_dataBind","_attachEvents","_createEditor","notify","_showWatermarkOverlay","name","autoBind","navigatable","selectable","editable","resizable","columnResizeHandleWidth","columns","dependencies","resources","assignments","taskTemplate","tooltip","visible","messages","save","cancel","destroy","deleteTaskConfirmation","deleteDependencyConfirmation","deleteTaskWindowTitle","deleteDependencyWindowTitle","selectView","day","week","month","year","start","end","actions","append","addChild","insertBefore","insertAfter","pdf","toggle","editor","editorTitle","resourcesEditorTitle","plannedStart","plannedEnd","percentComplete","assignButton","resourcesHeader","unitsHeader","addNew","percentCompleteHint","remove","actualStart","actualEnd","parentOptionLabel","general","predecessors","successors","other","dependencyType","switchText","offsetTooltipAdvanced","offsetTooltipDelay","seconds","minutes","hours","days","showWorkHours","showWorkDays","workDayStart","Date","workDayEnd","workWeekStart","workWeekEnd","hourSpan","snap","height","listWidth","showPlannedTasks","select","value","find","_selectionUpdate","clearSelection","unbind","_refreshHandler","_progressHandler","_errorHandler","_dependencyRefreshHandler","_dependencyErrorHandler","getKendoToolBar","footer","_editor","_resourceEditorWindow","_resizeDraggable","layout","_getGanttSplitter","off","_mediaQuery","removeListener","_mediaQueryHandler","_resizeHandler","setOptions","newOptions","deepExtend","selectedView","isSettings","type","empty","_setEvents","resize","bind","on","matches","kendoSplitter","orientation","panes","collapsible","scrollable","size","getKendoSplitter","width","addClass","appendTo","css","treelistWrapper","_viewClickHandler","target","trigger","preventDefault","_togglePane","that","treelist","contentSelector","is","removeClass","refresh","_resize","ns","viewsButtons","toolbarStyles","actionsMessages","defaults","menuButtons","m","attributes","class","click","_addClickHandler","open","_openAddClickHandler","saveAsPDF","showText","switchLabel","template","component","componentOptions","checked","change","_togglePlannedTasks","unchecked","viewsDdl","togglable","group","viewsGroup","current","toLowerCase","push","values","t","buttons","_viewsButtons","defaultCommands","_processTools","items","commands","tools","spacerPresent","create","c","splitbar","toolbarEl","_suppressResize","hide","show","viewsDropdownSelector","toolsOptions","prepend","kendoToolBar","defaultTools","parentMessages","matchMedia","addListener","val","toggleSwitch","direction","animation","effects","toolbarHeight","footerHeight","totalHeight","totalWidth","treeListVisible","splitBarWidth","treeListWidth","timelineWidth","children","_scrollTo","action","scrollTarget","id","closest","get","scrollIntoView","_addTask","orderId","task","_createNewModel","firstSlot","_timeSlots","set","_createTask","dataItem","taskParent","_getListEditable","update","reorder","mode","move","reorderable","clickMoveClick","_getListOptions","filterable","columnMenu","field","_attachResourceEditor","column","i","_resourcePopupEditor","_attachListEvents","oldIndex","newIndex","oldWidth","newWidth","_navigatable","model","container","cell","_preventItemChange","closeCell","key","updatedValues","previousTask","updateDuration","duration","updatePlannedDuration","plannedDuration","hasOwnProperty","getTime","isCurrentInHeader","currentIndex","rowIndex","updateInfo","hasChanges","cancelChanges","_updateAssignments","Math","max","cellIndex","_requestStart","sync","then","_tabPressed","tbody","td","eq","_setCurrent","sender","_updatePristineForModel","expanded","position","parentId","source","sort","dir","_updateTask","selection","listElement","listOptions","GanttList","prefix","edit","navigate","trimOptions","GanttTimeline","viewName","replace","viewsEl","getKendoButtonGroup","getByUid","resizeStart","dependency","predecessorId","predecessor","successorId","successor","_createDependency","currentUid","editTask","removeTask","summary","removeDependency","_error","GanttDataSource","refreshDependencies","GanttDependencyDataSource","dataTextField","dataColorField","dataFormatField","DataSource","_assignmentsRefreshHandler","dataTaskIdField","dataResourceIdField","dataValueField","gantt","PopupEditor","_createResourceEditor","cancelTask","saveTask","updateDependencies","buttonsEl","dialog","popupStyles","dialogEl","format","kendoButton","themeColor","updateModel","close","kendoWindow","modal","draggable","deactivate","center","unitsValidation","step","min","assignmentsModel","schema","resourceTextField","fields","Units","validation","_resourceEditor","ResourceEditor","r","range","_render","taskTree","_renderDependencies","date","_scrollToDate","_modelFromElement","setDataSource","fetch","setDependenciesDataSource","assignment","resource","taskId","resourceId","hasMatch","operator","toArray","_updateAssignment","splice","_removeAssignment","shift","j","newLength","_createAssignment","taskCopy","toJSON","_editTask","difference","hasResourceChanges","k","updated","u","some","concat","getDifference","dirty","_syncDataSource","_updateDependency","created","d","_preventDependencyRefresh","destroyed","resourceValueField","_taskConfirm","_removeTask","insert","_scrollToUid","resourceValue","_dependencyConfirm","_removeDependency","_removeTaskDependencies","_removeTaskAssignments","callback","_confirm","confirmation","showDialog","_progress","cachedUid","scrollToUid","cachedIndex","_selected","_assignResources","_renderTree","_current","assigments","applyTaskResource","setter","wrapTask","resourcedId","valueFormat","formatedValue","toString","color","_wrapResourceData","result","taskAssignments","valuePerResource","progress","headerSelector","timelineHeader","timelineContent","treeListHeader","treeListContent","scrollLeft","delta","wheelDeltaY","currentTarget","one","headerTable","contentTable","tables","isInput","ctrlKey","_focusTimeout","setTimeout","focusedIndex","keyCode","focusSequence","contains","F10","first","TAB","shiftKey","hasClass","last","DELETE","selectedTask","deleteAction","tagName","_viewByIndex","promises","when","apply","done","_adjustHeight","_renderCurrentTime","toggleClass","_setPlanned","PDFMixin","_drawPDF","listTableWidth","listTableHeight","gridHeaderHeight","timelineTableWidth","clone","_drawPDFShadow","avoidLinks","plugin","jQuery","kendo$1","__meta__","category","description","depends","default","defineProperty"],"mappings":"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","file":"kendo.gantt.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('kendo.data.js'), require('kendo.resizable.js'), require('kendo.switch.js'), require('kendo.gantt.data.js'), require('kendo.gantt.editors.js'), require('kendo.gantt.list.js'), require('kendo.gantt.timeline.js'), require('kendo.splitter.js'), require('kendo.pdf.js'), require('kendo.toolbar.js'), require('kendo.html.button.js')) :\n    typeof define === 'function' && define.amd ? define(['exports', 'kendo.data', 'kendo.resizable', 'kendo.switch', 'kendo.gantt.data', 'kendo.gantt.editors', 'kendo.gantt.list', 'kendo.gantt.timeline', 'kendo.splitter', 'kendo.pdf', 'kendo.toolbar', 'kendo.html.button'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.kendo = global.kendo || {}, global.kendo._globals = global.kendo._globals || {}, global.kendo._globals.Gantt = {})));\n})(this, (function (exports) {\n    const __meta__ = {\n        id: \"gantt\",\n        name: \"Gantt\",\n        category: \"web\",\n        description: \"The Gantt component.\",\n        depends: [ \"data\", \"resizable\", \"switch\", \"gantt.data\", \"gantt.editors\", \"gantt.list\", \"gantt.timeline\", \"pdf\", \"toolbar\", \"html.button\" ]\n    };\n    (function($, undefined$1) {\n\n        var kendo = window.kendo,\n            keys = kendo.keys,\n            supportsMedia = \"matchMedia\" in window,\n            mobileOS = kendo.support.mobileOS,\n            Widget = kendo.ui.Widget,\n            encode = kendo.htmlEncode,\n            ObservableObject = kendo.data.ObservableObject,\n            ObservableArray = kendo.data.ObservableArray,\n            Query = kendo.data.Query,\n            isArray = Array.isArray,\n            isFunction = kendo.isFunction,\n            extend = $.extend,\n            isPlainObject = $.isPlainObject,\n            outerWidth = kendo._outerWidth,\n            outerHeight = kendo._outerHeight,\n            defaultIndicatorWidth = 3,\n\n            NS = \".kendoGantt\",\n            PERCENTAGE_FORMAT = \"p0\",\n            TABINDEX = \"tabIndex\",\n            STRING = \"string\",\n            DOT = \".\",\n            TASK_DELETE_CONFIRM = \"Are you sure you want to delete this task?\",\n            DEPENDENCY_DELETE_CONFIRM = \"Are you sure you want to delete this dependency?\",\n            VIEWS_DROPDOWN_TEMPLATE = ({ label, styles, views }) => `<select aria-label=\"${label}\" class=\"k-dropdown k-picker k-dropdown-list ${styles.viewsDropdown} ${styles.viewsDropdownDefaults}\">` +\n                `${Object.keys(views).map(view => '<option value=\"' + view + '\">' + kendo.htmlEncode(views[view].title) + '</option>').join(\"\")}` +\n            '</select>',\n            MIN_SCREEN = \"(max-width: 480px)\",\n            ADD_ACTIONS = [{\n                data: \"add\",\n                text: \"addChild\"\n            },\n            {\n                data: \"insert-before\",\n                text: \"insertBefore\"\n            },\n            {\n                data: \"insert-after\",\n                text: \"insertAfter\"\n            }];\n\n        var ganttStyles = {\n            wrapper: \"k-gantt\",\n            plannedTasks: \"k-gantt-planned\",\n            rowHeight: \"k-gantt-rowheight\",\n            content: \"k-gantt-content\",\n            listWrapper: \"k-gantt-treelist\",\n            list: \"k-gantt-treelist\",\n            timelineWrapper: \"k-gantt-timeline-pane\",\n            timeline: \"k-gantt-timeline-pane\",\n            splitBar: \"k-splitbar\",\n            splitter: \"k-splitter\",\n            popupWrapper: \"k-list-container\",\n            popupList: \"k-list k-reset\",\n            resizeHandle: \"k-resize-handle\",\n            icon: \"k-icon\",\n            item: \"k-item\",\n            line: \"k-gantt-line\",\n            buttonDelete: \"k-gantt-delete\",\n            buttonCancel: \"k-gantt-cancel\",\n            buttonSave: \"k-gantt-update\",\n            buttonToggle: \"k-gantt-toggle\",\n            buttonDefaults: \"k-button-md k-rounded-md k-button-solid\",\n            primary: \"k-button-solid-primary\",\n            hovered: \"k-hover\",\n            selected: \"k-selected\",\n            focused: \"k-focus\",\n            focusedCell: \"k-focus\",\n            gridHeader: \"k-grid-header\",\n            gridHeaderWrap: \"k-grid-header-wrap\",\n            gridContent: \"k-grid-content\",\n            tasks: \"k-gantt-tasks\",\n            popup: {\n                form: \"k-popup-edit-form\",\n                editForm: \"k-gantt-edit-form\",\n                formContainer: \"k-edit-form-container\",\n                resourcesFormContainer: \"k-resources-form-container\",\n                message: \"k-popup-message\",\n                buttonsContainer: \"k-edit-buttons\",\n                button: \"k-button\",\n                editField: \"k-edit-field\",\n                editLabel: \"k-edit-label\",\n                resourcesField: \"k-gantt-resources\"\n            },\n            toolbar: {\n                headerWrapper: \"k-gantt-header k-gantt-toolbar\",\n                footerWrapper: \"k-gantt-footer k-gantt-toolbar\",\n                toolbar: \"k-gantt-toolbar\",\n                views: \"k-gantt-views\",\n                viewsWrapper: \"k-gantt-views-wrapper\",\n                viewsDropdown: \"k-views-dropdown\",\n                viewsDropdownDefaults: \"k-picker-solid k-rounded-md\",\n                button: \"k-button\",\n                buttonToggle: \"k-gantt-toggle\",\n                buttonDefaults: \"k-button-md k-rounded-md k-button-solid\",\n                iconPlus: \"plus\",\n                iconPdf: \"file-pdf\",\n                iconToggle: \"layout-1-by-4\",\n                viewButton: \"k-view\",\n                link: \"k-link\",\n                pdfButton: \"k-gantt-pdf\",\n                appendButton: \"k-gantt-create\"\n            }\n        };\n\n        function selector(uid) {\n            return \"[\" + kendo.attr(\"uid\") + (uid ? \"='\" + uid + \"']\" : \"]\");\n        }\n\n        function trimOptions(options) {\n            delete options.name;\n            delete options.prefix;\n\n            delete options.remove;\n            delete options.edit;\n            delete options.add;\n            delete options.navigate;\n\n            return options;\n        }\n\n        function getDifference(updated, current) {\n            return updated.filter(u => !current.some(c => c.id === u.id && c.value === u.value))\n            .concat(current.filter(c => !updated.some(u => u.id === c.id && c.value === u.value)));\n        }\n\n        function focusTable(table, direct) {\n            var wrapper = table.parents('[' + kendo.attr(\"role\") + '=\"gantt\"]');\n            var scrollPositions = [];\n            var parents = scrollableParents(wrapper);\n\n            table.attr(TABINDEX, 0);\n\n            if (direct) {\n                parents.each(function(index, parent) {\n                    scrollPositions[index] = $(parent).scrollTop();\n                });\n            }\n\n            try {\n                //The setActive method does not cause the document to scroll to the active object in the current page\n                table[0].setActive();\n            } catch (e) {\n                table[0].focus();\n            }\n\n            if (direct) {\n                parents.each(function(index, parent) {\n                    $(parent).scrollTop(scrollPositions[index]);\n                });\n            }\n        }\n\n        function scrollableParents(element) {\n            return $(element).parentsUntil(\"body\")\n                    .filter(function(index, element) {\n                        var computedStyle = kendo.getComputedStyles(element, [\"overflow\"]);\n                        return computedStyle.overflow != \"visible\";\n                    })\n                    .add(window);\n        }\n\n        var Gantt = Widget.extend({\n            init: function(element, options, events) {\n                if (isArray(options)) {\n                    options = { dataSource: options };\n                }\n\n                Widget.fn.init.call(this, element, options);\n\n                if (events) {\n                    this._events = events;\n                }\n\n                this._wrapper();\n\n                this._resources();\n\n                if (!this.options.views || !this.options.views.length) {\n                    this.options.views = [\"day\", \"week\", \"month\"];\n                }\n\n                this._timeline();\n\n                this._processDefaults();\n                this._toolbar();\n                this._footer();\n                this._splitter();\n\n                this._adjustDimensions();\n\n                // Prevent extra refresh from setting the view\n                this._preventRefresh = true;\n\n                this.view(this.timeline._selectedViewName);\n\n                this._preventRefresh = false;\n\n                this._dataSource();\n\n                this._assignments();\n\n                this._list();\n\n                this._dependencies();\n\n                this._scrollable();\n\n                this._dataBind();\n\n                this._attachEvents();\n\n                this._createEditor();\n\n                kendo.notify(this);\n\n                if (this._showWatermarkOverlay) {\n                    this._showWatermarkOverlay(this.wrapper[0]);\n                }\n            },\n\n            events: [\n                \"dataBinding\",\n                \"dataBound\",\n                \"add\",\n                \"edit\",\n                \"remove\",\n                \"cancel\",\n                \"save\",\n                \"change\",\n                \"navigate\",\n                \"moveStart\",\n                \"move\",\n                \"moveEnd\",\n                \"resizeStart\",\n                \"resize\",\n                \"resizeEnd\",\n                \"columnHide\",\n                \"columnReorder\",\n                \"columnResize\",\n                \"columnShow\",\n                \"togglePlannedTasks\"\n            ],\n\n            options: {\n                name: \"Gantt\",\n                autoBind: true,\n                navigatable: true,\n                selectable: true,\n                editable: true,\n                resizable: false,\n                columnResizeHandleWidth: defaultIndicatorWidth,\n                columns: [],\n                views: [],\n                dataSource: {},\n                dependencies: {},\n                resources: {},\n                assignments: {},\n                taskTemplate: null,\n                tooltip: {\n                    visible: true\n                },\n                messages: {\n                    save: \"Save\",\n                    cancel: \"Cancel\",\n                    destroy: \"Delete\",\n                    deleteTaskConfirmation: TASK_DELETE_CONFIRM,\n                    deleteDependencyConfirmation: DEPENDENCY_DELETE_CONFIRM,\n                    deleteTaskWindowTitle: \"Delete task\",\n                    deleteDependencyWindowTitle: \"Delete dependency\",\n                    selectView: \"Select view\",\n                    views: {\n                        day: \"Day\",\n                        week: \"Week\",\n                        month: \"Month\",\n                        year: \"Year\",\n                        start: \"Start\",\n                        end: \"End\"\n                    },\n                    actions: {\n                        append: \"Add Task\",\n                        addChild: \"Add Child\",\n                        insertBefore: \"Add Above\",\n                        insertAfter: \"Add Below\",\n                        pdf: \"Export to PDF\",\n                        toggle: \"Toggle pane\"\n                    },\n                    editor: {\n                        editorTitle: \"Task\",\n                        resourcesEditorTitle: \"Resources\",\n                        title: \"Title\",\n                        start: \"Start\",\n                        end: \"End\",\n                        plannedStart: \"Planned Start\",\n                        plannedEnd: \"Planned End\",\n                        percentComplete: \"Complete\",\n                        resources: \"Resources\",\n                        assignButton: \"Assign\",\n                        resourcesHeader: \"Resources\",\n                        unitsHeader: \"Units\",\n                        parent: \"Parent\",\n                        addNew: \"Add\",\n                        name: \"Name\",\n                        percentCompleteHint: \"value from 0 to 1\",\n                        remove: \"Remove\",\n                        actualStart: \"Actual Start\",\n                        actualEnd: \"Actual End\",\n                        parentOptionLabel: \"-None-\",\n                        general: \"General\",\n                        predecessors: \"Predecessors\",\n                        successors: \"Successors\",\n                        other: \"Other\",\n                        dependencyType: \"Type\"\n                    },\n                    plannedTasks: {\n                        switchText: \"Planned Tasks\",\n                        offsetTooltipAdvanced: \"Met deadline earlier\",\n                        offsetTooltipDelay: \"Delay\",\n                        seconds: \"seconds\",\n                        minutes: \"minutes\",\n                        hours: \"hours\",\n                        days: \"days\"\n                    }\n                },\n                showWorkHours: true,\n                showWorkDays: true,\n                toolbar: null,\n                workDayStart: new Date(1980, 1, 1, 8, 0, 0),\n                workDayEnd: new Date(1980, 1, 1, 17, 0, 0),\n                workWeekStart: 1,\n                workWeekEnd: 5,\n                hourSpan: 1,\n                snap: true,\n                height: 600,\n                listWidth: \"30%\",\n                rowHeight: null,\n                showPlannedTasks: false\n            },\n\n            select: function(value) {\n                var list = this.list;\n\n                if (!value) {\n                    return list.select();\n                }\n\n                if (typeof value === STRING) {\n                    value = list.content.find(value);\n                }\n\n                list.select(value);\n                this._selectionUpdate();\n\n                return;\n            },\n\n            clearSelection: function() {\n                this.list.clearSelection();\n                this._selectionUpdate();\n            },\n\n            destroy: function() {\n                Widget.fn.destroy.call(this);\n\n                if (this.dataSource) {\n                    this.dataSource.unbind(\"change\", this._refreshHandler);\n                    this.dataSource.unbind(\"progress\", this._progressHandler);\n                    this.dataSource.unbind(\"error\", this._errorHandler);\n                }\n\n                if (this.dependencies) {\n                    this.dependencies.unbind(\"change\", this._dependencyRefreshHandler);\n                    this.dependencies.unbind(\"error\", this._dependencyErrorHandler);\n                }\n\n                if (this.timeline) {\n                    this.timeline.unbind();\n                    this.timeline.destroy();\n                }\n\n                if (this.list) {\n                    this.list.unbind();\n                    this.list.destroy();\n                }\n\n                if (this.toolbar && this.toolbar.getKendoToolBar()) {\n                    this.toolbar.getKendoToolBar().destroy();\n                }\n\n                if (this.footer && this.footer.getKendoToolBar()) {\n                    this.footer.getKendoToolBar().destroy();\n                }\n\n                if (this._editor) {\n                    this._editor.destroy();\n                }\n\n                if (this._resourceEditorWindow) {\n                    this._resourceEditorWindow.destroy();\n                }\n\n                if (this._resizeDraggable) {\n                    this._resizeDraggable.destroy();\n                }\n\n                if (this.layout && this._getGanttSplitter()) {\n                    this._getGanttSplitter().destroy();\n                }\n\n                this.toolbar.off(NS);\n\n                if (supportsMedia) {\n                    this._mediaQuery.removeListener(this._mediaQueryHandler);\n                    this._mediaQuery = null;\n                }\n\n                $(window).off(\"resize\" + NS, this._resizeHandler);\n                $(this.wrapper).off(NS);\n\n                this.toolbar = null;\n                this.footer = null;\n\n                kendo.destroy(this.element);\n            },\n\n            setOptions: function(options) {\n                var newOptions = kendo.deepExtend({}, this.options, options);\n\n                var events = this._events;\n\n                if (!options.views) {\n                    var selectedView = this.view().name;\n\n                    newOptions.views = $.map(this.options.views, function(view) {\n                        var isSettings = isPlainObject(view);\n                        var name = isSettings ? ((typeof view.type !== \"string\") ? view.title : view.type) : view;\n\n                        if (selectedView === name) {\n                            if (isSettings) {\n                                view.selected = true;\n                            } else {\n                                view = { type: name, selected: true };\n                            }\n                        } else if (isSettings) {\n                            view.selected = false;\n                        }\n\n                        return view;\n                    });\n                }\n\n                if (!options.dataSource) { newOptions.dataSource = this.dataSource; }\n                if (!options.dependencies) { newOptions.dependencies = this.dependencies; }\n                if (!options.resources) { newOptions.resources = this.resources; }\n                if (!options.assignments) { newOptions.assignments = this.assignments; }\n\n                this.destroy();\n                this.element.empty();\n                this.options = null;\n\n                this.init(this.element, newOptions, events);\n\n                Widget.fn._setEvents.call(this, newOptions);\n            },\n\n            _attachEvents: function() {\n                this._resizeHandler = this.resize.bind(this, false);\n                $(window).on(\"resize\" + NS, this._resizeHandler);\n\n                if (supportsMedia) {\n                    this._mediaQueryHandler({ matches: this._mediaQuery.matches });\n                }\n            },\n\n            _splitter: function() {\n                this.splitter = this.layout.find(\".k-gantt-splitter\").kendoSplitter({\n                    navigatable: this.options.navigatable,\n                    orientation: \"horizontal\",\n                    panes: [\n                        { collapsible: false, scrollable: false, label: \"Gantt List\", size: this.options.listWidth },\n                        { collapsible: false, scrollable: false, label: \"Gantt Timeline\" }\n                    ]\n                }).getKendoSplitter();\n\n                if (this.options.listWidth) {\n                    this.splitter.size(\".k-pane:first\", this.options.listWidth);\n                }\n            },\n            _getGanttSplitter: function() {\n                return this.layout.find(\".k-gantt-splitter\").getKendoSplitter();\n            },\n\n            _wrapper: function() {\n                var ganttStyles = Gantt.styles;\n                var options = this.options;\n                var height = options.height;\n                var width = options.width;\n\n                this.wrapper = this.element.addClass(ganttStyles.wrapper).attr(\"role\", \"application\");\n                let splitter = $(\"<div class='k-gantt-splitter'></div>\")\n                    .append(\"<div class='\" + ganttStyles.listWrapper + \"'><div></div></div>\")\n                    .append(\"<div class='\" + ganttStyles.timelineWrapper + \"'><div></div></div>\");\n                this.layout = $(\"<div class='\" + ganttStyles.content + \"'></div>\").appendTo(this.wrapper)\n                    .append(splitter);\n\n                if (options.showPlannedTasks) {\n                    this.wrapper.addClass(ganttStyles.plannedTasks);\n                }\n\n                if (height) {\n                    this.wrapper.css(\"height\", height);\n                }\n\n                if (width) {\n                    this.wrapper.css(\"width\", width);\n                }\n\n                if (options.rowHeight) {\n                    this.wrapper.addClass(ganttStyles.rowHeight);\n                }\n\n                this.treelistWrapper = this.wrapper.find(DOT + ganttStyles.list);\n                this.timelineWrapper = this.wrapper.find(DOT + ganttStyles.timeline);\n\n                this.treelistWrapper.css(\"width\", options.listWidth);\n                this.timelineWrapper.css(\"width\", this.wrapper.width() - this.treelistWrapper.outerWidth());\n            },\n\n            _viewClickHandler: function(e) {\n                var list = this.list;\n                var name = e.target.attr(kendo.attr(\"name\"));\n\n                if (list.editor && !list.editor.end()) {\n                    return;\n                }\n\n                if (!this.trigger(\"navigate\", { view: name })) {\n                    this.view(name);\n                } else {\n                    e.preventDefault();\n                }\n            },\n\n            _togglePane: function(e) {\n                var that = this,\n                    treelist = that.treelistWrapper,\n                    timeline = that.timelineWrapper,\n                    contentSelector = DOT + ganttStyles.gridContent;\n\n                e.preventDefault();\n\n                if (treelist.is(\":visible\")) {\n                    treelist.addClass(\"k-hidden\");\n                    timeline.removeClass(\"k-hidden\");\n\n                    that.refresh();\n\n                    timeline\n                        .find(contentSelector)\n                        .scrollTop(that.scrollTop);\n                } else {\n                    treelist.removeClass(\"k-hidden\");\n                    timeline.addClass(\"k-hidden\");\n\n                    treelist\n                        .find(contentSelector)\n                        .scrollTop(that.scrollTop);\n                }\n\n                that._resize();\n            },\n\n            _processDefaults: function() {\n                var that = this,\n                    views = that.timeline.views,\n                    ns = kendo.ns,\n                    viewsButtons = [],\n                    toolbarStyles = Gantt.styles.toolbar,\n                    actionsMessages = this.options.messages.actions,\n                    items = ADD_ACTIONS.map((m) => ({\n                        text: actionsMessages[m.text],\n                        attributes: { \"data-type\": m.data }\n                    })),\n                    defaults = {\n                        append: {\n                            name: \"append\",\n                            type: \"dropDownButton\",\n                            menuButtons: items,\n                            icon: toolbarStyles.iconPlus,\n                            attributes: {\n                                class: toolbarStyles.appendButton\n                            },\n                            click: that._addClickHandler.bind(that),\n                            open: that._openAddClickHandler.bind(that)\n                        },\n                        pdf: {\n                            name: \"pdf\",\n                            type: \"button\",\n                            attributes: {\n                                class: toolbarStyles.pdfButton\n                            },\n                            icon: toolbarStyles.iconPdf,\n                            click: that.saveAsPDF.bind(that)\n                        },\n                        toggle: {\n                            name: \"toggle\",\n                            type: \"button\",\n                            showText: \"overflow\",\n                            attributes: {\n                                class: \"k-gantt-toggle\"\n                            },\n                            icon: toolbarStyles.iconToggle,\n                            click: that._togglePane.bind(that)\n                        },\n                        switchLabel: {\n                            template: \"<label for=planned-switch>\" + that.options.messages.plannedTasks.switchText + \"</label>\"\n                        },\n                        plannedTasks: {\n                            type: \"component\",\n                            component: \"Switch\",\n                            element: \"<input id='planned-switch' class='k-gantt-planned-switch'>\",\n                            componentOptions: {\n                                checked: that.options.showPlannedTasks,\n                                change: that._togglePlannedTasks.bind(that),\n                                messages: {\n                                    checked: \"\",\n                                    unchecked: \"\"\n                                }\n                            }\n                        },\n                        viewsDdl: {\n                            template: VIEWS_DROPDOWN_TEMPLATE({\n                                views: that.timeline.views,\n                                styles: toolbarStyles,\n                                label: that.options.messages.selectView\n                            })\n                        },\n                        view: {\n                            name: \"view\",\n                            type: \"button\",\n                            togglable: true,\n                            group: \"views\"\n                        },\n                        viewsGroup: {\n                            type: \"buttonGroup\",\n                            attributes: {\n                                class: toolbarStyles.views\n                            }\n                        }\n                    };\n\n                Object.keys(views).map(name => {\n                    var current = $.extend(true, {}, defaults.view);\n\n                    current.text = views[name].title;\n                    current.attributes = {\n                        class: \"k-view-\" + name.toLowerCase()\n                    };\n                    current.attributes[\"data\" + ns + \"-name\"] = name;\n\n                    defaults[name] = current;\n\n                    viewsButtons.push(name);\n                });\n\n                Object.values(defaults).map(t => {\n                    if (t.name === \"view\") {\n                        t.click = that._viewClickHandler.bind(that);\n                    }\n                });\n\n                defaults.viewsGroup.buttons = viewsButtons;\n\n                that._viewsButtons = viewsButtons;\n                that.defaultCommands = defaults;\n            },\n\n            _processTools: function(items) {\n                var editable = this.options.editable,\n                    commands = [],\n                    tools = [\"toggle\"],\n                    spacerPresent = false,\n                    defaults = this.defaultCommands;\n\n                if (!Array.isArray(items)) {\n                    if (editable && editable.create !== false) {\n                        tools.push(\"append\");\n                    }\n                } else {\n                    commands = items;\n                }\n\n                commands.map(c => {\n                    if (c === \"plannedTasks\" || c.name === \"plannedTasks\") {\n                        spacerPresent = true;\n\n                        tools.push({\n                            type: \"spacer\"\n                        });\n\n                        tools.push(\"switchLabel\");\n                    }\n\n                    if (!defaults[c] && !defaults[c.name] && !c.template) {\n                        if (typeof c === STRING) {\n                            c = {\n                                name: c,\n                                type: \"button\",\n                                text: c,\n                                attributes: {\n                                    class: \"k-gantt-\" + c\n                                }\n                            };\n                        } else {\n                            c = $.extend({}, {\n                                type: \"button\",\n                                text: c.name,\n                                attributes: {\n                                    class: \"k-gantt-\" + c.name\n                                }\n                            }, c);\n                        }\n                    }\n\n                    tools.push(c);\n                });\n\n                if (!spacerPresent) {\n                    tools.push({\n                        type: \"spacer\"\n                    });\n                }\n\n                if (this._viewsButtons && this._viewsButtons.length > 0) {\n                    if (this._viewsButtons.length > 1) {\n                        tools.push(\"viewsDdl\");\n                    }\n\n                    tools.push(\"viewsGroup\");\n                }\n\n                return tools;\n            },\n\n            _mediaQueryHandler: function(e) {\n                var that = this;\n                var splitbar = that.layout.find(\".k-splitbar\");\n                var splitter = that._getGanttSplitter();\n                var treelist = that.treelistWrapper;\n                var timeline = that.timelineWrapper;\n                var contentSelector = DOT + ganttStyles.gridContent;\n\n                var toolbarEl = that.toolbar;\n                var toolbar = toolbarEl.getKendoToolBar();\n\n                if (e.matches) {\n                    treelist.addClass(\"k-hidden\");\n                    splitbar.addClass(\"k-hidden\");\n                    splitter._suppressResize = true;\n                    toolbar.hide(toolbarEl.find(\".k-gantt-views\"));\n                    toolbar.show(toolbarEl.find(\".k-views-dropdown\"));\n\n                    treelist.width(\"100%\");\n                } else {\n                    splitter._suppressResize = false;\n                    treelist.removeClass(\"k-hidden\");\n                    splitbar.removeClass(\"k-hidden\");\n                    timeline.removeClass(\"k-hidden\");\n\n                    toolbar.show(toolbarEl.find(\".k-gantt-views\"));\n                    toolbar.hide(toolbarEl.find(\".k-views-dropdown\"));\n\n                    treelist.width(treelist.outerWidth());\n\n                    timeline\n                        .find(contentSelector)\n                        .scrollTop(that.scrollTop);\n                }\n\n                that._resize();\n            },\n\n            _toolbar: function() {\n                var that = this;\n                var ganttStyles = Gantt.styles;\n                var viewsDropdownSelector = DOT + ganttStyles.toolbar.viewsDropdown;\n                var toolsOptions = this.options.toolbar;\n                var tools;\n                var toolbar;\n\n                if (typeof toolsOptions === STRING) {\n                    toolsOptions = kendo.template(toolsOptions).bind(this);\n                }\n\n                if (isFunction(toolsOptions)) {\n                    tools = this._processTools([{\n                        template: toolsOptions({})\n                    }]);\n                } else {\n                    tools = this._processTools(toolsOptions);\n                }\n\n                toolbar = $(\"<div class='\" + ganttStyles.toolbar.headerWrapper + \"'>\");\n\n                this.wrapper.prepend(toolbar);\n                this.toolbar = toolbar;\n\n                toolbar.kendoToolBar({\n                    resizable: false,\n                    tools: tools,\n                    size: \"medium\",\n                    defaultTools: this.defaultCommands,\n                    parentMessages: this.options.messages.actions\n                });\n\n                if (supportsMedia) {\n                    this._mediaQuery = window.matchMedia(MIN_SCREEN);\n                    this._mediaQuery.addListener(this._mediaQueryHandler.bind(this));\n                }\n\n                toolbar.on(\"change\" + NS, viewsDropdownSelector, function() {\n                    var list = that.list;\n                    var name = $(this).val();\n\n                    if (list.editable && list.editable.trigger(\"validate\")) {\n                        return;\n                    }\n\n                    if (!that.trigger(\"navigate\", { view: name })) {\n                        that.view(name);\n                    }\n                });\n\n                this.toggleSwitch = toolbar.find('input.k-gantt-planned-switch').data(\"kendoSwitch\");\n            },\n\n            _footer: function() {\n                var editable = this.options.editable;\n\n                if (!editable || editable.create === false) {\n                    return;\n                }\n\n                var ganttStyles = Gantt.styles.toolbar;\n                var messages = this.options.messages.actions;\n                var footer = $(\"<div class='\" + ganttStyles.footerWrapper + \"'>\");\n\n                this.wrapper.append(footer);\n                this.footer = footer;\n\n                footer.kendoToolBar({\n                    resizable: false,\n                    size: \"medium\",\n                    tools: [\"append\"],\n                    defaultTools: {\n                        append: extend(true, {}, this.defaultCommands.append, {\n                            direction: \"up\",\n                            animation: {\n                                open: {\n                                    effects: \"slideIn:up\"\n                                }\n                            }\n                        })\n                    },\n                    parentMessages: messages\n                });\n            },\n\n            _adjustDimensions: function() {\n                var element = this.element;\n                var toolbarHeight = outerHeight(this.toolbar);\n                var footerHeight = this.footer ? outerHeight(this.footer) : 0;\n                var totalHeight = element.height();\n                var totalWidth = element.width();\n                var treeListVisible = this.treelistWrapper.is(\":visible\");\n                var splitBar = this.layout.find(\".k-splitbar\");\n                var splitBarWidth = splitBar.is(\":visible\") ? outerWidth(splitBar) : 0;\n                var treeListWidth = treeListVisible ? outerWidth(this.treelistWrapper) : 0;\n                var timelineWidth = totalWidth - ( treeListWidth + splitBarWidth );\n\n                this.layout.children().height(totalHeight - (toolbarHeight + footerHeight));\n                this.timelineWrapper.width(timelineWidth);\n                if (!treeListVisible) {\n                    this.timelineWrapper.css(\"left\", 0);\n                }\n\n                if (totalWidth < (treeListWidth + splitBarWidth)) {\n                    this.treelistWrapper.width(totalWidth - splitBarWidth);\n                }\n            },\n\n            _scrollTo: function(value) {\n                var view = this.timeline.view();\n                var list = this.list;\n                var attr = kendo.attr(\"uid\");\n                var id = typeof value === \"string\" ? value :\n                    value.closest(\"tr\" + selector()).attr(attr);\n                var action;\n                var scrollTarget;\n                var scrollIntoView = function() {\n                    if (scrollTarget.length !== 0) {\n                        action();\n                    }\n                };\n\n                if (view.content.is(\":visible\")) {\n                    scrollTarget = view.content.find(selector(id));\n                    action = function() {\n                        view._scrollTo(scrollTarget);\n                    };\n                } else {\n                    scrollTarget = list.element.find(selector(id));\n                    action = function() {\n                        scrollTarget.get(0).scrollIntoView();\n                    };\n                }\n\n                scrollIntoView();\n            },\n\n            _addTask: function(selected, parent, type) {\n                var dataSource = this.dataSource,\n                    task = dataSource._createNewModel({}),\n                    timeline = this.timeline,\n                    firstSlot = timeline.view()._timeSlots()[0],\n                    editable = this.list.editor,\n                    orderId;\n\n                if (editable && editable.trigger(\"validate\")) {\n                    return;\n                }\n\n                task.set(\"title\", \"New task\");\n\n                if (parent) {\n                    task.set(\"parentId\", parent.get(\"id\"));\n                    task.set(\"start\", parent.get(\"start\"));\n                    task.set(\"end\", parent.get(\"end\"));\n                    task.set(\"plannedStart\", parent.get(\"plannedStart\"));\n                    task.set(\"plannedEnd\", parent.get(\"plannedEnd\"));\n                } else {\n                    task.set(\"start\", firstSlot.start);\n                    task.set(\"end\", firstSlot.end);\n                }\n\n                if (type && type !== \"add\") {\n                    orderId = selected.get(\"orderId\");\n                    orderId = type === \"insert-before\" ? orderId : orderId + 1;\n                }\n\n                this._createTask(task, orderId);\n            },\n\n            _addClickHandler: function(e) {\n                var type = e.target.data(\"type\");\n                var dataSource = this.dataSource;\n                var selected = this.dataItem(this.select());\n                var parent = dataSource.taskParent(selected);\n                var target = type === \"add\" ? selected : parent;\n\n                this._addTask(selected, target, type);\n            },\n\n            _openAddClickHandler: function(e) {\n                var selected = this.select();\n\n                if (!selected || selected.length === 0) {\n                    e.preventDefault();\n\n                    this._addTask();\n                }\n            },\n\n            _getListEditable: function() {\n                var editable = false,\n                    options = this.options;\n\n                if (options.editable !== false) {\n                    editable = \"incell\";\n\n                    if (options.editable && options.editable.update === false) {\n                        editable = false;\n                    } else {\n                        if (!options.editable || options.editable.reorder !== false) {\n                            editable = {\n                                mode: \"incell\",\n                                move: {\n                                    reorderable: true,\n                                    clickMoveClick: options.editable.clickMoveClick === false ? false : true\n                                }\n                            };\n                        }\n                    }\n                }\n\n                return editable;\n            },\n\n            _getListOptions: function() {\n                var options = this.options,\n                    editable = this._getListEditable(),\n                    listWrapper = this.wrapper.find(DOT + ganttStyles.list),\n                    ganttListOptions = {\n                        columns: options.columns || [],\n                        dataSource: this.dataSource,\n                        navigatable: options.navigatable,\n                        selectable: options.selectable,\n                        reorderable: options.reorderable,\n                        editable: editable,\n                        resizable: options.resizable,\n                        filterable: options.filterable,\n                        columnMenu: options.columnMenu,\n                        columnResizeHandleWidth: this.options.columnResizeHandleWidth,\n                        listWidth: outerWidth(listWrapper),\n                        resourcesField: this.resources.field,\n                        rowHeight: this.options.rowHeight\n                    };\n\n                return ganttListOptions;\n            },\n\n            _attachResourceEditor: function(columns) {\n                var column;\n\n                for (var i = 0; i < columns.length; i++) {\n                    column = columns[i];\n\n                    if (column.field === this.resources.field && typeof column.editor !== \"function\") {\n                        column.editor = this._resourcePopupEditor.bind(this);\n                    }\n                }\n            },\n\n            _attachListEvents: function() {\n                var that = this;\n\n                that.list\n                    .bind(\"columnShow\", function(e) {\n                        that.trigger(\"columnShow\", { column: e.column });\n                    })\n                    .bind(\"columnHide\", function(e) {\n                        that.trigger(\"columnHide\", { column: e.column });\n                    })\n                    .bind(\"columnReorder\", function(e) {\n                        that.trigger(\"columnReorder\", { column: e.column, oldIndex: e.oldIndex, newIndex: e.newIndex });\n                    })\n                    .bind(\"columnResize\", function(e) {\n                        that.trigger(\"columnResize\", { column: e.column, oldWidth: e.oldWidth, newWidth: e.newWidth });\n                    })\n                    .bind(\"render\", function() {\n                        that._navigatable();\n                     }, true)\n                    .bind(\"beforeEdit\", function(e) {\n\n                        if (that.trigger(\"edit\", { task: e.model, container: e.container })) {\n                            e.preventDefault();\n                        }\n                    })\n                    .bind(\"cancel\", function(e) {\n                        if (that.trigger(\"cancel\", { task: e.model, container: e.cell })) {\n                            e.preventDefault();\n                            return;\n                        }\n\n                        that._preventItemChange = true;\n                        that.list.closeCell(true);\n                    })\n                    .bind(\"save\", function(e) {\n                        var updatedValues = e.values,\n                            key;\n\n                        that.previousTask = {};\n                        that._preventRefresh = true;\n\n                        if (that.updateDuration === null || that.updateDuration === undefined$1) {\n                            that.updateDuration = e.model.duration();\n                        }\n\n                        if (that.updatePlannedDuration === null || that.updatePlannedDuration === undefined$1) {\n                            that.updatePlannedDuration = e.model.plannedDuration();\n                        }\n\n                        if (updatedValues.hasOwnProperty(\"start\")) {\n                            updatedValues.end = new Date(updatedValues.start.getTime() + that.updateDuration);\n                        }\n\n                        if (updatedValues.hasOwnProperty(\"plannedStart\") && updatedValues.plannedStart) {\n                            updatedValues.plannedEnd = new Date(updatedValues.plannedStart.getTime() + that.updatePlannedDuration);\n                        }\n\n                        for (key in updatedValues) {\n                            if (updatedValues.hasOwnProperty(key)) {\n                                that.previousTask[key] = e.model.get(key);\n                            }\n                        }\n\n                        that.updatedValues = updatedValues;\n                    })\n                    .bind(\"itemChange\", function(e) {\n                        var updateInfo = that.updatedValues,\n                            task = e.data,\n                            resourcesField = that.resources.field,\n                            previousTask = that.previousTask,\n                            current,\n                            isCurrentInHeader,\n                            currentIndex,\n                            rowIndex,\n                            navigatable = that.options.navigatable,\n                            key;\n\n                        if (that._preventItemChange) {\n                            that._preventItemChange = false;\n                            return;\n                        }\n\n                        for (key in previousTask) {\n                            if (previousTask.hasOwnProperty(key)) {\n                                task.set(key, previousTask[key]);\n                            }\n                        }\n\n                        that.previousTask = {};\n\n                        if (!that.trigger(\"save\", { task: task, values: updateInfo })) {\n                            if (updateInfo) {\n                                that._preventRefresh = true;\n                                that.dataSource.update(task, updateInfo);\n\n                                if (updateInfo[resourcesField]) {\n                                    that._updateAssignments(task.get(\"id\"), updateInfo[resourcesField]);\n                                }\n                            }\n\n                            if (navigatable) {\n                                current = $(that.list.current());\n                                isCurrentInHeader = current.is(\"th\");\n                                rowIndex = current.closest(\"tr\").index();\n                                currentIndex = isCurrentInHeader ? current.parent().children(\":not(.k-group-cell)\").index(current[0]) : Math.max(that.list.cellIndex(current), 0);\n                            }\n\n                            that._preventRefresh = false;\n                            that._requestStart();\n                            that.dataSource.sync().then(function() {\n                                if (that.options.navigatable && !that._tabPressed) {\n                                    if (!isCurrentInHeader) {\n                                        const tbody = that.list.tbody;\n                                        if (tbody) {\n                                            const row = that.list.tbody.children().eq(rowIndex);\n\n                                            const td = row.find(\">td:visible\")\n                                                .eq(currentIndex);\n\n                                            that.list._setCurrent(td, false, true);\n                                        }\n                                    }\n                                }\n                                that._tabPressed = false;\n                            });\n                        } else if (that.dataSource.hasChanges()) {\n                            that.dataSource.cancelChanges(task);\n                            that._preventRefresh = false;\n                            that.refresh();\n                        }\n\n                        that.updatedValues = null;\n                        that.updateDuration = null;\n                    })\n                    .bind(\"change\", function() {\n                        that.trigger(\"change\");\n\n                        that._selectionUpdate();\n\n                    })\n                    .bind(\"navigate\", function(e) {\n                        var treeList = e.sender;\n                        var current = treeList.current();\n                        var uid;\n\n                        that._scrollTo(current);\n                        that.timeline.element.find(\"div.k-task\").attr(\"tabindex\", \"-1\");\n                        uid = current.closest(\"tr\").attr(\"data-uid\");\n                        that.timeline.element.find(\"div.k-task[data-uid='\" + uid + \"']\").attr(\"tabindex\", \"0\");\n                    })\n                    .bind(\"expand\", function(e) {\n                        e.preventDefault();\n                        e.model.set(\"expanded\", true);\n                        // Update the pristine data as well. Otherwise, upon cancellation, the rows will collapse.\n                        that.dataSource._updatePristineForModel(e.model, { expanded: true });\n                    })\n                    .bind(\"collapse\", function(e) {\n                        e.preventDefault();\n                        e.model.set(\"expanded\", false);\n                        // Update the pristine data as well. Otherwise, upon cancellation, the rows will expand.\n                        that.dataSource._updatePristineForModel(e.model, { expanded: false });\n                    })\n                    .bind(\"dragend\", function(e) {\n                        var dataSource = that.dataSource,\n                            task, updateInfo;\n\n                        if (e.position === \"over\") {\n                            dataSource.cancelChanges();\n\n                            updateInfo = {\n                                parentId: e.source.parentId\n                            };\n\n                            task = dataSource.get(e.source.id);\n\n                            if (!that.trigger(\"save\", { task: task, values: updateInfo })) {\n                                dataSource.update(task, updateInfo);\n                            }\n\n                            dataSource.sync();\n                        }\n                    })\n                    .bind(\"dataBound\", function() {\n                        if (that.dataSource.sort().length === 0) {\n                            that.dataSource.sort([{ field: \"orderId\", dir: \"asc\" }]);\n                        }\n                    })\n                    .bind(\"reorder\", function(e) {\n                        that._updateTask(e.task, e.updateInfo);\n                    });\n            },\n\n            _selectionUpdate: function() {\n                var that = this,\n                    selection = that.list.select();\n\n                if (selection.length) {\n                    that.timeline.select(\"[data-uid='\" + selection.attr(\"data-uid\") + \"']\");\n                } else {\n                    that.timeline.clearSelection();\n                }\n            },\n\n            _list: function() {\n                var ganttStyles = Gantt.styles,\n                    listWrapper = this.wrapper.find(DOT + ganttStyles.list),\n                    listElement = listWrapper.find(\"> div\"),\n                    listOptions = this._getListOptions();\n\n                this._attachResourceEditor(listOptions.columns);\n\n                this.list = new kendo.ui.GanttList(listElement, listOptions);\n\n                this._attachListEvents();\n            },\n\n            _timeline: function() {\n                var that = this;\n                var ganttStyles = Gantt.styles;\n                var options = trimOptions(extend(true, { resourcesField: this.resources.field }, this.options));\n                var element = this.wrapper.find(DOT + ganttStyles.timeline + \" > div\");\n\n                this.timeline = new kendo.ui.GanttTimeline(element, options);\n\n                this.timeline\n                    .bind(\"navigate\", function(e) {\n                        var viewName = e.view.replace(/\\./g, \"\\\\.\").toLowerCase();\n                        var viewsEl = that.toolbar.find(DOT + ganttStyles.toolbar.views);\n                        var viewsGroup = viewsEl.getKendoButtonGroup();\n\n                        if (viewsGroup) {\n                            viewsGroup.select(viewsEl.find(DOT + ganttStyles.toolbar.viewButton + \"-\" + viewName));\n                        }\n\n                        that.toolbar\n                            .find(DOT + ganttStyles.toolbar.viewsDropdown)\n                            .val(e.view);\n\n                        that.refresh();\n                    })\n                    .bind(\"moveStart\", function(e) {\n                        var editable = that.list.editor;\n\n                        if (editable && !editable.end()) {\n                            e.preventDefault();\n                            return;\n                        }\n\n                        if (that.trigger(\"moveStart\", { task: e.task })) {\n                            e.preventDefault();\n                        }\n                    })\n                    .bind(\"move\", function(e) {\n                        var task = e.task;\n                        var start = e.start;\n                        var end = new Date(start.getTime() + task.duration());\n\n                        if (that.trigger(\"move\", { task: task, start: start, end: end })) {\n                            e.preventDefault();\n                        }\n                    })\n                    .bind(\"moveEnd\", function(e) {\n                        var task = e.task;\n                        var start = e.start;\n                        var end = new Date(start.getTime() + task.duration());\n\n                        if (!that.trigger(\"moveEnd\", { task: task, start: start, end: end })) {\n                            that._updateTask(that.dataSource.getByUid(task.uid), {\n                                start: start,\n                                end: end\n                            });\n                        }\n                    })\n                    .bind(\"resizeStart\", function(e) {\n                        var editable = that.list.editor;\n\n                        if (editable && !editable.end()) {\n                            e.preventDefault();\n                            return;\n                        }\n\n                        if (that.trigger(\"resizeStart\", { task: e.task })) {\n                            e.preventDefault();\n                        }\n                    })\n                    .bind(\"resize\", function(e) {\n                        if (that.trigger(\"resize\", { task: e.task, start: e.start, end: e.end })) {\n                            e.preventDefault();\n                        }\n                    })\n                    .bind(\"resizeEnd\", function(e) {\n                        var task = e.task;\n                        var updateInfo = {};\n\n                        if (e.resizeStart) {\n                            updateInfo.start = e.start;\n                        } else {\n                            updateInfo.end = e.end;\n                        }\n\n                        if (!that.trigger(\"resizeEnd\", { task: task, start: e.start, end: e.end })) {\n                            that._updateTask(that.dataSource.getByUid(task.uid), updateInfo);\n                        }\n                    })\n                    .bind(\"percentResizeStart\", function(e) {\n                        var editable = that.list.editor;\n\n                        if (editable && !editable.end()) {\n                            e.preventDefault();\n                        }\n                    })\n                    .bind(\"percentResizeEnd\", function(e) {\n                        that._updateTask(that.dataSource.getByUid(e.task.uid), { percentComplete: e.percentComplete });\n                    })\n                    .bind(\"dependencyDragStart\", function(e) {\n                        var editable = that.list.editor;\n\n                        if (editable && !editable.end()) {\n                            e.preventDefault();\n                        }\n                    })\n                    .bind(\"dependencyDragEnd\", function(e) {\n                        var dependency = that.dependencies._createNewModel({\n                            type: e.type,\n                            predecessorId: e.predecessor.id,\n                            successorId: e.successor.id\n                        });\n\n                        that._createDependency(dependency);\n                    })\n                    .bind(\"select\", function(e) {\n                        var editable = that.list.editor,\n                            current = that.select(),\n                            currentUid;\n\n                        if (editable) {\n                            editable.end();\n                        }\n\n                        if (current && current.length) {\n                            currentUid = current.data(\"uid\");\n                        }\n\n                        if (currentUid !== e.uid) {\n                            that.select(\"[data-uid='\" + e.uid + \"']\");\n                            that.trigger(\"change\");\n                        }\n                    })\n                    .bind(\"editTask\", function(e) {\n                        var editable = that.list.editor;\n\n                        if (editable && !editable.end()) {\n                            return;\n                        }\n\n                        that.editTask(e.uid);\n                    })\n                    .bind(\"clear\", function() {\n                        that.clearSelection();\n                        that.trigger(\"change\");\n                    })\n                    .bind(\"removeTask\", function(e) {\n                        var editable = that.list.editor;\n\n                        if (editable && !editable.end()) {\n                            return;\n                        }\n\n                        that.removeTask(that.dataSource.getByUid(e.uid));\n                    })\n                    .bind(\"expand\", function(e) {\n                        var model = that.dataSource.getByUid(e.uid);\n                        if (model.summary && !model.get(\"expanded\")) {\n                            model.set(\"expanded\", true);\n                        } else {\n                            e.preventDefault();\n                        }\n                    })\n                    .bind(\"collapse\", function(e) {\n                        var model = that.dataSource.getByUid(e.uid);\n\n                        if (model.summary && model.get(\"expanded\")) {\n                            model.set(\"expanded\", false);\n                        } else {\n                            e.preventDefault();\n                        }\n                    })\n                    .bind(\"removeDependency\", function(e) {\n                        var editable = that.list.editor;\n\n                        if (editable && !editable.end()) {\n                            return;\n                        }\n\n                        that.removeDependency(that.dependencies.getByUid(e.uid));\n                    });\n            },\n\n            _dataSource: function() {\n                var options = this.options;\n                var dataSource = options.dataSource;\n\n                dataSource = isArray(dataSource) ? { data: dataSource } : dataSource;\n\n                if (this.dataSource && this._refreshHandler) {\n                    this.dataSource\n                        .unbind(\"change\", this._refreshHandler)\n                        .unbind(\"progress\", this._progressHandler)\n                        .unbind(\"error\", this._errorHandler);\n                } else {\n                    this._refreshHandler = this.refresh.bind(this);\n                    this._progressHandler = this._requestStart.bind(this);\n                    this._errorHandler = this._error.bind(this);\n                }\n\n                this.dataSource = kendo.data.GanttDataSource.create(dataSource)\n                    .bind(\"change\", this._refreshHandler)\n                    .bind(\"progress\", this._progressHandler)\n                    .bind(\"error\", this._errorHandler);\n            },\n\n            _dependencies: function() {\n                var dependencies = this.options.dependencies || {};\n                var dataSource = isArray(dependencies) ? { data: dependencies } : dependencies;\n\n                if (this.dependencies && this._dependencyRefreshHandler) {\n                    this.dependencies\n                        .unbind(\"change\", this._dependencyRefreshHandler)\n                        .unbind(\"error\", this._dependencyErrorHandler);\n                } else {\n                    this._dependencyRefreshHandler = this.refreshDependencies.bind(this);\n                    this._dependencyErrorHandler = this._error.bind(this);\n                }\n\n                this.dependencies = kendo.data.GanttDependencyDataSource.create(dataSource)\n                    .bind(\"change\", this._dependencyRefreshHandler)\n                    .bind(\"error\", this._dependencyErrorHandler);\n            },\n\n            _resources: function() {\n                var resources = this.options.resources;\n                var dataSource = resources.dataSource || {};\n\n                this.resources = {\n                    field: \"resources\",\n                    dataTextField: \"name\",\n                    dataColorField: \"color\",\n                    dataFormatField: \"format\"\n                };\n\n                extend(this.resources, resources);\n\n                this.resources.dataSource = kendo.data.DataSource.create(dataSource);\n            },\n\n            _assignments: function() {\n                var assignments = this.options.assignments;\n                var dataSource = assignments.dataSource || { };\n\n                if (this.assignments) {\n                    this.assignments.dataSource\n                        .unbind(\"change\", this._assignmentsRefreshHandler);\n                } else {\n                    this._assignmentsRefreshHandler = this.refresh.bind(this);\n                }\n\n                this.assignments = {\n                    dataTaskIdField: \"taskId\",\n                    dataResourceIdField: \"resourceId\",\n                    dataValueField: \"value\"\n                };\n\n                extend(this.assignments, assignments);\n\n                this.assignments.dataSource = kendo.data.DataSource.create(dataSource);\n\n                this.assignments.dataSource\n                    .bind(\"change\", this._assignmentsRefreshHandler);\n            },\n\n            _createEditor: function() {\n                var that = this;\n\n                var editor = this._editor = new kendo.gantt.PopupEditor(this.wrapper, extend({}, this.options, {\n                    target: this,\n                    resources: {\n                        field: this.resources.field,\n                        editor: this._createResourceEditor.bind(this)\n                    }\n                }));\n\n                editor\n                    .bind(\"cancel\", function(e) {\n                        var task = that.dataSource.getByUid(e.model.uid);\n\n                        if (that.trigger(\"cancel\", { container: e.container, task: task })) {\n                            e.preventDefault();\n                            return;\n                        }\n\n                        if (that.dependencies) {\n                            that.dependencies.filter({});\n                        }\n\n                        that.cancelTask();\n                        if (that.options.navigatable) {\n                            that.timeline.element.find('div[data-uid=\"' + e.model.uid + '\"]').trigger(\"focus\");\n                        }\n                    })\n                    .bind(\"edit\", function(e) {\n                        var task = that.dataSource.getByUid(e.model.uid);\n\n                        if (that.trigger(\"edit\", { container: e.container, task: task })) {\n                            e.preventDefault();\n                        }\n                    })\n                    .bind(\"save\", function(e) {\n                        var task = that.dataSource.getByUid(e.model.uid);\n\n                        that.saveTask(task, e.updateInfo, e.updateDependencies);\n                    })\n                    .bind(\"remove\", function(e) {\n                        that.removeTask(e.model.uid);\n                    })\n                    .bind(\"close\", function(options) {\n                        if (that.options.navigatable) {\n                            that.element.find('div[data-uid=\"' + options.window.attr(\"data-uid\") + '\"]').trigger(\"focus\");\n                        }\n                    });\n            },\n\n            _resourcePopupEditor: function(container, options) {\n                var that = this,\n                    editor = that._createResourceEditor($(\"<div>\"), options),\n                    popupStyles = ganttStyles.popup,\n                    wrapper = that.element,\n                    dialogEl = $(kendo.format('<div class=\"' + popupStyles.formContainer + '\">')).appendTo(wrapper),\n                    messages = that.options.messages,\n                    buttonsEl, dialog;\n\n                dialogEl.append(editor.wrapper);\n                buttonsEl = $('<div class=\"' + popupStyles.buttonsContainer + '\">');\n                dialogEl.append(buttonsEl);\n\n                buttonsEl.append($(\"<button class='\" + ganttStyles.buttonSave + \"'>\" + encode(messages.save) + \"</button>\").kendoButton({\n                    name: \"save\",\n                    themeColor: \"primary\",\n                    icon: \"save\",\n                    click: () => {\n                        if (!editor.updateModel()) {\n                            return;\n                        }\n                        editor.trigger(\"save\", { model: editor.model });\n                        that._updateAssignments(editor.model.get(\"id\"), editor.model.get(that.resources.field));\n\n                        dialog.trigger(\"close\");\n                        dialog.close();\n                    }\n                }));\n\n                buttonsEl.append($(\"<button class='\" + ganttStyles.buttonCancel + \"'>\" + encode(messages.cancel) + \"</button>\").kendoButton({\n                    name: \"cancel\",\n                    icon: \"cancel\",\n                    click: () => {\n                        dialog.trigger(\"close\");\n                        dialog.close();\n                    }\n                }));\n\n                this._resourceEditorWindow = dialog = dialogEl.kendoWindow({\n                    modal: true,\n                    resizable: false,\n                    draggable: true,\n                    visible: false,\n                    title: messages.editor.resourcesEditorTitle,\n                    deactivate: () => {\n                        editor.destroy();\n                        dialog.destroy();\n                        dialog.element.closest(\".k-window\").remove();\n                    }\n                }).data(\"kendoWindow\");\n\n                dialog.center().open();\n\n                return editor;\n            },\n\n            _createResourceEditor: function(container, options) {\n                var that = this;\n                var model = options instanceof ObservableObject ? options : options.model;\n                var messages = this.options.messages;\n                var resourcesField = this.resources.field;\n                var unitsValidation = { step: 0.01, min: 0.01, max: 1 };\n                var assignmentsModel = this.assignments.dataSource.options.schema.model;\n                var resourceTextField = that.resources.dataTextField;\n                var resources = this.resources.dataSource.view();\n\n\n                if (assignmentsModel && assignmentsModel.fields.Units && assignmentsModel.fields.Units.validation) {\n                    extend(true, unitsValidation, assignmentsModel.fields.Units.validation);\n                }\n\n                var editor = this._resourceEditor = new kendo.gantt.ResourceEditor(container, {\n                    resourcesField: resourcesField,\n                    unitsValidation: unitsValidation,\n                    resources: resources.map(r => ({ value: r.id, text: r[resourceTextField] })),\n                    model: model,\n                    messages: extend({}, messages.editor)\n                });\n\n                return editor;\n            },\n\n            view: function(type) {\n                return this.timeline.view(type);\n            },\n\n            range: function(range) {\n                var dataSource = this.dataSource;\n                var view = this.view();\n                var timeline = this.timeline;\n\n                if (range) {\n                    view.options.range = {\n                        start: range.start,\n                        end: range.end\n                    };\n\n                    timeline._render(dataSource.taskTree());\n                    timeline._renderDependencies(this.dependencies.view());\n                }\n\n                return {\n                    start: view.start,\n                    end: view.end\n                };\n            },\n\n            date: function(date) {\n                var view = this.view();\n\n                if (date) {\n                    view.options.date = date;\n                    view._scrollToDate(date);\n                }\n\n                return view.options.date;\n            },\n\n            dataItem: function(value) {\n                if (!value) {\n                    return null;\n                }\n\n                var list = this.list;\n                var element = list.element.find(value);\n\n                return list._modelFromElement(element);\n            },\n\n            setDataSource: function(dataSource) {\n                this.options.dataSource = dataSource;\n\n                this._dataSource();\n\n                this.list.setDataSource(this.dataSource);\n\n                if (this.options.autoBind) {\n                    dataSource.fetch();\n                }\n            },\n\n            setDependenciesDataSource: function(dependencies) {\n                this.options.dependencies = dependencies;\n\n                this._dependencies();\n\n                if (this.options.autoBind) {\n                    dependencies.fetch();\n                }\n            },\n\n            items: function() {\n                return this.wrapper.children(\".k-task\");\n            },\n\n            _updateAssignments: function(id, resources) {\n                var dataSource = this.assignments.dataSource;\n                var taskId = this.assignments.dataTaskIdField;\n                var resourceId = this.assignments.dataResourceIdField;\n                var hasMatch = false;\n                var assignments = new Query(dataSource.view())\n                    .filter({\n                        field: taskId,\n                        operator: \"eq\",\n                        value: id\n                    }).toArray();\n                var assignment;\n                var resource;\n                var value;\n\n                while (assignments.length) {\n                    assignment = assignments[0];\n\n                    for (var i = 0, length = resources.length; i < length; i++) {\n                        resource = resources[i];\n\n                        if (assignment.get(resourceId) === resource.get(\"id\")) {\n                            value = resources[i].get(\"value\");\n                            this._updateAssignment(assignment, value);\n                            resources.splice(i, 1);\n                            hasMatch = true;\n                            break;\n                        }\n                    }\n\n                    if (!hasMatch) {\n                        this._removeAssignment(assignment);\n                    }\n\n                    hasMatch = false;\n\n                    assignments.shift();\n                }\n\n                for (var j = 0, newLength = resources.length; j < newLength; j++) {\n                    resource = resources[j];\n\n                    if (resource.id !== undefined$1 && resource.value) {\n                        this._createAssignment(resource, id);\n                    }\n                }\n\n                dataSource.sync();\n            },\n\n            cancelTask: function() {\n                var editor = this._editor;\n                var container = editor.container;\n\n                if (container) {\n                    editor.close();\n                }\n\n                if (this.dependencies) {\n                    this.dependencies.cancelChanges();\n                }\n            },\n\n            editTask: function(uid) {\n                var task = typeof uid === \"string\" ? this.dataSource.getByUid(uid) : uid;\n\n                if (!task) {\n                    return;\n                }\n\n                var taskCopy = this.dataSource._createNewModel(task.toJSON());\n                taskCopy.uid = task.uid;\n\n                this.cancelTask();\n\n                this._editTask(taskCopy);\n            },\n\n            _editTask: function(task) {\n                this._editor.editTask(task, this.options.editable.plannedTasks);\n            },\n\n            saveTask: function(task, updateInfo, updateDependencies) {\n                var that = this,\n                    editor = this._editor,\n                    container = editor.container,\n                    editable = editor.editable,\n                    hasChanges = false,\n                    hasResourceChanges = false,\n                    updateInfo = updateInfo || {},\n                    resourcesField = that.options.resources.field,\n                    difference;\n\n                Object.keys(updateInfo).map(k => {\n                    var updated = updateInfo[k],\n                        current = task.get(k);\n\n                    if (updated instanceof Date) {\n                        updated = updated.getTime();\n                        current = current ? current.getTime() : undefined$1;\n                    }\n\n                    if (updated !== current) {\n                        if (k === resourcesField) {\n                            difference = getDifference(updated, current);\n\n                            if (difference && difference.length > 0) {\n                                hasResourceChanges = true;\n                            }\n                        } else {\n                            hasChanges = true;\n                        }\n                    }\n                });\n\n                if (container &&\n                    editable &&\n                    editable.end() &&\n                    (hasChanges || hasResourceChanges || updateDependencies)) {\n                        if (!that.trigger(\"save\", { task: task, values: updateInfo, updateDependencies: updateDependencies })) {\n                            if (hasChanges) {\n                                that._preventRefresh = true;\n\n                                that.dataSource.update(task, updateInfo);\n                            }\n\n                            if (hasResourceChanges) {\n                                this._updateAssignments(task.get(\"id\"), updateInfo[resourcesField]);\n                            }\n\n                            that._syncDataSource();\n\n                            if (this.dependencies) {\n                                this._updateDependency(updateDependencies);\n                            }\n\n                            this._editor.close();\n                        } else {\n                            if (task && task.dirty) {\n                                that.dataSource.cancelChanges(task);\n                                that._preventRefresh = false;\n                                that.refresh();\n                            }\n\n                            if (that.dependencies) {\n                                that.dependencies.cancelChanges();\n                            }\n                        }\n                } else if (editable && editable.end()) {\n                    this._editor.close();\n                }\n            },\n\n            _updateDependency: function(updateDependencies) {\n                this.dependencies.filter({});\n\n                if (updateDependencies) {\n                    updateDependencies.created.map(d => {\n                        this._preventDependencyRefresh = true;\n                        this.dependencies.add(d);\n                        this._preventDependencyRefresh = false;\n                    });\n\n                    updateDependencies.destroyed.map(d => {\n                        this.dependencies.remove(d);\n                    });\n                }\n\n                this.dependencies.sync();\n            },\n\n            _updateTask: function(task, updateInfo) {\n                var that = this;\n                var resourcesField = that.resources.field;\n\n                if (!that.trigger(\"save\", { task: task, values: updateInfo })) {\n                    if (updateInfo) {\n                        that._preventRefresh = true;\n\n                        that.dataSource.update(task, updateInfo);\n\n                        if (updateInfo[resourcesField]) {\n                            that._updateAssignments(task.get(\"id\"), updateInfo[resourcesField]);\n                        }\n                    }\n\n                    that._syncDataSource();\n                } else {\n                    if (task && task.dirty) {\n                        that.dataSource.cancelChanges(task);\n                        that._preventRefresh = false;\n                        that.refresh();\n                    }\n\n                    if (that.dependencies) {\n                        that.dependencies.cancelChanges();\n                    }\n                }\n            },\n\n            _updateAssignment: function(assignment, value) {\n                var resourceValueField = this.assignments.dataValueField;\n\n                assignment.set(resourceValueField, value);\n            },\n\n            removeTask: function(uid) {\n                var that = this;\n                var task = typeof uid === \"string\" ? this.dataSource.getByUid(uid) : uid;\n\n                if (!task) {\n                    return;\n                }\n\n                this._taskConfirm(function(cancel) {\n                    if (!cancel) {\n                        that._removeTask(task);\n                    }\n                }, task);\n            },\n\n            _createTask: function(task, index) {\n                if (!this.trigger(\"add\", {\n                    task: task,\n                    dependency: null\n                })) {\n                    var dataSource = this.dataSource;\n\n                    this._preventRefresh = true;\n\n                    if (index === undefined$1) {\n                        dataSource.add(task);\n                    } else {\n                        dataSource.insert(index, task);\n                    }\n\n                    this._scrollToUid = task.uid;\n                    this._syncDataSource();\n                }\n            },\n\n            _createDependency: function(dependency) {\n                if (!this.trigger(\"add\", {\n                    task: null,\n                    dependency: dependency\n                })) {\n                    this._preventDependencyRefresh = true;\n\n                    this.dependencies.add(dependency);\n\n                    this._preventDependencyRefresh = false;\n\n                    this.dependencies.sync();\n                }\n            },\n\n            _createAssignment: function(resource, id) {\n                var assignments = this.assignments;\n                var dataSource = assignments.dataSource;\n                var taskId = assignments.dataTaskIdField;\n                var resourceId = assignments.dataResourceIdField;\n                var resourceValue = assignments.dataValueField;\n                var assignment = dataSource._createNewModel();\n\n                assignment[taskId] = id;\n                assignment[resourceId] = resource.get(\"id\");\n                assignment[resourceValue] = resource.get(\"value\");\n\n                dataSource.add(assignment);\n            },\n\n            removeDependency: function(uid) {\n                var that = this;\n                var dependency = typeof uid === \"string\" ? this.dependencies.getByUid(uid) : uid;\n\n                if (!dependency) {\n                    return;\n                }\n\n                this._dependencyConfirm(function(cancel) {\n                    if (!cancel) {\n                        that._removeDependency(dependency);\n                    }\n                }, dependency);\n            },\n\n            _removeTaskDependencies: function(task, dependencies) {\n                this._preventDependencyRefresh = true;\n\n                for (var i = 0, length = dependencies.length; i < length; i++) {\n                    this.dependencies.remove(dependencies[i]);\n                }\n\n                this._preventDependencyRefresh = false;\n\n                this.dependencies.sync();\n            },\n\n            _removeTaskAssignments: function(task) {\n                var dataSource = this.assignments.dataSource;\n                var assignments = dataSource.view();\n                var filter = {\n                    field: this.assignments.dataTaskIdField,\n                    operator: \"eq\",\n                    value: task.get(\"id\")\n                };\n\n                assignments = new Query(assignments).filter(filter).toArray();\n\n                this._preventRefresh = true;\n\n                for (var i = 0, length = assignments.length; i < length; i++) {\n                    dataSource.remove(assignments[i]);\n                }\n\n                this._preventRefresh = false;\n\n                dataSource.sync();\n            },\n\n            _removeTask: function(task) {\n                var dependencies = this.dependencies.dependencies(task.id);\n\n                if (!this.trigger(\"remove\", {\n                    task: task,\n                    dependencies: dependencies\n                })) {\n                    this._removeTaskDependencies(task, dependencies);\n                    this._removeTaskAssignments(task);\n\n                    this._preventRefresh = true;\n\n                    if (this.dataSource.remove(task)) {\n                        this._syncDataSource();\n                    }\n\n                    if (this.dependencies) {\n                        this.dependencies.filter({});\n                    }\n\n                    this._preventRefresh = false;\n                }\n            },\n\n            _removeDependency: function(dependency) {\n                if (!this.trigger(\"remove\", {\n                    task: null,\n                    dependencies: [dependency]\n                })) {\n                    if (this.dependencies.remove(dependency)) {\n                        this.dependencies.sync();\n                    }\n                }\n            },\n\n            _removeAssignment: function(assignment) {\n                this.assignments.dataSource.remove(assignment);\n            },\n\n            _taskConfirm: function(callback, task) {\n                let messages = this.options.messages;\n\n                this._confirm(callback, {\n                    model: task,\n                    text: encode(messages.deleteTaskConfirmation),\n                    title: encode(messages.deleteTaskWindowTitle)\n                });\n            },\n\n            _dependencyConfirm: function(callback, dependency) {\n                let messages = this.options.messages;\n\n                this._confirm(callback, {\n                    model: dependency,\n                    text: encode(messages.deleteDependencyConfirmation),\n                    title: encode(messages.deleteDependencyWindowTitle)\n                });\n            },\n\n            _confirm: function(callback, options) {\n                var editable = this.options.editable;\n\n                if (editable === true || editable.confirmation !== false) {\n                    this.showDialog(extend(true, {}, options, { callback: callback }));\n                } else {\n                    callback();\n                }\n            },\n\n            showDialog: function(options) {\n                this._editor.showDialog(options);\n            },\n\n            refresh: function() {\n                if (this._preventRefresh || !this.list || this.list.editor) {\n                    return;\n                }\n\n                this._progress(false);\n\n                var dataSource = this.dataSource;\n                var taskTree = dataSource.taskTree();\n                var scrollToUid = this._scrollToUid;\n                var current;\n                var cachedUid;\n                var cachedIndex = -1;\n                var selected = this.select()[0] ? this.select().data(\"uid\") : this._selected;\n\n                if (this.current) {\n                    cachedUid = this.current.closest(\"tr\").attr(kendo.attr(\"uid\"));\n                    cachedIndex = this.current.index();\n                }\n\n                if (this.trigger(\"dataBinding\")) {\n                    return;\n                }\n\n                if (this.resources.dataSource.data().length !== 0) {\n                    this._assignResources(taskTree);\n                }\n\n                if (this._editor) {\n                    this._editor.close();\n                }\n\n                this.clearSelection();\n                this.list._renderTree(taskTree);\n                this.timeline._render(taskTree);\n                this.timeline._renderDependencies(this.dependencies.view());\n\n                if (scrollToUid) {\n                    this._scrollTo(scrollToUid);\n                    this.select(selector(scrollToUid));\n                }\n\n                if ((scrollToUid || cachedUid) && cachedIndex >= 0) {\n                    current = this.list.element\n                        .find(\"tr\" + selector((scrollToUid || cachedUid)) + \" > td\").eq(cachedIndex);\n\n                    this._current(current);\n                }\n\n                this._scrollToUid = null;\n\n                if (selected) {\n                    this._selected = selected;\n                    this.select(\"[data-uid=\" + selected + \"]\");\n                }\n\n                this.trigger(\"dataBound\");\n            },\n\n            refreshDependencies: function() {\n                if (this._preventDependencyRefresh) {\n                    return;\n                }\n\n                if (this.trigger(\"dataBinding\")) {\n                    return;\n                }\n\n                this.timeline._renderDependencies(this.dependencies.view());\n\n                this.trigger(\"dataBound\");\n            },\n\n            _assignResources: function(taskTree) {\n                var resources = this.resources;\n                var assignments = this.assignments;\n                var groupAssigments = function() {\n                    var data = assignments.dataSource.view();\n                    var group = {\n                        field: assignments.dataTaskIdField\n                    };\n\n                    data = new Query(data).group(group).toArray();\n\n                    return data;\n                };\n                var assigments = groupAssigments();\n                var applyTaskResource = function(task, action) {\n                    var taskId = task.get(\"id\");\n\n                    kendo.setter(resources.field)(task, new ObservableArray([]));\n\n                    for (var i = 0, length = assigments.length; i < length; i++) {\n                        if (assigments[i].value === taskId) {\n                            action(task, assigments[i].items);\n                        }\n                    }\n                };\n                var wrapTask = function(task, items) {\n                    for (var j = 0, length = items.length; j < length; j++) {\n                        var item = items[j];\n                        var resource = resources.dataSource.get(item.get(assignments.dataResourceIdField));\n                        var resourceValue = item.get(assignments.dataValueField);\n                        var resourcedId = item.get(assignments.dataResourceIdField);\n                        var valueFormat = resource.get(resources.dataFormatField) || PERCENTAGE_FORMAT;\n                        var formatedValue = kendo.toString(resourceValue, valueFormat);\n\n                        task[resources.field].push(new ObservableObject({\n                            id: resourcedId,\n                            name: resource.get(resources.dataTextField),\n                            color: resource.get(resources.dataColorField),\n                            value: resourceValue,\n                            formatedValue: formatedValue,\n                            format: valueFormat\n                        }));\n                    }\n                };\n\n                for (var i = 0, length = taskTree.length; i < length; i++) {\n                    applyTaskResource(taskTree[i], wrapTask);\n                }\n            },\n\n            _wrapResourceData: function(id) {\n                var that = this;\n                var result = [];\n                var resource;\n                var resources = this.resources.dataSource.view();\n                var assignments = this.assignments.dataSource.view();\n                var taskAssignments = new Query(assignments).filter({\n                    field: that.assignments.dataTaskIdField,\n                    operator: \"eq\",\n                    value: id\n                }).toArray();\n                var valuePerResource = function(id) {\n                    var resourceValue = null;\n\n                    new Query(taskAssignments).filter({\n                        field: that.assignments.dataResourceIdField,\n                        operator: \"eq\",\n                        value: id\n                    }).select(function(assignment) {\n                        resourceValue += assignment.get(that.assignments.dataValueField);\n                    });\n\n                    return resourceValue;\n                };\n\n                for (var i = 0, length = resources.length; i < length; i++) {\n                    resource = resources[i];\n                    result.push({\n                        id: resource.get(\"id\"),\n                        name: resource.get(that.resources.dataTextField),\n                        format: resource.get(that.resources.dataFormatField) || PERCENTAGE_FORMAT,\n                        value: valuePerResource(resource.id)\n                    });\n                }\n\n                return result;\n            },\n\n            _syncDataSource: function() {\n                this._preventRefresh = false;\n                this._requestStart();\n                this.dataSource.sync();\n            },\n\n            _requestStart: function() {\n                this._progress(true);\n            },\n\n            _error: function() {\n                this._progress(false);\n            },\n\n            _progress: function(toggle) {\n                kendo.ui.progress(this.element, toggle);\n            },\n\n            _scrollable: function() {\n                var that = this;\n                var ganttStyles = Gantt.styles;\n                var contentSelector = DOT + ganttStyles.gridContent;\n                var headerSelector = DOT + ganttStyles.gridHeaderWrap;\n                var timelineHeader = this.timeline.element.find(headerSelector);\n                var timelineContent = this.timeline.element.find(contentSelector);\n                var treeListHeader = this.list.element.find(headerSelector);\n                var treeListContent = this.list.element.find(contentSelector);\n\n                if (mobileOS) {\n                    treeListContent.css(\"overflow-y\", \"auto\");\n                }\n\n                timelineContent.on(\"scroll\", function() {\n                    that.scrollTop = this.scrollTop;\n                    kendo.scrollLeft(timelineHeader, this.scrollLeft);\n                    treeListContent.scrollTop(this.scrollTop);\n                });\n\n                treeListContent\n                    .on(\"scroll\", function() {\n                        kendo.scrollLeft(treeListHeader, this.scrollLeft);\n                    })\n                    .on(\"DOMMouseScroll\" + NS + \" mousewheel\" + NS, function(e) {\n                        var scrollTop = timelineContent.scrollTop();\n                        var delta = kendo.wheelDeltaY(e);\n\n                        if (delta) {\n                            e.preventDefault();\n                            //In Firefox DOMMouseScroll event cannot be canceled\n                            $(e.currentTarget).one(\"wheel\" + NS, false);\n\n                            timelineContent.scrollTop(scrollTop + (-delta));\n                        }\n                    });\n            },\n\n            _navigatable: function() {\n                var that = this;\n                var navigatable = this.options.navigatable;\n                var editable = this.options.editable;\n                var ganttStyles = Gantt.styles;\n                var contentSelector = DOT + ganttStyles.gridContent;\n                var listWrapper = DOT + ganttStyles.listWrapper;\n                var headerSelector = DOT + ganttStyles.gridHeaderWrap;\n                var headerTable = this.list.element.find(headerSelector).find(\"table\");\n                var contentTable = this.list.element.find(contentSelector).find(\"table\");\n                var tables = headerTable.add(contentTable);\n                var attr = selector();\n                var deleteAction = function() {\n                    var editable = that.options.editable;\n\n                    if (!editable || editable.destroy === false || that.list.editor) {\n                        return;\n                    }\n\n                    var selectedTask = that.select();\n                    var uid = kendo.attr(\"uid\");\n\n                    if (selectedTask.length) {\n                        that.removeTask(selectedTask.attr(uid));\n                    }\n                };\n\n                $(this.wrapper)\n                    .on(\"mousedown\" + NS, listWrapper + \" tr\" + attr, function(e) {\n                        var isInput = $(e.target).is(\":button,a,:input,a>.k-icon,.k-svg-icon,k-svg-icon,svg,path,textarea,span.k-icon:not(.k-i-none),span.k-svg-icon:not(.k-svg-i-none),span.k-link,.k-input,.k-multiselect-wrap,.k-input-value-text,.k-input-inner\");\n\n                        if (e.ctrlKey) {\n                            return;\n                        }\n\n\n                        if ((navigatable || editable) && !isInput) {\n                            that._focusTimeout = setTimeout(function() {\n                                focusTable(that.list.content.find(\"table\"), true);\n                            }, 2);\n                        }\n                    })\n                    .on(\"keydown\" + NS, function(e) {\n                        var key = e.keyCode;\n                        var that = this;\n                        var uid;\n                        var cell;\n                        var target = $(e.target);\n                        var focusedIndex;\n                        var focusSequence = [\n                            that.toolbar,\n                            that.layout.find(\".k-splitbar\"),\n                            that.layout.find(\".k-gantt-treelist\"),\n                            that.layout.find(\".k-gantt-timeline-pane\")\n                        ];\n\n                        that._tabPressed = false;\n\n                        if (that.footer) {\n                            focusSequence.push(that.footer);\n                        }\n\n                        for (var i = 0; i < focusSequence.length; i++) {\n                            if ($.contains(focusSequence[i][0], e.target) || focusSequence[i][0] === e.target) {\n                                focusedIndex = i;\n                                break;\n                            }\n                        }\n\n                        if (key === keys.F10) {\n                            that.toolbar.find(\"[tabindex=0]:visible\").first().addClass(ganttStyles.focused).trigger(\"focus\");\n                            e.preventDefault();\n                        } else if (key == keys.TAB) {\n                            if (focusedIndex == 2) {\n                                that._tabPressed = true;\n                            }\n                            if (e.shiftKey) {\n                                for (i = focusedIndex - 1; i >= 0; i--) {\n                                    if (!focusSequence[i].hasClass(\"k-hidden\")) {\n                                        uid = target.attr(\"data-uid\");\n                                        if (i === 2 && uid) {\n                                            cell = that.list.content.find(\"tr[data-uid='\" + uid + \"']\").find(\"td\").last();\n                                            that.list.current(cell);\n                                            focusTable(that.list.content.find(\"table\"), true);\n                                        } else {\n                                            if (focusSequence[i].is(\":kendoFocusable\")) {\n                                                focusSequence[i].trigger(\"focus\");\n                                            } else {\n                                                focusSequence[i].find(\"[tabindex=0]:visible\").trigger(\"focus\");\n                                            }\n                                        }\n                                        e.preventDefault();\n                                        break;\n                                    }\n                                }\n                            } else {\n                                for (i = focusedIndex + 1; i < focusSequence.length; i++) {\n                                    if (!focusSequence[i].hasClass(\"k-hidden\")) {\n                                        if (focusSequence[i].is(\":kendoFocusable\")) {\n                                            focusSequence[i].trigger(\"focus\");\n                                        } else {\n                                            focusSequence[i].find(\"[tabindex=0]:visible\").trigger(\"focus\");\n                                        }\n                                        e.preventDefault();\n                                      break;\n                                    }\n                                }\n                            }\n                        }\n\n                    }.bind(this));\n\n                if (navigatable) {\n                    contentTable\n                        .on(\"keydown\" + NS, function(e) {\n                            var key = e.keyCode;\n                            if (e.keyCode == keys.DELETE) {\n                                deleteAction();\n                            } else if (key >= 49 && key <= 57 && e.target.tagName.toLowerCase() !== \"input\") {\n                               that.view(that.timeline._viewByIndex(key - 49));\n                            }\n                        });\n\n                    return;\n                }\n\n                tables\n                    .on(\"focus\" + NS, function() {\n                        $(that.toolbar.find(DOT + ganttStyles.focused)).removeClass(ganttStyles.focused);\n                    })\n                    .on(\"blur\" + NS, function() {\n\n                        if (this == headerTable) {\n                            $(this).attr(TABINDEX, -1);\n                        }\n                    });\n            },\n\n\n            _dataBind: function() {\n                var that = this;\n\n                if (that.options.autoBind) {\n                    this._preventRefresh = true;\n                    this._preventDependencyRefresh = true;\n\n                    var promises = $.map([\n                        this.dataSource,\n                        this.dependencies,\n                        this.resources.dataSource,\n                        this.assignments.dataSource\n                    ],\n                    function(dataSource) {\n                        return dataSource.fetch();\n                    });\n\n                    $.when.apply(null, promises)\n                        .done(function() {\n                            that._preventRefresh = false;\n                            that._preventDependencyRefresh = false;\n                            that.refresh();\n                        });\n                }\n            },\n\n            _resize: function() {\n                this._adjustDimensions();\n                this.timeline.view()._adjustHeight();\n                this.timeline.view()._renderCurrentTime();\n                this.list._adjustHeight();\n            },\n\n            _togglePlannedTasks: function(e) {\n                var timeline = this.timeline;\n\n                if (!this.trigger(\"togglePlannedTasks\", { showPlannedTasks: !timeline.options.showPlannedTasks })) {\n                    this.wrapper.toggleClass(ganttStyles.plannedTasks);\n                    timeline._setPlanned(!timeline.options.showPlannedTasks);\n                    timeline._render(this.dataSource.taskTree());\n                    timeline._renderDependencies(this.dependencies.view());\n                } else {\n                    e.preventDefault();\n                }\n            }\n        });\n\n        if (kendo.PDFMixin) {\n            kendo.PDFMixin.extend(Gantt.fn);\n\n            Gantt.fn._drawPDF = function() {\n                const ganttStyles = Gantt.styles;\n                // Get the width of the treelist portion.\n                const listTableWidth = this.wrapper.find(DOT + ganttStyles.list + \" \" + DOT + ganttStyles.gridContent + \">table\").width();\n                // Get the height of the treelist portion.\n                const listTableHeight = this.wrapper.find(DOT + ganttStyles.list + \" \" + DOT + ganttStyles.gridContent + \">table\").height();\n                // Get the height of the table header.\n                const gridHeaderHeight = this.wrapper.find(DOT + ganttStyles.list + \" \" + DOT + ganttStyles.gridHeader).outerHeight();\n                // Get the width of the timeline portion.\n                const timelineTableWidth = this.wrapper.find(DOT + ganttStyles.timeline + \" \" + DOT + ganttStyles.gridContent + \" table\").width();\n                const content = this.wrapper.clone();\n\n                content.find(DOT + ganttStyles.list).css(\"height\", listTableHeight + gridHeaderHeight);\n                content.find(DOT + ganttStyles.splitter).css(\"width\", timelineTableWidth + listTableWidth);\n                content.find(DOT + ganttStyles.splitter).css(\"height\", listTableHeight + gridHeaderHeight);\n\n                return this._drawPDFShadow({\n                    content: content\n                }, {\n                    avoidLinks: this.options.pdf.avoidLinks\n                });\n            };\n        }\n\n        kendo.ui.plugin(Gantt);\n\n        extend(true, Gantt, { styles: ganttStyles });\n\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    exports.__meta__ = __meta__;\n    exports.default = kendo$1;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}