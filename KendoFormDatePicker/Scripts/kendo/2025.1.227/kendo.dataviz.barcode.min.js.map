{"version":3,"sources":["raw-js/kendo.dataviz.barcode.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendo","_globals","DatavizBarcode","DatavizCore","Drawing","ChartsCmnChunk","DrawingCmnChunk","this","kendo_dataviz_core_js","kendo_drawing_js","kendo_charts_cmn_chunk_js","kendo_drawing_cmn_chunk_js","$","window","dataviz","Widget","ui","extend","deepExtend","inArray","isPlainObject","numberRegex","alphanumericRegex","getNext","value","index","count","substring","Encoding","Class","init","options","setOptions","that","quietZoneLength","addQuietZone","encode","width","height","e","initValue","addData","baseUnit","pattern","addCheckSum","push","invalidCharacterError","character","Error","format","name","encodings","code39Base","minBaseUnitLength","addStart","idx","length","addCharacter","charAt","pushCheckSum","addStop","prepareValues","charData","characterMap","addBase","code39ExtendedBase","charCodeAt","addExtended","code","patterns","i","extendedMappings","call","j","dataLength","shiftCharacters","String","fromCharCode","result","dataCharacter","specialAsciiCodes","Math","floor","shiftValuesAsciiCodes","code39","checkSumMod","minRatio","maxRatio","gapWidth","splitCharacter","patternString","minBaseUnit","ratio","minHeight","max","getBaseUnit","parseFloat","toFixed","minWidth","ceil","getBaseWidth","concat","replace","split","characterLength","addPattern","START","addCharacterGap","patternMappings","b","w","B","W","A","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","X","Y","Z","code39extended","SHIFT0","SHIFT1","SHIFT2","SHIFT3","code93","cCheckSumTotal","kCheckSumTotal","values","setBaseUnit","TERMINATION_BAR","checkValues","_getCheckValues","checksum","join","_findCharacterByValue","cValue","wightedSum","weightedValue","total","parseInt","code93extended","state128","encoding","is","move","pushState","state128AB","FNC4","states","_initMoves","isCode","encodingState","_moves","maxLength","numberMatch","substr","match","indexOf","getValue","_moveFNC","shiftKey","_shiftState","_moveState","fnc","previousState","key","SHIFT","shifted","MOVE","states128","next4","test","dependentStates","_initSubStates","subState","_getSubState","_initSubState","state","_pushStart","pushData","subStates","_getAll","FNC1","startState","startAI","endAI","current","nextStart","separatorLength","regexSeparators","RegExp","getBySeparator","getByLength","ai","id","validate","type","min","getAI","unsupportedAIError","start","end","applicationIdentifiers","multiKey","ids","ranges","code128Base","fn","_initStates","checkSum","totalUnits","position","getNextState","temp","STOP","toString","code128a","code128b","code128c","code128","msiBase","checkSumLength","checkSums","checkSumType","Modulo10","evenSum","oddSum","odd","Modulo11","checkValue","weightedSum","Modulo11Modulo10","mod11Value","Modulo10Modulo10","mod10Value","msimod10","msimod11","msimod1110","msimod1010","code11","kCheckSumMinLength","DASH_VALUE","DASH","getWeightedSum","kValue","isNaN","postnet","VALID_CODE_LENGTHS","DIGIT_SEPARATOR","baseHeight","pop","y1","y2","ean13","calculateChecksum","leftKey","leftPart","rightPart","addPieces","addSide","middle","keyTable","Array","prototype","slice","digits","reverse","arrToAdd","limitedHeight","even","ean8","Barcode","element","wrapper","addClass","css","surfaceWrap","appendTo","surface","create","renderAs","_setOptions","redraw","size","_getSize","clear","setSize","createVisual","draw","visual","getSize","dimensions","_resize","_render","textToDisplay","textOptions","text","textMargin","margin","border","contentBox","unpad","padding","barHeight","append","_getBackground","visible","n","font","top","bottom","_getText","_bandsGroup","_getBands","exportVisual","z","step","item","x1","group","rect","fromPoints","path","fromRect","fill","color","stroke","box","toRect","background","dashType","_textbox","align","vAlign","reflow","renderVisual","toLowerCase","left","right","ExportMixin","plugin","jQuery","kendo$1","__meta__","category","description","depends","default","Object","defineProperty"],"mappings":";;;;;;;;CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,oBAAAC,OAAAF,EAAAC,QAAAE,QAAA,yBAAAA,QAAA,oBAAAA,QAAA,6BAAAA,QAAA,+BACA,mBAAAC,QAAAA,OAAAC,IAAAD,OAAA,CAAA,UAAA,qBAAA,gBAAA,yBAAA,2BAAAJ,GACAA,IAAAD,EAAA,oBAAAO,WAAAA,WAAAP,GAAAQ,MAAAC,MAAAT,EAAAS,OAAA,CAAA,EAAAT,EAAAS,MAAAC,SAAAV,EAAAS,MAAAC,UAAA,CAAA,EAAAV,EAAAS,MAAAC,SAAAC,eAAA,CAAA,GAAAX,EAAAS,MAAAC,SAAAE,YAAAZ,EAAAS,MAAAC,SAAAG,QAAAb,EAAAS,MAAAC,SAAAI,eAAAd,EAAAS,MAAAC,SAAAK,gBACA,CAJA,CAIAC,MAAA,SAAAd,EAAAe,EAAAC,EAAAC,EAAAC,IASA,SAAAC,GACAC,OAAAb,MAAAc,QAAAD,OAAAb,MAAAc,SAAA,CAAA,EAEA,IAAAd,EAAAa,OAAAb,MACAe,EAAAf,EAAAgB,GAAAD,OAEAE,EAAAL,EAAAK,OACAC,EAAAlB,EAAAkB,WACAC,EAAAP,EAAAO,QACAC,EAAAR,EAAAQ,cAEAN,EAAAd,EAAAc,QAIAO,EAAA,QACAC,EAAA,eAGA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,OAAAF,EAAAG,UAAAF,EAAAA,EAAAC,EACA,CAEA,IAAAE,EAAA5B,EAAA6B,MAAAZ,OAAA,CACAa,KAAA,SAAAC,GACAxB,KAAAyB,WAAAD,EACA,EACAC,WAAA,SAAAD,GACA,IAAAE,EAAA1B,KACA0B,EAAAF,QAAAd,EAAA,CAAA,EAAAgB,EAAAF,QAAAA,GACAE,EAAAC,gBAAAD,EAAAF,QAAAI,aAAA,EAAAF,EAAAF,QAAAG,gBAAA,CACA,EACAE,OAAA,SAAAZ,EAAAa,EAAAC,GACA,IAAAL,EAAA1B,KAiBA,OAhBAG,EAAA6B,EAAAf,KACAA,GAAA,IAGAS,EAAAO,UAAAhB,EAAAa,EAAAC,GAEAL,EAAAF,QAAAI,cACAF,EAAAE,eAGAF,EAAAQ,UAEAR,EAAAF,QAAAI,cACAF,EAAAE,eAGA,CACAO,SAAAT,EAAAS,SACAC,QAAAV,EAAAU,QAEA,EACAZ,QAAA,CACAG,gBA1CA,GA2CAC,cAAA,EACAS,aAAA,GAEAJ,UAAA,WAAA,EACAL,aAAA,WACA5B,KAAAoC,QAAAE,KAAAtC,KAAAwB,QAAAG,iBAhDA,GAiDA,EACAO,QAAA,WACA,EACAK,sBAAA,SAAAC,GACA,MAAA,IAAAC,MAAAhD,EAAAiD,OAlDA,iDAkDAF,EAAAxC,KAAA2C,MACA,IAGAC,EAAA,CAAA,EAEAC,EAAAxB,EAAAX,OAAA,CACAoC,kBAAA,GACAZ,QAAA,WACA,IAAAR,EAAA1B,KACAiB,EAAAS,EAAAT,MAEAS,EAAAqB,WAEA,IAAA,IAAAC,EAAA,EAAAA,EAAA/B,EAAAgC,OAAAD,IACAtB,EAAAwB,aAAAjC,EAAAkC,OAAAH,IAGAtB,EAAAF,QAAAa,aACAX,EAAA0B,eAGA1B,EAAA2B,UACA3B,EAAA4B,eACA,EACAJ,aAAA,SAAAV,GACA,IAAAd,EAAA1B,KACAuD,EAAA7B,EAAA8B,aAAAhB,GACAe,GACA7B,EAAAa,sBAAAC,GAEAd,EAAA+B,QAAAF,EACA,EACAE,QAAA,WAAA,IAGAC,EAAA,CACAR,aAAA,SAAAV,GACA,IAAAd,EAAA1B,KACA0B,EAAA8B,aAAAhB,GACAd,EAAA+B,QAAA/B,EAAA8B,aAAAhB,IAEAA,EAAAmB,WAAA,GAAA,IACAjC,EAAAa,sBAAAC,GAGAd,EAAAkC,YAAApB,EAAAmB,WAAA,GAEA,EACAC,YAAA,SAAAC,GAGA,IAFA,IACAC,EADApC,EAAA1B,KAEA+D,EAAA,EAAAA,EAAArC,EAAAsC,iBAAAf,OAAAc,IACA,GAAAD,EAAApC,EAAAsC,iBAAAD,GAAAE,KAAAvC,EAAAmC,GAAA,CACA,IAAA,IAAAK,EAAA,EAAAA,EAAAJ,EAAAb,OAAAiB,IACAxC,EAAA+B,QAAAK,EAAAI,IAGA,YADAxC,EAAAyC,YAAAL,EAAAb,OAAA,EAEA,CAEA,EACAe,iBAAA,CACA,SAAAH,GACA,GAAA,IAAAA,GAAAA,GAAA,IAAA,CACA,IAAAnC,EAAA1B,KACA,MAAA,CAAA0B,EAAA8B,aAAA9B,EAAA0C,gBAAA,IAAA1C,EAAA8B,aAAAa,OAAAC,aAAAT,EAAA,KACA,CACA,EACA,SAAAA,GACA,GAAA,IAAAA,GAAAA,GAAA,GAAA,CACA,IAAAnC,EAAA1B,KACA,MAAA,CAAA0B,EAAA8B,aAAA9B,EAAA0C,gBAAA,IAAA1C,EAAA8B,aAAAa,OAAAC,aAAAT,EAAA,KACA,CACA,EACA,SAAAA,GACA,GAAA,GAAAA,GAAAA,GAAA,GAAA,CACA,IAAAnC,EAAA1B,KACA,MAAA,CAAA0B,EAAA8B,aAAA9B,EAAA0C,gBAAA,IAAA1C,EAAA8B,aAAAa,OAAAC,aAAAT,EAAA,KACA,CACA,EACA,SAAAA,GACA,IACAU,EACAC,EAFA9C,EAAA1B,KAGA,GAAA0B,EAAA+C,kBAAAZ,GAIA,CACAU,EAAA,GACA,IAAA,IAAAR,EAAA,EAAAA,EAAArC,EAAA+C,kBAAAZ,GAAAZ,OAAAc,IACAQ,EAAAjC,KAAAZ,EAAA8B,aAAA9B,EAAA0C,gBAAA,KACAG,EAAAjC,KAAAZ,EAAA8B,aAAA9B,EAAA+C,kBAAAZ,GAAAE,IAEA,MATAS,EAAA,EAAAE,KAAAC,MAAAd,EAAA,KAAAA,EAAA,IAAA,GAAA,GACAU,EAAA,CAAA7C,EAAA8B,aAAA9B,EAAA0C,gBAAA,IAAA1C,EAAA8B,aAAAa,OAAAC,aAAAE,KAUA,OAAAD,CACA,GAEAE,kBAAA,CACA,EAAA,CAAA,KACA,GAAA,CAAA,KACA,GAAA,CAAA,KACA,IAAA,CAAA,IAAA,IAAA,IAAA,MAEAG,sBAAA,CACA,GAAA,GACA,GAAA,GACA,GAAA,GACA,GAAA,IAEApB,aAAA,CACA,KAAA,EACA,KAAA,EACAnD,GAAA,EACA,KAAA,GAEA+D,gBAAA,CAAA,SAAA,SAAA,SAAA,WAGAxB,EAAAiC,OAAAhC,EAAAnC,OAAA,CACAiC,KAAA,UACAmC,YAAA,GACAC,SAAA,IACAC,SAAA,EACAC,SAAA,EACAC,eAAA,IACAjD,UAAA,SAAAhB,EAAAa,EAAAC,GACA,IAAAL,EAAA1B,KACA0B,EAAAI,MAAAA,EACAJ,EAAAK,OAAAA,EACAL,EAAAT,MAAAA,EACAS,EAAAyC,WAAAlD,EAAAgC,OACAvB,EAAAU,QAAA,GACAV,EAAAyD,cAAA,EACA,EACA7B,cAAA,WACA,IACAnB,EADAT,EAAA1B,KAEAoF,EAAA1D,EAAAoB,kBACAuC,EAAA3D,EAAAsD,SACAD,EAAArD,EAAAqD,SACAO,EAAAZ,KAAAa,IAAA,IAAA7D,EAAAI,MAAA,IACA,GAAAJ,EAAAK,OAAAuD,EACA,MAAA,IAAA7C,MAAA,sDAAAf,EAAAT,MAAA,QAAAqE,GAGA,MAAAnD,EAAAT,EAAA8D,YAAAH,IAAAD,GAAAC,EAAAN,GACAM,EAAAI,YAAAJ,EAAA,IAAAK,QAAA,IAGA,GAAAvD,EAAAiD,EAAA,CACA,IAAAO,EAAAjB,KAAAkB,KAAAlE,EAAAmE,aAAAd,GAAAK,GACA,MAAA,IAAA3C,MAAA,oDAAAf,EAAAT,MAAA,QAAA0E,EACA,CAEAjE,EAAA2D,MAAAA,EACA3D,EAAAS,SAAAA,EACAT,EAAAyD,cAAAzD,EAAAyD,cAAA/D,UAAA,EAAAM,EAAAyD,cAAAlC,OAAA,GACAvB,EAAAU,QAAAV,EAAAU,QAAA0D,OAAApE,EAAAyD,cAAAY,QAAA,SAAAV,GAAAW,MAAAtE,EAAAwD,gBACA,EACAM,YAAA,SAAAH,GACA,OAAArF,KAAA8B,MAAA9B,KAAA6F,aAAAR,EACA,EACAQ,aAAA,SAAAR,GACA,IAAA3D,EAAA1B,KACAiG,EAAA,GAAAZ,EAAA,GACA,OAAA3D,EAAAC,gBAAAsE,GAAAvE,EAAAyC,WAAA,GAAAzC,EAAAuD,UAAAvD,EAAAyC,WAAA,EACA,EACApB,SAAA,WACA,IAAArB,EAAA1B,KACA0B,EAAAwE,WAAAxE,EAAA8B,aAAA2C,MAAA/D,SACAV,EAAA0E,iBACA,EACA3C,QAAA,SAAAjB,GACAxC,KAAAkG,WAAA1D,EAAAJ,SACApC,KAAAoG,iBACA,EACA/C,QAAA,WACArD,KAAAkG,WAAAlG,KAAAwD,aAAA2C,MAAA/D,QACA,EACA8D,WAAA,SAAA9D,GACA,IAAA,IAAA2B,EAAA,EAAAA,EAAA3B,EAAAa,OAAAc,IACA/D,KAAAmF,eAAAnF,KAAAqG,gBAAAjE,EAAAe,OAAAY,GAEA,EACAqC,gBAAA,WACA,IAAA1E,EAAA1B,KACA0B,EAAAyD,eAAAzD,EAAAuD,SAAAvD,EAAAwD,cACA,EACAmB,gBAAA,CACAC,EAAA,KACAC,EAAA,KACAC,EAAA,SACAC,EAAA,UAEAjD,aAAA,CACA,EAAA,CAAApB,QAAA,YAAAnB,MAAA,GACA,EAAA,CAAAmB,QAAA,YAAAnB,MAAA,GACA,EAAA,CAAAmB,QAAA,YAAAnB,MAAA,GACA,EAAA,CAAAmB,QAAA,YAAAnB,MAAA,GACA,EAAA,CAAAmB,QAAA,YAAAnB,MAAA,GACA,EAAA,CAAAmB,QAAA,YAAAnB,MAAA,GACA,EAAA,CAAAmB,QAAA,YAAAnB,MAAA,GACA,EAAA,CAAAmB,QAAA,YAAAnB,MAAA,GACA,EAAA,CAAAmB,QAAA,YAAAnB,MAAA,GACA,EAAA,CAAAmB,QAAA,YAAAnB,MAAA,GACAyF,EAAA,CAAAtE,QAAA,YAAAnB,MAAA,IACAuF,EAAA,CAAApE,QAAA,YAAAnB,MAAA,IACA0F,EAAA,CAAAvE,QAAA,YAAAnB,MAAA,IACA2F,EAAA,CAAAxE,QAAA,YAAAnB,MAAA,IACA4F,EAAA,CAAAzE,QAAA,YAAAnB,MAAA,IACA6F,EAAA,CAAA1E,QAAA,YAAAnB,MAAA,IACA8F,EAAA,CAAA3E,QAAA,YAAAnB,MAAA,IACA+F,EAAA,CAAA5E,QAAA,YAAAnB,MAAA,IACAgG,EAAA,CAAA7E,QAAA,YAAAnB,MAAA,IACAiG,EAAA,CAAA9E,QAAA,YAAAnB,MAAA,IACAkG,EAAA,CAAA/E,QAAA,YAAAnB,MAAA,IACAmG,EAAA,CAAAhF,QAAA,YAAAnB,MAAA,IACAoG,EAAA,CAAAjF,QAAA,YAAAnB,MAAA,IACAqG,EAAA,CAAAlF,QAAA,YAAAnB,MAAA,IACAsG,EAAA,CAAAnF,QAAA,YAAAnB,MAAA,IACAuG,EAAA,CAAApF,QAAA,YAAAnB,MAAA,IACAwG,EAAA,CAAArF,QAAA,YAAAnB,MAAA,IACAyG,EAAA,CAAAtF,QAAA,YAAAnB,MAAA,IACA0G,EAAA,CAAAvF,QAAA,YAAAnB,MAAA,IACA2G,EAAA,CAAAxF,QAAA,YAAAnB,MAAA,IACA4G,EAAA,CAAAzF,QAAA,YAAAnB,MAAA,IACA6G,EAAA,CAAA1F,QAAA,YAAAnB,MAAA,IACAwF,EAAA,CAAArE,QAAA,YAAAnB,MAAA,IACA8G,EAAA,CAAA3F,QAAA,YAAAnB,MAAA,IACA+G,EAAA,CAAA5F,QAAA,YAAAnB,MAAA,IACAgH,EAAA,CAAA7F,QAAA,YAAAnB,MAAA,IACA,IAAA,CAAAmB,QAAA,YAAAnB,MAAA,IACA,IAAA,CAAAmB,QAAA,YAAAnB,MAAA,IACA,IAAA,CAAAmB,QAAA,YAAAnB,MAAA,IACAZ,EAAA,CAAA+B,QAAA,YAAAnB,MAAA,IACA,IAAA,CAAAmB,QAAA,YAAAnB,MAAA,IACA,IAAA,CAAAmB,QAAA,YAAAnB,MAAA,IACA,IAAA,CAAAmB,QAAA,YAAAnB,MAAA,IACAkF,MAAA,CAAA/D,QAAA,cAEAZ,QAAA,CACAa,aAAA,KAIAO,EAAAsF,eAAAtF,EAAAiC,OAAAnE,OAAAC,EAAA,CAAA,EAAA+C,EAAA,CACAf,KAAA,mBACAa,aAAA,CACA2E,OAAA,CAAA/F,QAAA,YAAAnB,MAAA,IACAmH,OAAA,CAAAhG,QAAA,YAAAnB,MAAA,IACAoH,OAAA,CAAAjG,QAAA,YAAAnB,MAAA,IACAqH,OAAA,CAAAlG,QAAA,YAAAnB,MAAA,QAIA2B,EAAA2F,OAAA1F,EAAAnC,OAAA,CACAiC,KAAA,UACA6F,eAAA,GACAC,eAAA,GACA3D,YAAA,GACA7C,UAAA,SAAAhB,EAAAa,EAAAC,GACA,IAAAL,EAAA1B,KACA0B,EAAAT,MAAAA,EACAS,EAAAI,MAAAA,EACAJ,EAAAK,OAAAA,EACAL,EAAAU,QAAA,GACAV,EAAAgH,OAAA,GACAhH,EAAAyC,WAAAlD,EAAAgC,MACA,EACAK,cAAA,WACA,IAAA5B,EAAA1B,KACAsF,EAAAZ,KAAAa,IAAA,IAAA7D,EAAAI,MAAA,IACA,GAAAJ,EAAAK,OAAAuD,EACA,MAAA,IAAA7C,MAAA,uBAKA,GAFAf,EAAAiH,cAEAjH,EAAAS,SAAAT,EAAAoB,kBACA,MAAA,IAAAL,MAAA,qBAEA,EACAkG,YAAA,WACA,IAAAjH,EAAA1B,KAEA0B,EAAAS,SAAAT,EAAAI,OAAA,GAAAJ,EAAAyC,WAAA,EADA,GACAzC,EAAAC,gBAAA,EACA,EACAoB,SAAA,WACA,IAAAX,EAAApC,KAAAwD,aAAA2C,MAAA/D,QACApC,KAAAkG,WAAA9D,EACA,EACAiB,QAAA,WACA,IAAA3B,EAAA1B,KACA0B,EAAAqB,WACArB,EAAAU,QAAAE,KAAAZ,EAAA8B,aAAAoF,gBACA,EACAnF,QAAA,SAAAF,GACAvD,KAAAkG,WAAA3C,EAAAnB,SACApC,KAAA0I,OAAApG,KAAAiB,EAAAtC,MACA,EACAmC,aAAA,WACA,IAEAG,EAFA7B,EAAA1B,KACA6I,EAAAnH,EAAAoH,kBAGApH,EAAAqH,SAAAF,EAAAG,KAAA,IACA,IAAA,IAAAjF,EAAA,EAAAA,EAAA8E,EAAA5F,OAAAc,IACAR,EAAA7B,EAAA8B,aAAA9B,EAAAuH,sBAAAJ,EAAA9E,KACArC,EAAAwE,WAAA3C,EAAAnB,QAEA,EACA0G,gBAAA,WACA,IAIAI,EAEAlG,EANAtB,EAAA1B,KACA0I,EAAAhH,EAAAgH,OACAzF,EAAAyF,EAAAzF,OACAkG,EAAA,EAKA,IAAAnG,EAAAC,EAAA,EAAAD,GAAA,EAAAA,IACAmG,GAAAzH,EAAA0H,cAAAV,EAAA1F,GAAAC,EAAAD,EAAAtB,EAAA8G,gBAKA,IAHAU,EAAAC,EAAAzH,EAAAoD,YAEAqE,EAAAzH,EAAA0H,cAAAF,EAAA,EAAAxH,EAAA+G,gBACAzF,EAAAC,EAAA,EAAAD,GAAA,EAAAA,IACAmG,GAAAzH,EAAA0H,cAAAV,EAAA1F,GAAAC,EAAAD,EAAA,EAAAtB,EAAA+G,gBAIA,MAAA,CAAAS,EADAC,EAAAzH,EAAAoD,YAEA,EACAmE,sBAAA,SAAAhI,GACA,IAAA,IAAAuB,KAAAxC,KAAAwD,aACA,GAAAxD,KAAAwD,aAAAhB,GAAAvB,QAAAA,EACA,OAAAuB,CAGA,EACA4G,cAAA,SAAAnI,EAAAC,EAAAmI,GACA,OAAAnI,EAAAmI,GAAAA,GAAApI,CACA,EACAiF,WAAA,SAAA9D,GAGA,IAFA,IAAAnB,EAEA8C,EAAA,EAAAA,EAAA3B,EAAAa,OAAAc,IACA9C,EAAAqI,SAAAlH,EAAAe,OAAAY,GAAA,IACA/D,KAAAoC,QAAAE,KAAArB,EAEA,EACAuC,aAAA,CACA,EAAA,CAAApB,QAAA,SAAAnB,MAAA,GACA,EAAA,CAAAmB,QAAA,SAAAnB,MAAA,GACA,EAAA,CAAAmB,QAAA,SAAAnB,MAAA,GACA,EAAA,CAAAmB,QAAA,SAAAnB,MAAA,GACA,EAAA,CAAAmB,QAAA,SAAAnB,MAAA,GACA,EAAA,CAAAmB,QAAA,SAAAnB,MAAA,GACA,EAAA,CAAAmB,QAAA,SAAAnB,MAAA,GACA,EAAA,CAAAmB,QAAA,SAAAnB,MAAA,GACA,EAAA,CAAAmB,QAAA,SAAAnB,MAAA,GACA,EAAA,CAAAmB,QAAA,SAAAnB,MAAA,GACAyF,EAAA,CAAAtE,QAAA,SAAAnB,MAAA,IACAuF,EAAA,CAAApE,QAAA,SAAAnB,MAAA,IACA0F,EAAA,CAAAvE,QAAA,SAAAnB,MAAA,IACA2F,EAAA,CAAAxE,QAAA,SAAAnB,MAAA,IACA4F,EAAA,CAAAzE,QAAA,SAAAnB,MAAA,IACA6F,EAAA,CAAA1E,QAAA,SAAAnB,MAAA,IACA8F,EAAA,CAAA3E,QAAA,SAAAnB,MAAA,IACA+F,EAAA,CAAA5E,QAAA,SAAAnB,MAAA,IACAgG,EAAA,CAAA7E,QAAA,SAAAnB,MAAA,IACAiG,EAAA,CAAA9E,QAAA,SAAAnB,MAAA,IACAkG,EAAA,CAAA/E,QAAA,SAAAnB,MAAA,IACAmG,EAAA,CAAAhF,QAAA,SAAAnB,MAAA,IACAoG,EAAA,CAAAjF,QAAA,SAAAnB,MAAA,IACAqG,EAAA,CAAAlF,QAAA,SAAAnB,MAAA,IACAsG,EAAA,CAAAnF,QAAA,SAAAnB,MAAA,IACAuG,EAAA,CAAApF,QAAA,SAAAnB,MAAA,IACAwG,EAAA,CAAArF,QAAA,SAAAnB,MAAA,IACAyG,EAAA,CAAAtF,QAAA,SAAAnB,MAAA,IACA0G,EAAA,CAAAvF,QAAA,SAAAnB,MAAA,IACA2G,EAAA,CAAAxF,QAAA,SAAAnB,MAAA,IACA4G,EAAA,CAAAzF,QAAA,SAAAnB,MAAA,IACA6G,EAAA,CAAA1F,QAAA,SAAAnB,MAAA,IACAwF,EAAA,CAAArE,QAAA,SAAAnB,MAAA,IACA8G,EAAA,CAAA3F,QAAA,SAAAnB,MAAA,IACA+G,EAAA,CAAA5F,QAAA,SAAAnB,MAAA,IACAgH,EAAA,CAAA7F,QAAA,SAAAnB,MAAA,IACA,IAAA,CAAAmB,QAAA,SAAAnB,MAAA,IACA,IAAA,CAAAmB,QAAA,SAAAnB,MAAA,IACA,IAAA,CAAAmB,QAAA,SAAAnB,MAAA,IACAZ,EAAA,CAAA+B,QAAA,SAAAnB,MAAA,IACA,IAAA,CAAAmB,QAAA,SAAAnB,MAAA,IACA,IAAA,CAAAmB,QAAA,SAAAnB,MAAA,IACA,IAAA,CAAAmB,QAAA,SAAAnB,MAAA,IACAkH,OAAA,CAAA/F,QAAA,SAAAnB,MAAA,IACAmH,OAAA,CAAAhG,QAAA,SAAAnB,MAAA,IACAoH,OAAA,CAAAjG,QAAA,SAAAnB,MAAA,IACAqH,OAAA,CAAAlG,QAAA,SAAAnB,MAAA,IACAkF,MAAA,CAAA/D,QAAA,UACAwG,gBAAA,OAIAhG,EAAA2G,eAAA3G,EAAA2F,OAAA7H,OAAAC,EAAA,CAAA,EAAA+C,EAAA,CACAf,KAAA,mBACAS,aAAA,WACA,IAEAnC,EAFAS,EAAA1B,KACA6I,EAAAnH,EAAAoH,kBAGApH,EAAAqH,SAAAF,EAAAG,KAAA,IAEA,IAAA,IAAAjF,EAAA,EAAAA,EAAA8E,EAAA5F,OAAAc,IACA9C,EAAA4H,EAAA9E,GACArC,EAAAkD,sBAAA3D,GACAS,EAAAkC,YAAAlC,EAAAkD,sBAAA3D,IAGAS,EAAAwE,WAAAxE,EAAA8B,aAAA9B,EAAAuH,sBAAAhI,IAAAmB,QAGA,KAGA,IAAAoH,EAAA/J,EAAA6B,MAAAZ,OAAA,CACAa,KAAA,SAAAkI,GACAzJ,KAAAyJ,SAAAA,CACA,EACA1G,SAAA,WAAA,EACA2G,GAAA,WAAA,EACAC,KAAA,WAAA,EACAC,UAAA,WAAA,IAGAC,EAAAL,EAAA9I,OAAA,CACAoJ,KAAA,OACAvI,KAAA,SAAAkI,EAAAM,GACA,IAAArI,EAAA1B,KACA0B,EAAA+H,SAAAA,EACA/H,EAAAqI,OAAAA,EACArI,EAAAsI,WAAAD,EACA,EACAhH,SAAA,WACA/C,KAAAyJ,SAAAvD,WAAAlG,KAAAmG,MACA,EACAuD,GAAA,SAAAzI,EAAAC,GACA,IAAA2C,EAAA5C,EAAA0C,WAAAzC,GACA,OAAAlB,KAAAiK,OAAApG,EACA,EACA8F,KAAA,SAAAO,GAIA,IAHA,IAAAxI,EAAA1B,KACAgD,EAAA,GAEAtB,EAAAyI,OAAAnH,GAAAiB,KAAAvC,EAAAwI,IAAAlH,EAAAtB,EAAAyI,OAAAlH,QACAD,GAEA,EACA4G,UAAA,SAAAM,GACA,IAIArG,EAJAnC,EAAA1B,KACA+J,EAAArI,EAAAqI,OACA9I,EAAAiJ,EAAAjJ,MACAmJ,EAAAnJ,EAAAgC,OAGA,GAAArC,EAAA,IAAAmJ,IAAA,EAAA,CACA,IAAAM,EAAApJ,EAAAqJ,OAAAJ,EAAAhJ,OAAAqJ,MAAA,WACAF,IACAD,EAAAnJ,EAAAuJ,QAAAH,EAAA,GAAAH,EAAAhJ,OAEA,CAEA,MAAA2C,EAAAqG,EAAAjJ,MAAA0C,WAAAuG,EAAAhJ,SAAA,GACAQ,EAAAuI,OAAApG,IAAAqG,EAAAhJ,MAAAkJ,GACA1I,EAAA+H,SAAAvD,WAAAxE,EAAA+I,SAAA5G,IACAqG,EAAAhJ,OAEA,EACA8I,WAAA,SAAAD,GACA,IAAArI,EAAA1B,KACA0B,EAAAyI,OAAA,GAEAvJ,EAAAc,EAAAoI,KAAAC,IAAA,GACArI,EAAAyI,OAAA7H,KAAAZ,EAAAgJ,UAGA9J,EAAAc,EAAAiJ,SAAAZ,IAAA,GACArI,EAAAyI,OAAA7H,KAAAZ,EAAAkJ,aAEAlJ,EAAAyI,OAAA7H,KAAAZ,EAAAmJ,WACA,EACAH,SAAA,SAAAR,GACA,GAAAA,EAAAY,IAEA,OADAZ,EAAAY,KAAA,EACAZ,EAAAa,eAAA/K,KAAAgL,GAEA,EACAJ,YAAA,SAAAV,GACA,IAAAxI,EAAA1B,KACA,GAAAkK,EAAAa,eAAArJ,EAAAiJ,WACAT,EAAAhJ,MAAA,GAAAgJ,EAAAjJ,MAAAgC,QACAvB,EAAA+H,SAAA/H,EAAAiJ,UAAAjB,GAAAQ,EAAAjJ,MAAAiJ,EAAAhJ,MAAA,IAGA,OAFAQ,EAAA+H,SAAAvD,WAAAxE,EAAAuJ,OACAf,EAAAgB,SAAA,GACA,CAEA,EACAL,WAAA,WAEA,OADA7K,KAAAyJ,SAAAvD,WAAAlG,KAAAmL,OACA,CACA,EACAF,MAAA,KAGAG,EAAA,CAAA,EAEAA,EAAA1E,EAAAmD,EAAAnJ,OAAA,CACAsK,IAAA,IACAL,SAAA,IACAV,OAAA,SAAApG,GACA,OAAAA,GAAA,GAAAA,EAAA,EACA,EACA4G,SAAA,SAAA5G,GACA,OAAAA,EAAA,GACAA,EAAA,GAGAA,EAAA,EACA,EACAsH,KAAA,IACAhF,MAAA,MAGAiF,EAAA5E,EAAAqD,EAAAnJ,OAAA,CACAsK,IAAA,IACAL,SAAA,IACAV,OAAA,SAAApG,GACA,OAAAA,GAAA,IAAAA,EAAA,GACA,EACA4G,SAAA,SAAA5G,GACA,OAAAA,EAAA,EACA,EACAsH,KAAA,IACAhF,MAAA,MAGAiF,EAAAzE,EAAA6C,EAAA9I,OAAA,CACAsK,IAAA,IACAjI,SAAA,WACA/C,KAAAyJ,SAAAvD,WAAAlG,KAAAmG,MACA,EACAuD,GAAA,SAAAzI,EAAAC,GACA,IAAAmK,EAAArK,EAAAC,EAAAC,EAAA,GACA,OAAAA,EAAA,GAAAD,EAAAgC,QAAA,GAAAhC,EAAAgC,SAAAnC,EAAAwK,KAAAD,EACA,EACA1B,KAAA,WACA3J,KAAAyJ,SAAAvD,WAAAlG,KAAAmL,KACA,EACAvB,UAAA,SAAAM,GAEA,IADA,IAAArG,GACAA,EAAA7C,EAAAkJ,EAAAjJ,MAAAiJ,EAAAhJ,MAAA,KACAJ,EAAAwK,KAAAzH,IAAA,GAAAA,EAAAZ,QAEAjD,KAAAyJ,SAAAvD,WAAAoD,SAAAzF,EAAA,KACAqG,EAAAhJ,OAAA,CAEA,EACAuJ,SAAA,SAAA5G,GACA,OAAAA,CACA,EACAsH,KAAA,GACAhF,MAAA,MAGAiF,EAAAtB,KAAAN,EAAA9I,OAAA,CACAsK,IAAA,OACAO,gBAAA,CAAA,IAAA,KACAhK,KAAA,SAAAkI,EAAAM,GACA/J,KAAAyJ,SAAAA,EACAzJ,KAAAwL,eAAAzB,EACA,EACAhH,SAAA,SAAAmH,GACA,IAAArG,EAAAqG,EAAAjJ,MAAA0C,WAAA,GAAA,IACA8H,EAAAzL,KAAA0L,aAAA7H,GAEA7D,KAAAyJ,SAAAgC,GAAA1I,UACA,EACA2G,GAAA,SAAAzI,EAAAC,GACA,IAAA2C,EAAA5C,EAAA0C,WAAAzC,GACA,OAAAlB,KAAAiK,OAAApG,EACA,EACAoG,OAAA,SAAApG,GACA,OAAAA,GAAA,KAAAA,EAAA,GACA,EACA+F,UAAA,SAAAM,GACA,IAAAxI,EAAA1B,KACAyL,EAAA/J,EAAAiK,cAAAzB,GACAT,EAAA/H,EAAA+H,SACAxG,EAAAwI,EAAAxK,MAAAgC,OAGA,GAFAiH,EAAAhJ,OAAA+B,EAEAA,EAAA,EAEA,IADA,IAAAY,EACA4H,EAAAvK,MAAA+B,EAAAwI,EAAAvK,QACA2C,EAAA4H,EAAAxK,MAAA0C,WAAA8H,EAAAvK,OACAuK,EAAAG,MAAAlK,EAAAgK,aAAA7H,GACA4H,EAAAV,eAAAU,EAAAG,QACAH,EAAAV,cAAAU,EAAAG,MACAnC,EAAAgC,EAAAG,OAAAjC,KAAA8B,IAEAhC,EAAAvD,WAAAuD,EAAAgC,EAAAG,OAAAT,MACA1B,EAAAvD,WAAAuD,EAAAgC,EAAAG,OAAAnB,SAAA5G,SAIA4H,EAAAG,OAAAH,EAAAV,eACAtB,EAAAgC,EAAAG,OAAAjC,KAAA8B,GAEA/J,EAAAmK,WAAAJ,GACAhC,EAAAqC,SAAAL,EAAA/J,EAAAqK,WACA7B,EAAAhJ,MAAAgJ,EAAAjJ,MAAAgC,QACAvB,EAAAmK,WAAAJ,GAIAvB,EAAAY,KAAA,EACAZ,EAAA0B,MAAAH,EAAAG,KACA,EACAC,WAAA,SAAAJ,GACA,IAAA/J,EAAA1B,KACA0B,EAAA+H,SAAAvD,WAAAxE,EAAA+H,SAAAgC,EAAAG,OAAAT,MACAzJ,EAAA+H,SAAAvD,WAAAxE,EAAA+H,SAAAgC,EAAAG,OAAAT,KACA,EACAQ,cAAA,SAAAzB,GACA,IAAAxI,EAAA1B,KACAyL,EAAA,CACAxK,MAAAS,EAAAsK,QAAA9B,EAAAjJ,MAAAiJ,EAAAhJ,OACAA,MAAA,GAKA,OAHAuK,EAAAG,MAAAlK,EAAAgK,aAAAD,EAAAxK,MAAA0C,WAAA,IACA8H,EAAAV,cAAAb,EAAAa,eAAArJ,EAAAsJ,IACAS,EAAAG,MAAA1B,EAAAa,cACAU,CACA,EACAD,eAAA,SAAAzB,GACA,IAAArI,EAAA1B,KACA0B,EAAAqK,UAAA,GACA,IAAA,IAAAhI,EAAA,EAAAA,EAAAgG,EAAA9G,OAAAc,IACAnD,EAAAmJ,EAAAhG,GAAArC,EAAA6J,kBAAA,GACA7J,EAAAqK,UAAAzJ,KAAAyH,EAAAhG,GAGA,EACA2H,aAAA,SAAA7H,GAEA,IADA,IAAAnC,EAAA1B,KACA+D,EAAA,EAAAA,EAAArC,EAAAqK,UAAA9I,OAAAc,IACA,GAAArC,EAAA+H,SAAA/H,EAAAqK,UAAAhI,IAAAkG,OAAApG,GACA,OAAAnC,EAAAqK,UAAAhI,EAGA,EACAiI,QAAA,SAAA/K,EAAAC,GAGA,IAFA,IAAA2C,EACAU,EAAA,IACAV,EAAA5C,EAAA0C,WAAAzC,OAAAlB,KAAAiK,OAAApG,IACAU,GAAAF,OAAAC,aAAAT,EAAA,KAEA,OAAAU,CACA,IAGA6G,EAAAa,KAAAzC,EAAA9I,OAAA,CACAsK,IAAA,OACAkB,WAAA,IACAX,gBAAA,CAAA,IAAA,KACAY,QAAA,IACAC,MAAA,IACA7K,KAAA,SAAAkI,EAAAM,GACA/J,KAAAyJ,SAAAA,EACAzJ,KAAA+J,OAAAA,CACA,EACAhH,SAAA,WACA/C,KAAAyJ,SAAAzJ,KAAAkM,YAAAnJ,UACA,EACA2G,GAAA,WACA,OAAA9I,EAAAZ,KAAAgL,IAAAhL,KAAA+J,SAAA,CACA,EACAH,UAAA,SAAAM,GACA,IAQAmC,EACAC,EACAC,EAVA7K,EAAA1B,KACAyJ,EAAA/H,EAAA+H,SACAxI,EAAAiJ,EAAAjJ,MAAA8E,QAAA,MAAA,IACAyG,EAAA,IAAAC,OAAA,IAAA/K,EAAAyK,QAAAzK,EAAA0K,MAAA,IAAA,KACAlL,EAAAgJ,EAAAhJ,MACAuK,EAAA,CACAG,MAAAlK,EAAAwK,YAQA,IAFAzC,EAAAvD,WAAAxE,EAAAyE,SAEA,CAKA,GAJAsF,EAAAvK,MAAA,GAGAmL,GADAE,EAAAtL,EAAAkC,OAAAjC,KAAAQ,EAAAyK,QAAA,EAAA,GACA,EAAAzK,EAAAgL,eAAAzL,EAAAC,GAAAQ,EAAAiL,YAAA1L,EAAAC,IACA0L,GAAA3J,OACAqJ,EAAApL,EAAAqL,EAAAF,EAAAQ,GAAA5J,OAAAoJ,EAAAO,GAAA3J,YAIA,IADAqJ,EAAArL,EAAAuJ,QAAA9I,EAAAyK,QAAAjL,EAAA,IACA,EAAA,CACA,GAAAA,EAAAmL,EAAAO,GAAArH,IAAA8G,EAAAQ,GAAA5J,OAAAsJ,EAAAtL,EAAAgC,OACA,MAAA,IAAAR,MAAA,6DAEA6J,EAAArL,EAAAgC,MACA,CAOA,GALAwI,EAAAxK,MAAAA,EAAAG,UAAAF,EAAAoL,GAAAvG,QAAAyG,EAAA,IACA9K,EAAAoL,SAAAT,EAAAZ,EAAAxK,OAEAwI,EAAAqC,SAAAL,EAAA/J,EAAA6J,iBAEAe,GAAArL,EAAAgC,OACA,MAGA/B,EAAAoL,EAEAb,EAAAG,OAAAlK,EAAAwK,aACAzC,EAAA/H,EAAAwK,YAAAvC,KAAA8B,GACAA,EAAAG,MAAAlK,EAAAwK,YAGAG,EAAAO,GAAA3J,QACAwG,EAAAvD,WAAAxE,EAAAyE,MAEA,CACA+D,EAAAhJ,MAAAgJ,EAAAjJ,MAAAgC,MACA,EACA6J,SAAA,SAAAT,EAAApL,GACA,IAAA4C,EAAA5C,EAAAqJ,OAAA+B,EAAAQ,GAAA5J,QACA2J,EAAAP,EAAAO,GACA,IAAAA,EAAAG,OAAAjM,EAAAwK,KAAAzH,GACA,MAAA,IAAApB,MAAA,0BAAA4J,EAAAQ,GAAA,2DAGA,GAAA,gBAAAD,EAAAG,OAAAhM,EAAAuK,KAAAzH,GACA,MAAA,IAAApB,MAAA,0BAAA4J,EAAAQ,GAAA,qEAGA,GAAAD,EAAA3J,QAAA2J,EAAA3J,SAAAY,EAAAZ,OACA,MAAA,IAAAR,MAAA,0BAAA4J,EAAAQ,GAAA,YAAAD,EAAA3J,OAAA,qBAGA,GAAA2J,EAAAI,KAAAJ,EAAAI,IAAAnJ,EAAAZ,OACA,MAAA,IAAAR,MAAA,0BAAA4J,EAAAQ,GAAA,qBAAAD,EAAAI,IAAA,qBAGA,GAAAJ,EAAArH,KAAAqH,EAAArH,IAAA1B,EAAAZ,OACA,MAAA,IAAAR,MAAA,0BAAA4J,EAAAQ,GAAA,oBAAAD,EAAArH,IAAA,oBAEA,EACAoH,YAAA,SAAA1L,EAAAC,GAIA,IAHA,IACA2L,EACAD,EAFAlL,EAAA1B,KAGA+D,EAAA,EAAAA,GAAA,EAAAA,IAGA,GAFA8I,EAAA7L,EAAAC,EAAAC,EAAA6C,GACA6I,EAAAlL,EAAAuL,MAAAJ,IAAAnL,EAAAuL,MAAAJ,EAAAzL,UAAA,EAAAyL,EAAA5J,OAAA,IAEA,MAAA,CACA4J,GAAAA,EACAD,GAAAA,GAIAlL,EAAAwL,mBAAAL,EACA,EACAK,mBAAA,SAAAL,GACA,MAAA,IAAApK,MAAAhD,EAAAiD,OAAA,mDAAAmK,EACA,EACAH,eAAA,SAAAzL,EAAAC,GACA,IAAAQ,EAAA1B,KACAmN,EAAAlM,EAAAuJ,QAAA9I,EAAAyK,QAAAjL,GACAkM,EAAAnM,EAAAuJ,QAAA9I,EAAA0K,MAAAe,GACAN,EAAA5L,EAAAG,UAAA+L,EAAA,EAAAC,GACAR,EAAAlL,EAAAuL,MAAAJ,IAAAnL,EAAAuL,MAAAJ,EAAAvC,OAAAuC,EAAA5J,OAAA,IAKA,OAJA2J,GACAlL,EAAAwL,mBAAAL,GAGA,CACAD,GAAAA,EACAC,GAAAA,EAEA,EACAI,MAAA,SAAAJ,GACA,IAAAD,EAAA5M,KAAAqN,uBACAC,EAAAV,EAAAU,SACA,GAAAV,EAAAC,GACA,OAAAD,EAAAC,GAGA,IAAA,IAAA9I,EAAA,EAAAA,EAAAuJ,EAAArK,OAAAc,IAAA,CACA,GAAAuJ,EAAAvJ,GAAAwJ,KAAA3M,EAAAiM,EAAAS,EAAAvJ,GAAAwJ,MAAA,EACA,OAAAD,EAAAvJ,GAAAgJ,KAEA,GAAAO,EAAAvJ,GAAAyJ,OAEA,IADA,IAAAA,EAAAF,EAAAvJ,GAAAyJ,OACAtJ,EAAA,EAAAA,EAAAsJ,EAAAvK,OAAAiB,IACA,GAAAsJ,EAAAtJ,GAAA,IAAA2I,GAAAA,GAAAW,EAAAtJ,GAAA,GACA,OAAAoJ,EAAAvJ,GAAAgJ,IAIA,CACA,EACAM,uBAAA,CACA,GAAA,CAAA9H,IAAA,GAAAwH,KAAA,gBACA,IAAA,CAAA9J,OAAA,IACA,KAAA,CAAAsC,IAAA,EAAAwH,KAAA,gBACA,IAAA,CAAAxH,IAAA,EAAAwH,KAAA,gBACA,KAAA,CAAAxH,IAAA,GAAAwH,KAAA,gBACA,IAAA,CAAAC,IAAA,EAAAzH,IAAA,GAAAwH,KAAA,gBACA,KAAA,CAAAC,IAAA,EAAAzH,IAAA,GAAAwH,KAAA,gBACA,IAAA,CAAAC,IAAA,GAAAzH,IAAA,GAAAwH,KAAA,gBACA,KAAA,CAAAC,IAAA,GAAAzH,IAAA,GAAAwH,KAAA,gBACAO,SAAA,CAAA,CACAC,IAAA,CAAA,KAAA,KAAA,OAAA,QACAC,OAAA,CACA,CAAA,GAAA,IACA,CAAA,IAAA,KACA,CAAA,IAAA,KACA,CAAA,IAAA,MAEAT,KAAA,CAAA9J,OAAA,IACA,CACAsK,IAAA,CAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,OAAA,OAAA,OAAA,QACAC,OAAA,CAAA,EAAA,IACAT,KAAA,CAAAxH,IAAA,GAAAwH,KAAA,iBACA,CACAQ,IAAA,CAAA,QACAC,OAAA,CAAA,CAAA,IAAA,MACAT,KAAA,CAAA9J,OAAA,KACA,CACAsK,IAAA,CAAA,KAAA,KAAA,MAAA,MAAA,QACAR,KAAA,CAAAxH,IAAA,GAAAwH,KAAA,iBACA,CACAQ,IAAA,CAAA,KAAA,OAAA,OAAA,QACAR,KAAA,CAAA9J,OAAA,KACA,CACAsK,IAAA,CAAA,KAAA,KAAA,QACAR,KAAA,CAAA9J,OAAA,KACA,CACAsK,IAAA,CAAA,OACAC,OAAA,CACA,CAAA,IAAA,MAEAT,KAAA,CAAA9J,OAAA,IACA,CACAsK,IAAA,CAAA,KAAA,QACAR,KAAA,CAAA9J,OAAA,IACA,CACAsK,IAAA,CAAA,KAAA,MACAR,KAAA,CAAAxH,IAAA,EAAAwH,KAAA,iBACA,CACAQ,IAAA,CAAA,MAAA,OACAR,KAAA,CAAAxH,IAAA,GAAAwH,KAAA,iBACA,CACAQ,IAAA,CAAA,MAAA,OACAR,KAAA,CAAAC,IAAA,EAAAzH,IAAA,GAAAwH,KAAA,iBACA,CACAQ,IAAA,CAAA,MAAA,OACAR,KAAA,CAAAC,IAAA,EAAAzH,IAAA,GAAAwH,KAAA,iBACA,CACAQ,IAAA,CAAA,OAAA,QACAR,KAAA,CAAA9J,OAAA,OAGAkD,MAAA,MAGA,IAAAsH,EAAApM,EAAAX,OAAA,CACAa,KAAA,SAAAC,GACAH,EAAAqM,GAAAnM,KAAA0C,KAAAjE,KAAAwB,GACAxB,KAAA2N,aACA,EACAA,YAAA,WAEA,IADA,IAAAjM,EAAA1B,KACA+D,EAAA,EAAAA,EAAArC,EAAAqI,OAAA9G,OAAAc,IACArC,EAAAA,EAAAqI,OAAAhG,IAAA,IAAAqH,EAAA1J,EAAAqI,OAAAhG,IAAArC,EAAAA,EAAAqI,OAEA,EACA9H,UAAA,SAAAhB,EAAAa,EAAAC,GACA,IAAAL,EAAA1B,KACA0B,EAAAU,QAAA,GACAV,EAAAT,MAAAA,EACAS,EAAAI,MAAAA,EACAJ,EAAAK,OAAAA,EACAL,EAAAkM,SAAA,EACAlM,EAAAmM,WAAA,EACAnM,EAAAR,MAAA,EACAQ,EAAAoM,SAAA,CACA,EACA5L,QAAA,WACA,IAAAR,EAAA1B,KACAkK,EAAA,CACAjJ,MAAAS,EAAAT,MACAC,MAAA,EACA0K,MAAA,IAEA,IAAAlK,EAAAT,MAAAgC,SAIAiH,EAAA0B,MACA1B,EAAAa,cAAArJ,EAAAqM,aAAA7D,EAAAxI,EAAAqI,QAEArI,EAAAqB,SAAAmH,GAEAxI,EAAAoK,SAAA5B,EAAAxI,EAAAqI,QAEArI,EAAAW,cACAX,EAAA2B,UACA3B,EAAAiH,cACA,EACAmD,SAAA,SAAA5B,EAAAH,GAEA,IADA,IAAArI,EAAA1B,KAEA0B,EAAAwI,EAAA0B,OAAAhC,UAAAM,KACAA,EAAAhJ,OAAAgJ,EAAAjJ,MAAAgC,SAIA,GAAAiH,EAAAgB,QAKA,CACA,IAAA8C,EAAA9D,EAAA0B,MACA1B,EAAA0B,MAAA1B,EAAAa,cACAb,EAAAa,cAAAiD,EACA9D,EAAAgB,SAAA,CACA,MATAhB,EAAAa,cAAAb,EAAA0B,MACA1B,EAAA0B,MAAAlK,EAAAqM,aAAA7D,EAAAH,GACArI,EAAAwI,EAAA0B,OAAAjC,KAAAO,EASA,EACAnH,SAAA,SAAAmH,GACAlK,KAAAkK,EAAA0B,OAAA7I,SAAAmH,GACAlK,KAAA8N,SAAA,CACA,EACAzL,YAAA,WACA,IAAAX,EAAA1B,KAEA0B,EAAAqH,SAAArH,EAAAkM,SAAA,IACAlM,EAAAwE,WAAAxE,EAAAqH,SACA,EACA1F,QAAA,WACArD,KAAAkG,WAAAlG,KAAAiO,KACA,EACAtF,YAAA,WACA,IAAAjH,EAAA1B,KACA0B,EAAAS,SAAAT,EAAAI,OAAAJ,EAAAmM,WAAAnM,EAAAC,gBACA,EACAuE,WAAA,SAAArC,GAKA,IAJA,IAEA5C,EAFAS,EAAA1B,KACAoC,EAAAV,EAAA8B,aAAAK,GAAAqK,WAGAnK,EAAA,EAAAA,EAAA3B,EAAAa,OAAAc,IACA9C,EAAAqI,SAAAlH,EAAAe,OAAAY,GAAA,IACArC,EAAAU,QAAAE,KAAArB,GACAS,EAAAmM,YAAA5M,EAEAS,EAAAkM,UAAA/J,EAAAnC,EAAAoM,UACA,EACAC,aAAA,SAAA7D,EAAAH,GACA,IAAA,IAAAhG,EAAA,EAAAA,EAAAgG,EAAA9G,OAAAc,IACA,GAAA/D,KAAA+J,EAAAhG,IAAA2F,GAAAQ,EAAAjJ,MAAAiJ,EAAAhJ,OACA,OAAA6I,EAAAhG,GAGA/D,KAAAuC,sBAAA2H,EAAAjJ,MAAAkC,OAAA+G,EAAAhJ,OACA,EACAsC,aAAA,CACA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OACA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OACA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OACA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OACA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OACA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OACA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OACA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OACA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OACA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,OACA,OAAA,OAAA,OAAA,OAAA,OAAA,OAAA,SAEAyK,KAAA,MAGArL,EAAAuL,SAAAV,EAAA/M,OAAA,CACAiC,KAAA,aACAoH,OAAA,CAAA,OAIAnH,EAAAwL,SAAAX,EAAA/M,OAAA,CACAiC,KAAA,aACAoH,OAAA,CAAA,OAGAnH,EAAAyL,SAAAZ,EAAA/M,OAAA,CACAiC,KAAA,aACAoH,OAAA,CAAA,OAGAnH,EAAA0L,QAAAb,EAAA/M,OAAA,CACAiC,KAAA,WACAoH,OAAA,CAAA,IAAA,IAAA,IAAA,UAGAnH,EAAA,WAAA6K,EAAA/M,OAAA,CACAiC,KAAA,eACAoH,OAAA,CAAA,OAAA,IAAA,OAGA,IAAAwE,EAAAlN,EAAAX,OAAA,CACAuB,UAAA,SAAAhB,EAAAa,GACA,IAAAJ,EAAA1B,KACA0B,EAAAU,QAAA,GACAV,EAAAT,MAAAA,EACAS,EAAA8M,eAAA,EACA9M,EAAAI,MAAAA,CACA,EACA6G,YAAA,WACA,IAAAjH,EAAA1B,KAGA0B,EAAAS,SAAAT,EAAAI,OACA,IAAAJ,EAAAT,MAAAgC,OAAAvB,EAAA8M,gBAAA9M,EAAAC,gBAHA,EAIA,EACAO,QAAA,WACA,IAAAR,EAAA1B,KACAiB,EAAAS,EAAAT,MACAS,EAAAwE,WAAAxE,EAAAyE,OAEA,IAAA,IAAApC,EAAA,EAAAA,EAAA9C,EAAAgC,OAAAc,IACArC,EAAAwB,aAAAjC,EAAAkC,OAAAY,IAGArC,EAAAF,QAAAa,aACAX,EAAAW,cAGAX,EAAAwE,WAAAxE,EAAAuM,MACAvM,EAAAiH,aACA,EACAzF,aAAA,SAAAV,GACA,IAAAd,EAAA1B,KACAoC,EAAAV,EAAA8B,aAAAhB,GACAJ,GACAV,EAAAa,sBAAAC,GAEAd,EAAAwE,WAAA9D,EACA,EACA8D,WAAA,SAAA9D,GACA,IAAA,IAAA2B,EAAA,EAAAA,EAAA3B,EAAAa,OAAAc,IACA/D,KAAAoC,QAAAE,KAAAgH,SAAAlH,EAAAe,OAAAY,GAAA,IAEA,EACA1B,YAAA,WACA,IAEAwG,EAFAnH,EAAA1B,KAIA6I,EAHAnH,EAAA+M,UAAA/M,EAAAgN,cAGAzK,KAAAvC,EAAA+M,UAAA/M,EAAAT,OAEAS,EAAAqH,SAAAF,EAAAG,KAAA,IACA,IAAA,IAAAjF,EAAA,EAAAA,EAAA8E,EAAA5F,OAAAc,IACArC,EAAA8M,iBACA9M,EAAAwE,WAAAxE,EAAA8B,aAAAqF,EAAA9E,IAEA,EACA0K,UAAA,CACAE,SAAA,SAAA1N,GACA,IAEA+B,EACA4L,EACAC,EAJAhG,EAAA,CAAA,EAAA,IACAiG,EAAA7N,EAAAgC,OAAA,EAKA,IAAAD,EAAA,EAAAA,EAAA/B,EAAAgC,OAAAD,IACA6F,GAAA7F,EAAA8L,GAAA,IAAAxF,SAAArI,EAAAkC,OAAAH,GAAA,IAMA,IAHA6L,EAAAhG,EAAA,GACA+F,GAAA,EAAA/F,EAAA,IAAAqF,WAEAlL,EAAA,EAAAA,EAAA4L,EAAA3L,OAAAD,IACA6L,GAAAvF,SAAAsF,EAAAzL,OAAAH,GAAA,IAGA,MAAA,EAAA,GAAA6L,EAAA,IAAA,GACA,EACAE,SAAA,SAAA9N,GAOA,IANA,IAIA+N,EAJAC,EAAA,EAEAhM,EAAAhC,EAAAgC,OAIAc,EAAA,EAAAA,EAAAd,EAAAc,IAEAkL,MADAhM,EAAAc,GAAA,GAAA,GAAA,GACA9C,EAAAkC,OAAAY,GAGA,OAAA,KADAiL,GATA,GASAC,EATA,QAWA,CAAAD,GAEA,CAAA,EAAA,EACA,EACAE,iBAAA,SAAAjO,GACA,IACAkO,EADAtG,EAAA7I,KAAA+O,SAAA9N,GAIA,OAFAkO,EAAAlO,EAAA4H,EAAA,GAEAA,EAAA/C,OAAA9F,KAAA2O,SAAAQ,GACA,EACAC,iBAAA,SAAAnO,GACA,IACAoO,EADAxG,EAAA7I,KAAA2O,SAAA1N,GAIA,OAFAoO,EAAApO,EAAA4H,EAAA,GAEAA,EAAA/C,OAAA9F,KAAA2O,SAAAU,GACA,GAEA7L,aAAA,CAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,WAAA,YACA2C,MAAA,KACA8H,KAAA,MACAS,aAAA,KAGA9L,EAAA0M,SAAAf,EAAA7N,OAAA,CACAiC,KAAA,eACA+L,aAAA,aAGA9L,EAAA2M,SAAAhB,EAAA7N,OAAA,CACAiC,KAAA,eACA+L,aAAA,aAGA9L,EAAA4M,WAAAjB,EAAA7N,OAAA,CACAiC,KAAA,wBACA+L,aAAA,qBAGA9L,EAAA6M,WAAAlB,EAAA7N,OAAA,CACAiC,KAAA,wBACA+L,aAAA,qBAGA9L,EAAA8M,OAAArO,EAAAX,OAAA,CACAiC,KAAA,UACA6F,eAAA,GACAC,eAAA,EACAkH,mBAAA,GACA7K,YAAA,GACA8K,WAAA,GACAC,KAAA,IACA1J,MAAA,SACA8H,KAAA,QACAhM,UAAA,SAAAhB,EAAAa,GACA,IAAAJ,EAAA1B,KACA0B,EAAAU,QAAA,GACAV,EAAAT,MAAAA,EACAS,EAAAI,MAAAA,EACAJ,EAAAmM,WAAA,CACA,EACA3L,QAAA,WACA,IAAAR,EAAA1B,KACAiB,EAAAS,EAAAT,MACAS,EAAAwE,WAAAxE,EAAAyE,OAEA,IAAA,IAAApC,EAAA,EAAAA,EAAA9C,EAAAgC,OAAAc,IACArC,EAAAwB,aAAAjC,EAAAkC,OAAAY,IAGArC,EAAAF,QAAAa,aACAX,EAAAW,cAGAX,EAAAwE,WAAAxE,EAAAuM,MACAvM,EAAAiH,aACA,EACAA,YAAA,WACA,IAAAjH,EAAA1B,KACA0B,EAAAS,SAAAT,EAAAI,OAAAJ,EAAAmM,WAAAnM,EAAAC,gBACA,EACAU,YAAA,WACA,IAGA6G,EAHAxH,EAAA1B,KACAiB,EAAAS,EAAAT,MACAgC,EAAAhC,EAAAgC,OAQA,GALAiG,EAAAxH,EAAAoO,eAAA7O,EAAAgC,EAAAvB,EAAA8G,gBAAA9G,EAAAoD,YACApD,EAAAqH,SAAAG,EAAA,GACAxH,EAAAwE,WAAAxE,EAAA8B,aAAA0F,MAEAjG,GACAvB,EAAAiO,mBAAA,CACA,IAAAI,GAAA7G,EAAAxH,EAAAoO,eAAA7O,EAAAgC,EAAAvB,EAAA+G,iBAAA/G,EAAAoD,YACApD,EAAAqH,UAAAgH,EACArO,EAAAwE,WAAAxE,EAAA8B,aAAAuM,GACA,CACA,EACAD,eAAA,SAAA7O,EAAAgC,EAAAoG,GAEA,IADA,IAAA4F,EAAA,EACAlL,EAAA,EAAAA,EAAA9C,EAAAgC,OAAAc,IACAkL,GAAAjP,KAAAoJ,cAAApJ,KAAAyK,SAAAxJ,EAAAkC,OAAAY,IAAAd,EAAAc,EAAAsF,GAGA,OAAA4F,CACA,EACA7F,cAAA,SAAAnI,EAAAgC,EAAA/B,EAAAmI,GAEA,QADApG,EAAA/B,GAAAmI,GAAAA,GACApI,CACA,EACAwJ,SAAA,SAAAjI,GACA,IAAAd,EAAA1B,KACA,OAAAgQ,MAAAxN,IAGAA,IAAAd,EAAAmO,MACAnO,EAAAa,sBAAAC,GAEAd,EAAAkO,YALAtG,SAAA9G,EAAA,GAMA,EACAU,aAAA,SAAAV,GACA,IAAAd,EAAA1B,KACAiB,EAAAS,EAAA+I,SAAAjI,GACAJ,EAAAV,EAAA8B,aAAAvC,GACAS,EAAAwE,WAAA9D,EACA,EACA8D,WAAA,SAAA9D,GAEA,IADA,IAAAnB,EACA8C,EAAA,EAAAA,EAAA3B,EAAAa,OAAAc,IACA9C,EAAAqI,SAAAlH,EAAAe,OAAAY,GAAA,IACA/D,KAAAoC,QAAAE,KAAArB,GACAjB,KAAA6N,YAAA5M,CAEA,EACAuC,aAAA,CAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,SAAA,UACAhC,QAAA,CACAa,aAAA,KAIAO,EAAAqN,QAAA5O,EAAAX,OAAA,CACAiC,KAAA,UACAwD,MAAA,IACA+J,mBAAA,CAAA,EAAA,EAAA,IACAC,gBAAA,IACAlO,UAAA,SAAAhB,EAAAa,EAAAC,GACA,IAAAL,EAAA1B,KACA0B,EAAAK,OAAAA,EACAL,EAAAI,MAAAA,EACAJ,EAAA0O,WAAArO,EAAA,EACAL,EAAAT,MAAAA,EAAA8E,QAAA,IAAA0G,OAAA/K,EAAAyO,gBAAA,KAAA,IACAzO,EAAAU,QAAA,GACAV,EAAAoL,SAAApL,EAAAT,OACAS,EAAAkM,SAAA,EACAlM,EAAAiH,aACA,EACAzG,QAAA,WACA,IAAAR,EAAA1B,KACAiB,EAAAS,EAAAT,MACAS,EAAAwE,WAAAxE,EAAAyE,OAEA,IAAA,IAAApC,EAAA,EAAAA,EAAA9C,EAAAgC,OAAAc,IACArC,EAAAwB,aAAAjC,EAAAkC,OAAAY,IAGArC,EAAAF,QAAAa,aACAX,EAAAW,cAGAX,EAAAwE,WAAAxE,EAAAyE,OACAzE,EAAAU,QAAAiO,KACA,EACAnN,aAAA,SAAAV,GACA,IAAAd,EAAA1B,KACAoC,EAAAV,EAAA8B,aAAAhB,GACAd,EAAAkM,UAAAtE,SAAA9G,EAAA,IACAd,EAAAwE,WAAA9D,EACA,EACAC,YAAA,WACA,IAAAX,EAAA1B,KACA0B,EAAAqH,UAAA,GAAArH,EAAAkM,SAAA,IAAA,GACAlM,EAAAwB,aAAAxB,EAAAqH,SACA,EACAJ,YAAA,WACA,IAAAjH,EAAA1B,KAEA0B,EAAAS,SAAAT,EAAAI,OAAA,IAAAJ,EAAAT,MAAAgC,OAAA,GADA,EACAvB,EAAAC,gBACA,EACAmL,SAAA,SAAA7L,GACA,IAAAS,EAAA1B,KAKA,GAHAc,EAAAwK,KAAArK,IACAS,EAAAa,sBAAAtB,EAAAsJ,MAAA,UAAA,IAEA3J,EAAAK,EAAAgC,OAAAvB,EAAAwO,oBAAA,EACA,MAAA,IAAAzN,MAAA,qEAAAf,EAAAwO,mBAAAlH,KAAA,KAEA,EACA9C,WAAA,SAAA9D,GAGA,IAFA,IACAkO,EADA5O,EAAA1B,KAEA+D,EAAA,EAAAA,EAAA3B,EAAAa,OAAAc,IACAuM,EAAA5O,EAAAK,OAAAL,EAAA0O,WAAAhO,EAAAe,OAAAY,GACArC,EAAAU,QAAAE,KAAA,CAAAR,MAAA,EAAAwO,GAAAA,EAAAC,GAAA7O,EAAAK,SACAL,EAAAU,QAAAE,KAAA,EAEA,EACAkB,aAAA,CAAA,QAAA,QAAA,QAAA,QAAA,QAAA,QAAA,QAAA,QAAA,QAAA,WAGAZ,EAAA4N,MAAAnP,EAAAX,OAAA,CACAuB,UAAA,SAAAhB,EAAAa,EAAAC,GAGA,GAAA,KAFAd,GAAA,IAEAgC,QAAA,KAAAqI,KAAArK,GACA,MAAA,IAAAwB,MAAA,0DAGA,IAAAf,EAAA1B,KACA0B,EAAAU,QAAA,GACAV,EAAAF,QAAAO,OAAAA,EACAL,EAAAS,SAAAL,GAAA,GAAAJ,EAAAC,iBACAD,EAAAT,MAAAA,EACAS,EAAAqH,SAAArH,EAAA+O,oBACA/O,EAAAgP,QAAAzP,EAAA,GACAS,EAAAiP,SAAA1P,EAAAqJ,OAAA,EAAA,GACA5I,EAAAkP,UAAA3P,EAAAqJ,OAAA,GAAA5I,EAAAqH,QACA,EACA7G,QAAA,WACA,IAAAR,EAAA1B,KACA0B,EAAAmP,UAAAnP,EAAA8B,aAAA2J,OACAzL,EAAAoP,QAAApP,EAAAiP,SAAAjP,EAAAgP,SACAhP,EAAAmP,UAAAnP,EAAA8B,aAAAuN,QACArP,EAAAoP,QAAApP,EAAAkP,WACAlP,EAAAmP,UAAAnP,EAAA8B,aAAA2J,MACA,EACA2D,QAAA,SAAAH,EAAA3F,GAEA,IADA,IAAAtJ,EAAA1B,KACA+D,EAAA,EAAAA,EAAA4M,EAAA1N,OAAAc,IACAiH,GAAA1B,SAAA5H,EAAAsP,SAAAhG,GAAA7H,OAAAY,GAAA,IACArC,EAAAmP,UAAAI,MAAAC,UAAAC,MAAAlN,KAAAvC,EAAA8B,aAAA4N,OAAAT,EAAAxN,OAAAY,KAAAsN,WAAA,GAEA3P,EAAAmP,UAAAnP,EAAA8B,aAAA4N,OAAAT,EAAAxN,OAAAY,KAAA,EAGA,EACA8M,UAAA,SAAAS,EAAAC,GAEA,IADA,IAAA7P,EAAA1B,KACA+D,EAAA,EAAAA,EAAAuN,EAAArO,OAAAc,IACAwN,EACA7P,EAAAU,QAAAE,KAAA,CACAgO,GAAA,EACAC,GAAA,IAAA7O,EAAAF,QAAAO,OACAD,MAAAwP,EAAAvN,KAGArC,EAAAU,QAAAE,KAAAgP,EAAAvN,GAGA,EACA0M,kBAAA,WAIA,IAHA,IAAA3B,EAAA,EACA0C,EAAA,EACAvQ,EAAAjB,KAAAiB,MAAA+E,MAAA,IAAAqL,UAAArI,KAAA,IACAjF,EAAA,EAAAA,EAAA9C,EAAAgC,OAAAc,IACAA,EAAA,EACAyN,GAAAlI,SAAArI,EAAAkC,OAAAY,GAAA,IAGA+K,GAAAxF,SAAArI,EAAAkC,OAAAY,GAAA,IAIA,OADA,IAAA,EAAA+K,EAAA0C,GAAA,IAAA,EAEA,EACAR,SAAA,CACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,UAEAxN,aAAA,CACA4N,OAAA,CACA,CAAA,EAAA,EAAA,EAAA,GACA,CAAA,EAAA,EAAA,EAAA,GACA,CAAA,EAAA,EAAA,EAAA,GACA,CAAA,EAAA,EAAA,EAAA,GACA,CAAA,EAAA,EAAA,EAAA,GACA,CAAA,EAAA,EAAA,EAAA,GACA,CAAA,EAAA,EAAA,EAAA,GACA,CAAA,EAAA,EAAA,EAAA,GACA,CAAA,EAAA,EAAA,EAAA,GACA,CAAA,EAAA,EAAA,EAAA,IAEAjE,MAAA,CAAA,EAAA,EAAA,GACA4D,OAAA,CAAA,EAAA,EAAA,EAAA,EAAA,MAIAnO,EAAA6O,KAAA7O,EAAA4N,MAAA9P,OAAA,CACAuB,UAAA,SAAAhB,EAAAa,EAAAC,GACA,IAAAL,EAAA1B,KACA,GAAA,GAAAiB,EAAAgC,QAAA,KAAAqI,KAAArK,GACA,MAAA,IAAAwB,MAAA,0BAEAf,EAAAT,MAAAA,EACAS,EAAAF,QAAAO,OAAAA,EACAL,EAAAqH,SAAArH,EAAA+O,kBAAA/O,EAAAT,OACAS,EAAAiP,SAAAjP,EAAAT,MAAAqJ,OAAA,EAAA,GACA5I,EAAAkP,UAAAlP,EAAAT,MAAAqJ,OAAA,GAAA5I,EAAAqH,SACArH,EAAAU,QAAA,GACAV,EAAAS,SAAAL,GAAA,GAAAJ,EAAAC,gBACA,IAGA,IAAA+P,EAAAlR,EAAAE,OAAA,CACAa,KAAA,SAAAoQ,EAAAnQ,GACA,IAAAE,EAAA1B,KACAQ,EAAAkN,GAAAnM,KAAA0C,KAAAvC,EAAAiQ,EAAAnQ,GACAE,EAAAiQ,QAAAtR,EAAAsR,GACAjQ,EAAAkQ,QAAAlQ,EAAAiQ,QACAjQ,EAAAiQ,QAAAE,SAAA,aAAAC,IAAA,UAAA,SACApQ,EAAAqQ,YAAA1R,EAAA,WAAAyR,IAAA,WAAA,YAAAE,SAAAhS,KAAA2R,SACAjQ,EAAAuQ,QAAA7R,EAAAmG,EAAA2L,OAAAxQ,EAAAqQ,YAAA,GAAA,CACAhF,KAAArL,EAAAF,QAAA2Q,WAEAzQ,EAAA0Q,YAAA5Q,GACAA,GAAArB,EAAA6B,EAAAR,EAAAP,QACAS,EAAA2Q,QAEA,EAEA5Q,WAAA,SAAAD,GACAxB,KAAAoS,YAAA5Q,GACAxB,KAAAqS,QACA,EAEAA,OAAA,WACA,IAAAC,EAAAtS,KAAAuS,WAEAvS,KAAAiS,QAAAO,QACAxS,KAAAiS,QAAAQ,QAAA,CACA3Q,MAAAwQ,EAAAxQ,MACAC,OAAAuQ,EAAAvQ,SAGA/B,KAAA0S,eACA1S,KAAAiS,QAAAU,KAAA3S,KAAA4S,OACA,EAEAC,QAAA,WACA,OAAApT,EAAAqT,WAAA9S,KAAA2R,QACA,EAEAoB,QAAA,WACA/S,KAAAqS,QACA,EAEAK,aAAA,WACA1S,KAAA4S,OAAA5S,KAAAgT,SACA,EAEAA,QAAA,WACA,IAUAzO,EAAA0O,EAVAvR,EAAA1B,KACAwB,EAAAE,EAAAF,QACAP,EAAAO,EAAAP,MACAiS,EAAA1R,EAAA2R,KACAC,EAAAjT,EAAA0G,EAAAqM,EAAAG,QACAf,EAAA5Q,EAAA6Q,WACAe,EAAA9R,EAAA8R,QAAA,CAAA,EACA7J,EAAA/H,EAAA+H,SACA8J,EAAA,IAAApT,EAAAqG,EAAA,EAAA,EAAA8L,EAAAxQ,MAAAwQ,EAAAvQ,QAAAyR,MAAAF,EAAAxR,OAAA0R,MAAAhS,EAAAiS,SACAC,EAAAH,EAAAxR,SAIA6Q,EAAA,IAAAxS,EAAA2G,EAyBA,OAvBArF,EAAA6R,WAAAA,EACAX,EAAAe,OAAAjS,EAAAkS,eAAAtB,IAEAY,EAAAW,UAEAH,GADAtT,EAAA0T,EAAA7S,EAAA,CAAA8S,KAAAb,EAAAa,OAAAhS,OACAqR,EAAAY,IAAAZ,EAAAa,QAGA1P,EAAAkF,EAAA5H,OAAAZ,EAAAsS,EAAAzR,QAAA4R,GAEAR,EAAAW,UACAZ,EAAAhS,EACAO,EAAAuH,UAAA5I,EAAA6B,EAAAyH,EAAAV,YACAkK,GAAA,IAAAxJ,EAAAV,UAGA6J,EAAAe,OAAAjS,EAAAwS,SAAAjB,KAGAvR,EAAAgS,UAAAA,EACA1T,KAAAmU,YAAAnU,KAAAoU,UAAA7P,EAAAnC,QAAAmC,EAAApC,UACAyQ,EAAAe,OAAA3T,KAAAmU,aAEAvB,CACA,EAEAyB,aAAA,WACA,OAAArU,KAAAgT,SACA,EAEAT,SAAA,WACA,IAAA7Q,EAAA1B,KACA2R,EAAAjQ,EAAAiQ,QACAW,EAAA,IAAAlS,EAAAkU,EA3jDA,IACA,KAykDA,OAbA3C,EAAA7P,QAAA,IACAwQ,EAAAxQ,MAAA6P,EAAA7P,SAEA6P,EAAA5P,SAAA,IACAuQ,EAAAvQ,OAAA4P,EAAA5P,UAEAL,EAAAF,QAAAM,QACAwQ,EAAAxQ,MAAAJ,EAAAF,QAAAM,OAEAJ,EAAAF,QAAAO,SACAuQ,EAAAvQ,OAAAL,EAAAF,QAAAO,QAGAuQ,CACA,EAEArR,MAAA,SAAAA,GACA,IAAAS,EAAA1B,KACA,IAAAG,EAAA6B,EAAAf,GACA,OAAAS,EAAAF,QAAAP,MAEAS,EAAAF,QAAAP,MAAAA,EAAA,GACAS,EAAA2Q,QACA,EAEA+B,UAAA,SAAAhS,EAAAD,GAQA,IAPA,IAGAoS,EACAC,EAJA9S,EAAA1B,KACAuT,EAAA7R,EAAA6R,WACAzF,EAAAyF,EAAAkB,GAIAC,EAAA,IAAAtU,EAAA2G,EACAhD,EAAA,EAAAA,EAAA3B,EAAAa,OAAAc,IAAA,CASA,GAFAwQ,GANAC,EAAA3T,EAAAuB,EAAA2B,IAAA3B,EAAA2B,GAAA,CACAjC,MAAAM,EAAA2B,GACAuM,GAAA,EACAC,GAAA7O,EAAAgS,YAGA5R,MAAAK,EAEA4B,EAAA,EAAA,CACA,IAAA4Q,EAAAvU,EAAAsH,EAAAkN,WACA,IAAAxU,EAAAoH,EAAAsG,EAAA0G,EAAAlE,GAAAiD,EAAAjD,IACA,IAAAlQ,EAAAoH,EAAAsG,EAAAyG,EAAAC,EAAAjE,GAAAgD,EAAAjD,KAGAuE,EAAAzU,EAAAkG,EAAAwO,SAAAH,EAAA,CACAI,KAAA,CACAC,MAAAtT,EAAAF,QAAAwT,OAEAC,OAAA,OAGAP,EAAAf,OAAAkB,EACA,CAEA/G,GAAAyG,CACA,CAEA,OAAAG,CACA,EAEAd,eAAA,SAAAtB,GACA,IACA9Q,EADAxB,KACAwB,QACA8R,EAAA9R,EAAA8R,QAAA,CAAA,EAEA4B,EAAA,IAAA/U,EAAAqG,EAAA,EAAA,EAAA8L,EAAAxQ,MAAAwQ,EAAAvQ,QAAAyR,MAAAF,EAAAxR,MAAA,GAYA,OAXA1B,EAAAkG,EAAAwO,SAAAI,EAAAC,SAAA,CACAJ,KAAA,CACAC,MAAAxT,EAAA4T,YAEAH,OAAA,CACAD,MAAA1B,EAAAxR,MAAAwR,EAAA0B,MAAA,GACAlT,MAAAwR,EAAAxR,MACAuT,SAAA/B,EAAA+B,WAKA,EAEAnB,SAAA,SAAAjT,GACA,IAAAS,EAAA1B,KACAkT,EAAAxR,EAAAF,QAAA2R,KACAA,EAAAzR,EAAA4T,SAAA,IAAAnV,EAAAyH,EAAA3G,EAAA,CACA8S,KAAAb,EAAAa,KACAiB,MAAA9B,EAAA8B,MACAO,MAAA,SACAC,OAAA,SACAnC,OAAAH,EAAAG,SAMA,OAHAF,EAAAsC,OAAA/T,EAAA6R,YACAJ,EAAAuC,eAEAvC,EAAAP,MACA,EAEAR,YAAA,SAAA5Q,GACA,IAAAE,EAAA1B,KAaA,GAZA0B,EAAAqL,MAAAvL,EAAAuL,MAAArL,EAAAF,QAAAuL,MAAA4I,cAEA,QAAAjU,EAAAqL,OACArL,EAAAqL,KAAA,QACAvL,EAAAP,MAAA,IAAAO,EAAAP,OAGA,QAAAS,EAAAqL,OACArL,EAAAqL,KAAA,OACAvL,EAAAP,MAAA,IAAAO,EAAAP,QAGA2B,EAAAlB,EAAAqL,MACA,MAAA,IAAAtK,MAAA,YAAAf,EAAAqL,KAAA,qBAGArL,EAAA+H,SAAA,IAAA7G,EAAAlB,EAAAqL,MAEArL,EAAAF,QAAAd,GAAA,EAAAgB,EAAAF,QAAAA,EACA,EAEAA,QAAA,CACAmB,KAAA,UACAwP,SAAA,MACAlR,MAAA,GACA8L,KAAA,SACAhE,UAAA,EACAjH,MAAA,EACAC,OAAA,EACAiT,MAAA,QACAI,WAAA,QACAjC,KAAA,CACAU,SAAA,EACAE,KAAA,0DACAiB,MAAA,QACA3B,OAAA,CACAW,IAAA,EACAC,OAAA,EACA2B,KAAA,EACAC,MAAA,IAGAvC,OAAA,CACAxR,MAAA,EACAuT,SAAA,QACAL,MAAA,SAEAvB,QAAA,CACAO,IAAA,EACAC,OAAA,EACA2B,KAAA,EACAC,MAAA,MAIAtV,EAAAuV,YAAApV,OAAAgR,EAAAhE,IAEAnN,EAAAE,GAAAsV,OAAArE,GAEAjS,EAAAkB,WAAAJ,EAAA,CACAqC,UAAAA,EACAvB,SAAAA,GAGA,CAhvDA,CAgvDAf,OAAAb,MAAAuW,QACA,IAAAC,EAAAxW,MAEAP,EAAAgX,SA3vDA,CACArJ,GAAA,kBACAlK,KAAA,UACAwT,SAAA,UACAC,YAAA,iBACAC,QAAA,CAAA,eAAA,UAAA,mBAAA,sBAuvDAnX,EAAAoX,QAAAL,EAEAM,OAAAC,eAAAtX,EAAA,aAAA,CAAA+B,OAAA,GAEA","file":"kendo.dataviz.barcode.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('kendo.dataviz.core.js'), require('kendo.drawing.js'), require('kendo.charts.cmn.chunk.js'), require('kendo.drawing.cmn.chunk.js')) :\n    typeof define === 'function' && define.amd ? define(['exports', 'kendo.dataviz.core', 'kendo.drawing', 'kendo.charts.cmn.chunk', 'kendo.drawing.cmn.chunk'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.kendo = global.kendo || {}, global.kendo._globals = global.kendo._globals || {}, global.kendo._globals.DatavizBarcode = {}), global.kendo._globals.DatavizCore, global.kendo._globals.Drawing, global.kendo._globals.ChartsCmnChunk, global.kendo._globals.DrawingCmnChunk));\n})(this, (function (exports, kendo_dataviz_core_js, kendo_drawing_js, kendo_charts_cmn_chunk_js, kendo_drawing_cmn_chunk_js) {\n    const __meta__ = {\n        id: \"dataviz.barcode\",\n        name: \"Barcode\",\n        category: \"dataviz\",\n        description: \"Barcode widget\",\n        depends: [\"dataviz.core\", \"drawing\", \"charts.cmn.chunk\", \"drawing.cmn.chunk\"]\n    };\n\n    (function($, undefined$1) {\n        window.kendo.dataviz = window.kendo.dataviz || {};\n\n        var kendo = window.kendo,\n            Widget = kendo.ui.Widget,\n\n            extend = $.extend,\n            deepExtend = kendo.deepExtend,\n            inArray = $.inArray,\n            isPlainObject = $.isPlainObject,\n\n            dataviz = kendo.dataviz,\n            DEFAULT_WIDTH = 300,\n            DEFAULT_HEIGHT = 100,\n            DEFAULT_QUIETZONE_LENGTH = 10,\n            numberRegex = /^\\d+$/,\n            alphanumericRegex = /^[a-z0-9]+$/i,\n            InvalidCharacterErrorTemplate = \"Character '{0}' is not valid for symbology {1}\";\n\n        function getNext(value, index, count) {\n            return value.substring(index, index + count);\n        }\n\n        var Encoding = kendo.Class.extend({\n            init: function(options) {\n                this.setOptions(options);\n            },\n            setOptions: function(options) {\n                var that = this;\n                that.options = extend({}, that.options, options);\n                that.quietZoneLength = that.options.addQuietZone ? 2 * that.options.quietZoneLength : 0;\n            },\n            encode: function(value, width, height) {\n                var that = this;\n                if (kendo_charts_cmn_chunk_js.e(value)) {\n                    value += '';\n                }\n\n                that.initValue(value, width, height);\n\n                if (that.options.addQuietZone) {\n                    that.addQuietZone();\n                }\n\n                that.addData();\n\n                if (that.options.addQuietZone) {\n                    that.addQuietZone();\n                }\n\n                return {\n                    baseUnit: that.baseUnit,\n                    pattern: that.pattern\n                };\n            },\n            options: {\n                quietZoneLength: DEFAULT_QUIETZONE_LENGTH,\n                addQuietZone: true,\n                addCheckSum: true\n            },\n            initValue: function() {},\n            addQuietZone: function() {\n                this.pattern.push(this.options.quietZoneLength || DEFAULT_QUIETZONE_LENGTH);\n            },\n            addData: function() {\n            },\n            invalidCharacterError: function(character) {\n                throw new Error(kendo.format(InvalidCharacterErrorTemplate, character, this.name));\n            }\n        });\n\n        var encodings = {};\n\n        var code39Base = Encoding.extend({\n            minBaseUnitLength: 0.7,\n            addData: function() {\n                var that = this,\n                    value = that.value;\n\n                that.addStart();\n\n                for (var idx = 0; idx < value.length; idx++) {\n                    that.addCharacter(value.charAt(idx));\n                }\n\n                if (that.options.addCheckSum) {\n                    that.pushCheckSum();\n                }\n\n                that.addStop();\n                that.prepareValues();\n            },\n            addCharacter: function(character) {\n                var that = this,\n                    charData = that.characterMap[character];\n                if (!charData) {\n                    that.invalidCharacterError(character);\n                }\n                that.addBase(charData);\n            },\n            addBase: function() {}\n        });\n\n        var code39ExtendedBase = {\n            addCharacter: function(character) {\n                var that = this;\n                if (that.characterMap[character]) {\n                    that.addBase(that.characterMap[character]);\n                }\n                else if (character.charCodeAt(0) > 127) {\n                    that.invalidCharacterError(character);\n                }\n                else {\n                    that.addExtended(character.charCodeAt(0));\n                }\n            },\n            addExtended: function(code) {\n                var that = this,\n                    patterns;\n                for (var i = 0; i < that.extendedMappings.length; i++) {\n                    if ((patterns = that.extendedMappings[i].call(that, code))) {\n                        for (var j = 0; j < patterns.length; j++) {\n                            that.addBase(patterns[j]);\n                        }\n                        that.dataLength += patterns.length - 1;\n                        return;\n                    }\n                }\n            },\n            extendedMappings: [\n                function(code) {\n                    if (97 <= code && code <= 122) {\n                        var that = this;\n                        return [that.characterMap[that.shiftCharacters[0]], that.characterMap[String.fromCharCode(code - 32)]];\n                    }\n                },\n                function(code) {\n                    if (33 <= code && code <= 58) {\n                        var that = this;\n                        return [that.characterMap[that.shiftCharacters[1]], that.characterMap[String.fromCharCode(code + 32)]];\n                    }\n                },\n                function(code) {\n                    if (1 <= code && code <= 26) {\n                        var that = this;\n                        return [that.characterMap[that.shiftCharacters[2]], that.characterMap[String.fromCharCode(code + 64)]];\n                    }\n                },\n                function(code) {\n                    var that = this,\n                        result,\n                        dataCharacter;\n                    if (!that.specialAsciiCodes[code]) {\n                        dataCharacter = Math.floor(code / 32) * 6 + (code - 27) % 32 + 64;\n                        result = [that.characterMap[that.shiftCharacters[3]], that.characterMap[String.fromCharCode(dataCharacter)]];\n                    }\n                    else {\n                        result = [];\n                        for (var i = 0; i < that.specialAsciiCodes[code].length; i++) {\n                            result.push(that.characterMap[that.shiftCharacters[3]]);\n                            result.push(that.characterMap[that.specialAsciiCodes[code][i]]);\n                        }\n                    }\n\n                    return result;\n                }\n            ],\n            specialAsciiCodes: {\n                \"0\": [\"U\"],\n                \"64\": [\"V\"],\n                \"96\": [\"W\"],\n                \"127\": [\"T\",\"X\",\"Y\",\"Z\"]\n            },\n            shiftValuesAsciiCodes: {\n                \"39\": 36,\n                \"40\": 47,\n                \"41\": 43,\n                \"42\": 37\n            },\n            characterMap: {\n                \"+\": false,\n                \"/\": false,\n                \"$\": false,\n                \"%\": false\n            },\n            shiftCharacters: [\"SHIFT0\", \"SHIFT1\", \"SHIFT2\", \"SHIFT3\"]\n        };\n\n        encodings.code39 = code39Base.extend({\n            name: \"Code 39\",\n            checkSumMod: 43,\n            minRatio: 2.5,\n            maxRatio: 3,\n            gapWidth: 1,\n            splitCharacter: \"|\",\n            initValue: function(value, width, height) {\n                var that = this;\n                that.width = width;\n                that.height = height;\n                that.value = value;\n                that.dataLength = value.length;\n                that.pattern = [];\n                that.patternString = \"\";\n            },\n            prepareValues: function() {\n                var that = this,\n                    baseUnit,\n                    minBaseUnit = that.minBaseUnitLength,\n                    ratio = that.maxRatio,\n                    minRatio = that.minRatio,\n                    minHeight = Math.max(0.15 * that.width, 24);\n                if (that.height < minHeight) {\n                    throw new Error(\"Insufficient Height. The minimum height for value: \" + that.value + \" is: \" + minHeight);\n                }\n\n                while ((baseUnit = that.getBaseUnit(ratio)) < minBaseUnit && ratio > minRatio) {\n                    ratio = parseFloat((ratio - 0.1).toFixed(1));\n                }\n\n                if (baseUnit < minBaseUnit) {\n                    var minWidth = Math.ceil(that.getBaseWidth(minRatio) * minBaseUnit);\n                    throw new Error(\"Insufficient width. The minimum width for value: \" + that.value + \" is: \" + minWidth);\n                }\n\n                that.ratio = ratio;\n                that.baseUnit = baseUnit;\n                that.patternString = that.patternString.substring(0, that.patternString.length - 1);\n                that.pattern = that.pattern.concat(that.patternString.replace(/ratio/g, ratio).split(that.splitCharacter));\n            },\n            getBaseUnit: function(ratio) {\n                return this.width / this.getBaseWidth(ratio);\n            },\n            getBaseWidth: function(ratio) {\n                var that = this,\n                    characterLength = 3 * (ratio + 2);\n                return that.quietZoneLength + characterLength * (that.dataLength + 2) + that.gapWidth * (that.dataLength + 1);\n            },\n            addStart: function() {\n                var that = this;\n                that.addPattern(that.characterMap.START.pattern);\n                that.addCharacterGap();\n            },\n            addBase: function(character) {\n                this.addPattern(character.pattern);\n                this.addCharacterGap();\n            },\n            addStop: function() {\n                this.addPattern(this.characterMap.START.pattern);\n            },\n            addPattern: function(pattern) {\n                for (var i = 0; i < pattern.length; i++) {\n                     this.patternString += this.patternMappings[pattern.charAt(i)];\n                }\n            },\n            addCharacterGap: function() {\n                var that = this;\n                that.patternString += that.gapWidth + that.splitCharacter;\n            },\n            patternMappings: {\n                \"b\": \"1|\",\n                \"w\": \"1|\",\n                \"B\": \"ratio|\",\n                \"W\": \"ratio|\"\n            },\n            characterMap: {\n                \"0\": { \"pattern\": \"bwbWBwBwb\",\"value\": 0 },\n                \"1\": { \"pattern\": \"BwbWbwbwB\",\"value\": 1 },\n                \"2\": { \"pattern\": \"bwBWbwbwB\",\"value\": 2 },\n                \"3\": { \"pattern\": \"BwBWbwbwb\",\"value\": 3 },\n                \"4\": { \"pattern\": \"bwbWBwbwB\",\"value\": 4 },\n                \"5\": { \"pattern\": \"BwbWBwbwb\",\"value\": 5 },\n                \"6\": { \"pattern\": \"bwBWBwbwb\",\"value\": 6 },\n                \"7\": { \"pattern\": \"bwbWbwBwB\",\"value\": 7 },\n                \"8\": { \"pattern\": \"BwbWbwBwb\",\"value\": 8 },\n                \"9\": { \"pattern\": \"bwBWbwBwb\",\"value\": 9 },\n                \"A\": { \"pattern\": \"BwbwbWbwB\",\"value\": 10 },\n                \"B\": { \"pattern\": \"bwBwbWbwB\",\"value\": 11 },\n                \"C\": { \"pattern\": \"BwBwbWbwb\",\"value\": 12 },\n                \"D\": { \"pattern\": \"bwbwBWbwB\",\"value\": 13 },\n                \"E\": { \"pattern\": \"BwbwBWbwb\",\"value\": 14 },\n                \"F\": { \"pattern\": \"bwBwBWbwb\",\"value\": 15 },\n                \"G\": { \"pattern\": \"bwbwbWBwB\",\"value\": 16 },\n                \"H\": { \"pattern\": \"BwbwbWBwb\",\"value\": 17 },\n                \"I\": { \"pattern\": \"bwBwbWBwb\",\"value\": 18 },\n                \"J\": { \"pattern\": \"bwbwBWBwb\",\"value\": 19 },\n                \"K\": { \"pattern\": \"BwbwbwbWB\",\"value\": 20 },\n                \"L\": { \"pattern\": \"bwBwbwbWB\",\"value\": 21 },\n                \"M\": { \"pattern\": \"BwBwbwbWb\",\"value\": 22 },\n                \"N\": { \"pattern\": \"bwbwBwbWB\",\"value\": 23 },\n                \"O\": { \"pattern\": \"BwbwBwbWb\",\"value\": 24 },\n                \"P\": { \"pattern\": \"bwBwBwbWb\",\"value\": 25 },\n                \"Q\": { \"pattern\": \"bwbwbwBWB\",\"value\": 26 },\n                \"R\": { \"pattern\": \"BwbwbwBWb\",\"value\": 27 },\n                \"S\": { \"pattern\": \"bwBwbwBWb\",\"value\": 28 },\n                \"T\": { \"pattern\": \"bwbwBwBWb\",\"value\": 29 },\n                \"U\": { \"pattern\": \"BWbwbwbwB\",\"value\": 30 },\n                \"V\": { \"pattern\": \"bWBwbwbwB\",\"value\": 31 },\n                \"W\": { \"pattern\": \"BWBwbwbwb\",\"value\": 32 },\n                \"X\": { \"pattern\": \"bWbwBwbwB\",\"value\": 33 },\n                \"Y\": { \"pattern\": \"BWbwBwbwb\",\"value\": 34 },\n                \"Z\": { \"pattern\": \"bWBwBwbwb\",\"value\": 35 },\n                \"-\": { \"pattern\": \"bWbwbwBwB\",\"value\": 36 },\n                \".\": { \"pattern\": \"BWbwbwBwb\",\"value\": 37 },\n                \" \": { \"pattern\": \"bWBwbwBwb\",\"value\": 38 },\n                \"$\": { \"pattern\": \"bWbWbWbwb\",\"value\": 39 },\n                \"/\": { \"pattern\": \"bWbWbwbWb\",\"value\": 40 },\n                \"+\": { \"pattern\": \"bWbwbWbWb\",\"value\": 41 },\n                \"%\": { \"pattern\": \"bwbWbWbWb\",\"value\": 42 },\n                START: { pattern: \"bWbwBwBwb\" }\n            },\n            options: {\n                addCheckSum: false\n            }\n        });\n\n        encodings.code39extended = encodings.code39.extend(deepExtend({}, code39ExtendedBase, {\n            name: \"Code 39 extended\",\n            characterMap: {\n                SHIFT0: { \"pattern\": \"bWbwbWbWb\",\"value\": 41 },\n                SHIFT1: { \"pattern\": \"bWbWbwbWb\",\"value\": 40 },\n                SHIFT2: { \"pattern\": \"bWbWbWbwb\",\"value\": 39 },\n                SHIFT3: { \"pattern\": \"bwbWbWbWb\",\"value\": 42 }\n            }\n        }));\n\n        encodings.code93 = code39Base.extend({\n            name: \"Code 93\",\n            cCheckSumTotal: 20,\n            kCheckSumTotal: 15,\n            checkSumMod: 47,\n            initValue: function(value, width, height) {\n                var that = this;\n                that.value = value;\n                that.width = width;\n                that.height = height;\n                that.pattern = [];\n                that.values = [];\n                that.dataLength = value.length;\n            },\n            prepareValues: function() {\n                var that = this,\n                    minHeight = Math.max(0.15 * that.width, 24);\n                if (that.height < minHeight) {\n                    throw new Error(\"Insufficient Height\");\n                }\n\n                that.setBaseUnit();\n\n                if (that.baseUnit < that.minBaseUnitLength) {\n                    throw new Error(\"Insufficient Width\");\n                }\n            },\n            setBaseUnit: function() {\n                var that = this,\n                    checkSumLength = 2;\n                that.baseUnit = that.width / (9 * (that.dataLength + 2 + checkSumLength) + that.quietZoneLength + 1);\n            },\n            addStart: function() {\n                var pattern = this.characterMap.START.pattern;\n                this.addPattern(pattern);\n            },\n            addStop: function() {\n                var that = this;\n                that.addStart();\n                that.pattern.push(that.characterMap.TERMINATION_BAR);\n            },\n            addBase: function(charData) {\n                this.addPattern(charData.pattern);\n                this.values.push(charData.value);\n            },\n            pushCheckSum: function() {\n                var that = this,\n                    checkValues = that._getCheckValues(),\n                    charData;\n\n                that.checksum = checkValues.join(\"\");\n                for (var i = 0; i < checkValues.length; i++) {\n                    charData = that.characterMap[that._findCharacterByValue(checkValues[i])];\n                    that.addPattern(charData.pattern);\n                }\n            },\n            _getCheckValues: function() {\n                var that = this,\n                    values = that.values,\n                    length = values.length,\n                    wightedSum = 0,\n                    cValue,\n                    kValue,\n                    idx;\n\n                for (idx = length - 1; idx >= 0; idx--) {\n                    wightedSum += that.weightedValue(values[idx],length - idx, that.cCheckSumTotal);\n                }\n                cValue = wightedSum % that.checkSumMod;\n\n                wightedSum = that.weightedValue(cValue, 1, that.kCheckSumTotal);\n                for (idx = length - 1; idx >= 0; idx--) {\n                    wightedSum += that.weightedValue(values[idx], length - idx + 1, that.kCheckSumTotal);\n                }\n\n                kValue = wightedSum % that.checkSumMod;\n                return [cValue, kValue];\n            },\n            _findCharacterByValue: function(value) {\n                for (var character in this.characterMap) {\n                    if (this.characterMap[character].value === value) {\n                        return character;\n                    }\n                }\n            },\n            weightedValue: function(value, index, total) {\n                return (index % total || total) * value;\n            },\n            addPattern: function(pattern) {\n                var value;\n\n                for (var i = 0; i < pattern.length; i++) {\n                    value = parseInt(pattern.charAt(i),10);\n                    this.pattern.push(value);\n                }\n            },\n            characterMap: {\n                \"0\": { \"pattern\": \"131112\",\"value\": 0 },\n                \"1\": { \"pattern\": \"111213\",\"value\": 1 },\n                \"2\": { \"pattern\": \"111312\",\"value\": 2 },\n                \"3\": { \"pattern\": \"111411\",\"value\": 3 },\n                \"4\": { \"pattern\": \"121113\",\"value\": 4 },\n                \"5\": { \"pattern\": \"121212\",\"value\": 5 },\n                \"6\": { \"pattern\": \"121311\",\"value\": 6 },\n                \"7\": { \"pattern\": \"111114\",\"value\": 7 },\n                \"8\": { \"pattern\": \"131211\",\"value\": 8 },\n                \"9\": { \"pattern\": \"141111\",\"value\": 9 },\n                \"A\": { \"pattern\": \"211113\",\"value\": 10 },\n                \"B\": { \"pattern\": \"211212\",\"value\": 11 },\n                \"C\": { \"pattern\": \"211311\",\"value\": 12 },\n                \"D\": { \"pattern\": \"221112\",\"value\": 13 },\n                \"E\": { \"pattern\": \"221211\",\"value\": 14 },\n                \"F\": { \"pattern\": \"231111\",\"value\": 15 },\n                \"G\": { \"pattern\": \"112113\",\"value\": 16 },\n                \"H\": { \"pattern\": \"112212\",\"value\": 17 },\n                \"I\": { \"pattern\": \"112311\",\"value\": 18 },\n                \"J\": { \"pattern\": \"122112\",\"value\": 19 },\n                \"K\": { \"pattern\": \"132111\",\"value\": 20 },\n                \"L\": { \"pattern\": \"111123\",\"value\": 21 },\n                \"M\": { \"pattern\": \"111222\",\"value\": 22 },\n                \"N\": { \"pattern\": \"111321\",\"value\": 23 },\n                \"O\": { \"pattern\": \"121122\",\"value\": 24 },\n                \"P\": { \"pattern\": \"131121\",\"value\": 25 },\n                \"Q\": { \"pattern\": \"212112\",\"value\": 26 },\n                \"R\": { \"pattern\": \"212211\",\"value\": 27 },\n                \"S\": { \"pattern\": \"211122\",\"value\": 28 },\n                \"T\": { \"pattern\": \"211221\",\"value\": 29 },\n                \"U\": { \"pattern\": \"221121\",\"value\": 30 },\n                \"V\": { \"pattern\": \"222111\",\"value\": 31 },\n                \"W\": { \"pattern\": \"112122\",\"value\": 32 },\n                \"X\": { \"pattern\": \"112221\",\"value\": 33 },\n                \"Y\": { \"pattern\": \"122121\",\"value\": 34 },\n                \"Z\": { \"pattern\": \"123111\",\"value\": 35 },\n                \"-\": { \"pattern\": \"121131\",\"value\": 36 },\n                \".\": { \"pattern\": \"311112\",\"value\": 37 },\n                \" \": { \"pattern\": \"311211\",\"value\": 38 },\n                \"$\": { \"pattern\": \"321111\",\"value\": 39 },\n                \"/\": { \"pattern\": \"112131\",\"value\": 40 },\n                \"+\": { \"pattern\": \"113121\",\"value\": 41 },\n                \"%\": { \"pattern\": \"211131\",\"value\": 42 },\n                SHIFT0: { \"pattern\": \"122211\",\"value\": 46 },\n                SHIFT1: { \"pattern\": \"311121\",\"value\": 45 },\n                SHIFT2: { \"pattern\": \"121221\",\"value\": 43 },\n                SHIFT3: { \"pattern\": \"312111\",\"value\": 44 },\n                START: { \"pattern\": \"111141\" },\n                TERMINATION_BAR: \"1\"\n            }\n        });\n\n        encodings.code93extended = encodings.code93.extend(deepExtend({}, code39ExtendedBase, {\n            name: \"Code 93 extended\",\n            pushCheckSum: function() {\n                var that = this,\n                    checkValues = that._getCheckValues(),\n                    value;\n\n                that.checksum = checkValues.join(\"\");\n\n                for (var i = 0; i < checkValues.length; i++) {\n                    value = checkValues[i];\n                    if (that.shiftValuesAsciiCodes[value]) {\n                        that.addExtended(that.shiftValuesAsciiCodes[value]);\n                    }\n                    else {\n                        that.addPattern(that.characterMap[that._findCharacterByValue(value)].pattern);\n                    }\n                }\n            }\n        }));\n\n        var state128 = kendo.Class.extend({\n            init: function(encoding) {\n                this.encoding = encoding;\n            },\n            addStart: function() {},\n            is: function() {},\n            move: function() {},\n            pushState: function() {}\n        });\n\n        var state128AB = state128.extend({\n            FNC4: \"FNC4\",\n            init: function(encoding, states) {\n                var that = this;\n                that.encoding = encoding;\n                that.states = states;\n                that._initMoves(states);\n            },\n            addStart: function() {\n                this.encoding.addPattern(this.START);\n            },\n            is: function(value, index) {\n                var code = value.charCodeAt(index);\n                return this.isCode(code);\n            },\n            move: function(encodingState) {\n                var that = this,\n                    idx = 0;\n\n                while (!that._moves[idx].call(that, encodingState) && idx < that._moves.length) {\n                    idx++;\n                }\n            },\n            pushState: function(encodingState) {\n                var that = this,\n                    states = that.states,\n                    value = encodingState.value,\n                    maxLength = value.length,\n                    code;\n\n                if (inArray(\"C\", states) >= 0) {\n                    var numberMatch = value.substr(encodingState.index).match(/\\d{4,}/g);\n                    if (numberMatch) {\n                        maxLength = value.indexOf(numberMatch[0], encodingState.index);\n                    }\n                }\n\n                while ((code = encodingState.value.charCodeAt(encodingState.index)) >= 0 &&\n                    that.isCode(code) && encodingState.index < maxLength) {\n                    that.encoding.addPattern(that.getValue(code));\n                    encodingState.index++;\n                }\n            },\n            _initMoves: function(states) {\n                var that = this;\n                that._moves = [];\n\n                if (inArray(that.FNC4, states) >= 0) {\n                    that._moves.push(that._moveFNC);\n                }\n\n                if (inArray(that.shiftKey, states) >= 0) {\n                    that._moves.push(that._shiftState);\n                }\n                that._moves.push(that._moveState);\n            },\n            _moveFNC: function(encodingState) {\n                if (encodingState.fnc) {\n                    encodingState.fnc = false;\n                    return encodingState.previousState == this.key;\n                }\n            },\n            _shiftState: function(encodingState) {\n                var that = this;\n                if (encodingState.previousState == that.shiftKey &&\n                    (encodingState.index + 1 >= encodingState.value.length ||\n                        that.encoding[that.shiftKey].is(encodingState.value, encodingState.index + 1))) {\n                    that.encoding.addPattern(that.SHIFT);\n                    encodingState.shifted = true;\n                    return true;\n                }\n            },\n            _moveState: function() {\n                this.encoding.addPattern(this.MOVE);\n                return true;\n            },\n            SHIFT: 98\n        });\n\n        var states128 = {};\n\n        states128.A = state128AB.extend({\n            key: \"A\",\n            shiftKey: \"B\",\n            isCode: function(code) {\n                return code >= 0 && code < 96;\n            },\n            getValue: function(code) {\n                if (code < 32) {\n                    return code + 64;\n                }\n\n                return code - 32;\n            },\n            MOVE: 101,\n            START: 103\n        });\n\n        states128.B = state128AB.extend({\n            key: \"B\",\n            shiftKey: \"A\",\n            isCode: function(code) {\n                return code >= 32 && code < 128;\n            },\n            getValue: function(code) {\n                return code - 32;\n            },\n            MOVE: 100,\n            START: 104\n        });\n\n        states128.C = state128.extend({\n            key: \"C\",\n            addStart: function() {\n                this.encoding.addPattern(this.START);\n            },\n            is: function(value, index) {\n                var next4 = getNext(value, index, 4);\n                return (index + 4 <= value.length || value.length == 2) && numberRegex.test(next4);\n            },\n            move: function() {\n                this.encoding.addPattern(this.MOVE);\n            },\n            pushState: function(encodingState) {\n                var code;\n                while (( code = getNext(encodingState.value, encodingState.index, 2)) &&\n                    numberRegex.test(code) && code.length == 2)\n                {\n                    this.encoding.addPattern(parseInt(code, 10));\n                    encodingState.index += 2;\n                }\n            },\n            getValue: function(code) {\n                return code;\n            },\n            MOVE: 99,\n            START: 105\n        });\n\n        states128.FNC4 = state128.extend({\n            key: \"FNC4\",\n            dependentStates: [\"A\",\"B\"],\n            init: function(encoding, states) {\n                this.encoding = encoding;\n                this._initSubStates(states);\n            },\n            addStart: function(encodingState) {\n                var code = encodingState.value.charCodeAt(0) - 128,\n                    subState = this._getSubState(code);\n\n                this.encoding[subState].addStart();\n            },\n            is: function(value, index) {\n                var code = value.charCodeAt(index);\n                return this.isCode(code);\n            },\n            isCode: function(code) {\n                return code >= 128 && code < 256;\n            },\n            pushState: function(encodingState) {\n                var that = this,\n                    subState = that._initSubState(encodingState),\n                    encoding = that.encoding,\n                    length = subState.value.length;\n                encodingState.index += length;\n\n                if (length < 3) {\n                    var code;\n                    for (; subState.index < length; subState.index++) {\n                        code = subState.value.charCodeAt(subState.index);\n                        subState.state = that._getSubState(code);\n                        if (subState.previousState != subState.state) {\n                            subState.previousState = subState.state;\n                            encoding[subState.state].move(subState);\n                        }\n                        encoding.addPattern(encoding[subState.state].MOVE);\n                        encoding.addPattern(encoding[subState.state].getValue(code));\n                    }\n                }\n                else {\n                    if (subState.state != subState.previousState) {\n                        encoding[subState.state].move(subState);\n                    }\n                    that._pushStart(subState);\n                    encoding.pushData(subState, that.subStates);\n                    if (encodingState.index < encodingState.value.length) {\n                        that._pushStart(subState);\n                    }\n                }\n\n                encodingState.fnc = true;\n                encodingState.state = subState.state;\n            },\n            _pushStart: function(subState) {\n                var that = this;\n                that.encoding.addPattern(that.encoding[subState.state].MOVE);\n                that.encoding.addPattern(that.encoding[subState.state].MOVE);\n            },\n            _initSubState: function(encodingState) {\n                var that = this,\n                    subState = {\n                        value: that._getAll(encodingState.value, encodingState.index),\n                        index: 0\n                    };\n                subState.state = that._getSubState(subState.value.charCodeAt(0));\n                subState.previousState = encodingState.previousState == that.key ?\n                    subState.state : encodingState.previousState;\n                return subState;\n            },\n            _initSubStates: function(states) {\n                var that = this;\n                that.subStates = [];\n                for (var i = 0; i < states.length; i++) {\n                    if (inArray(states[i], that.dependentStates) >= 0) {\n                        that.subStates.push(states[i]);\n                    }\n                }\n            },\n            _getSubState: function(code) {\n                var that = this;\n                for (var i = 0; i < that.subStates.length; i++) {\n                    if (that.encoding[that.subStates[i]].isCode(code)) {\n                        return that.subStates[i];\n                    }\n                }\n            },\n            _getAll: function(value, index) {\n                var code,\n                    result = \"\";\n                while ((code = value.charCodeAt(index++)) && this.isCode(code)) {\n                    result += String.fromCharCode(code - 128);\n                }\n                return result;\n            }\n        });\n\n        states128.FNC1 = state128.extend({\n            key: \"FNC1\",\n            startState: \"C\",\n            dependentStates: [\"C\",\"B\"],\n            startAI: \"(\",\n            endAI: \")\",\n            init: function(encoding, states) {\n                this.encoding = encoding;\n                this.states = states;\n            },\n            addStart: function() {\n                this.encoding[this.startState].addStart();\n            },\n            is: function() {\n                return inArray(this.key, this.states) >= 0;\n            },\n            pushState: function(encodingState) {\n                var that = this,\n                    encoding = that.encoding,\n                    value = encodingState.value.replace(/\\s/g, \"\"),\n                    regexSeparators = new RegExp(\"[\" + that.startAI + that.endAI + \"]\", \"g\"),\n                    index = encodingState.index,\n                    subState = {\n                        state: that.startState\n                    },\n                    current,\n                    nextStart,\n                    separatorLength;\n\n                encoding.addPattern(that.START);\n\n                while (true) {\n                    subState.index = 0;\n\n                    separatorLength = value.charAt(index) === that.startAI ? 2 : 0;\n                    current = separatorLength > 0 ? that.getBySeparator(value, index) : that.getByLength(value, index);\n                    if (current.ai.length) {\n                        nextStart = index + separatorLength + current.id.length + current.ai.length;\n                    }\n                    else {\n                        nextStart = value.indexOf(that.startAI, index + 1);\n                        if (nextStart < 0) {\n                            if (index + current.ai.max + current.id.length + separatorLength < value.length) {\n                                throw new Error(\"Separators are required after variable length identifiers\");\n                            }\n                            nextStart = value.length;\n                        }\n                    }\n                    subState.value = value.substring(index, nextStart).replace(regexSeparators, \"\");\n                    that.validate(current, subState.value);\n\n                    encoding.pushData(subState, that.dependentStates);\n\n                    if (nextStart >= value.length) {\n                        break;\n                    }\n\n                    index = nextStart;\n\n                    if (subState.state != that.startState) {\n                        encoding[that.startState].move(subState);\n                        subState.state = that.startState;\n                    }\n\n                    if (!current.ai.length) {\n                        encoding.addPattern(that.START);\n                    }\n                }\n                encodingState.index = encodingState.value.length;\n            },\n            validate: function(current, value) {\n                var code = value.substr(current.id.length),\n                    ai = current.ai;\n                if (!ai.type && !numberRegex.test(code)) {\n                    throw new Error(\"Application identifier \" + current.id + \" is numeric only but contains non numeric character(s).\");\n                }\n\n                if (ai.type == \"alphanumeric\" && !alphanumericRegex.test(code)) {\n                     throw new Error(\"Application identifier \" + current.id + \" is alphanumeric only but contains non alphanumeric character(s).\");\n                }\n\n                if (ai.length && ai.length !== code.length) {\n                     throw new Error(\"Application identifier \" + current.id + \" must be \" + ai.length + \" characters long.\");\n                }\n\n                if (ai.min && ai.min > code.length) {\n                     throw new Error(\"Application identifier \" + current.id + \" must be at least \" + ai.min + \" characters long.\");\n                }\n\n                if (ai.max && ai.max < code.length) {\n                     throw new Error(\"Application identifier \" + current.id + \" must be at most \" + ai.max + \" characters long.\");\n                }\n            },\n            getByLength: function(value, index) {\n                var that = this,\n                    id,\n                    ai;\n                for (var i = 2; i <= 4; i++) {\n                    id = getNext(value, index, i);\n                    ai = that.getAI(id) || that.getAI(id.substring(0, id.length - 1));\n                    if (ai) {\n                        return {\n                            id: id,\n                            ai: ai\n                        };\n                    }\n                }\n                that.unsupportedAIError(id);\n            },\n            unsupportedAIError: function(id) {\n                throw new Error(kendo.format(\"'{0}' is not a supported Application Identifier\"),id);\n            },\n            getBySeparator: function(value, index) {\n                var that = this,\n                    start = value.indexOf(that.startAI, index),\n                    end = value.indexOf(that.endAI, start),\n                    id = value.substring(start + 1,end),\n                    ai = that.getAI(id) || that.getAI(id.substr(id.length - 1));\n                if (!ai) {\n                    that.unsupportedAIError(id);\n                }\n\n                return {\n                    ai: ai,\n                    id: id\n                };\n            },\n            getAI: function(id) {\n                var ai = this.applicationIdentifiers,\n                    multiKey = ai.multiKey;\n                if (ai[id]) {\n                    return ai[id];\n                }\n\n                for (var i = 0; i < multiKey.length; i++) {\n                    if (multiKey[i].ids && inArray(id, multiKey[i].ids) >= 0) {\n                        return multiKey[i].type;\n                    }\n                    else if (multiKey[i].ranges) {\n                        var ranges = multiKey[i].ranges;\n                        for (var j = 0; j < ranges.length; j++) {\n                            if (ranges[j][0] <= id && id <= ranges[j][1]) {\n                                return multiKey[i].type;\n                            }\n                        }\n                    }\n                }\n            },\n            applicationIdentifiers: {\n                \"22\": { max: 29, type: \"alphanumeric\" },\n                \"402\": { length: 17 },\n                \"7004\": { max: 4, type: \"alphanumeric\" },\n                \"242\": { max: 6, type: \"alphanumeric\" },\n                \"8020\": { max: 25, type: \"alphanumeric\" },\n                \"703\": { min: 3, max: 30, type: \"alphanumeric\" },\n                \"8008\": { min: 8, max: 12, type: \"alphanumeric\" },\n                \"253\": { min: 13, max: 17, type: \"alphanumeric\" },\n                \"8003\": { min: 14, max: 30, type: \"alphanumeric\" },\n                multiKey: [{\n                    ids: [\"15\", \"17\", \"8005\", \"8100\"],\n                    ranges: [\n                        [11, 13],\n                        [310, 316],\n                        [320, 336],\n                        [340, 369]\n                    ],\n                    type: { length: 6 }\n                },{\n                    ids: [\"240\", \"241\", \"250\", \"251\", \"400\", \"401\", \"403\", \"7002\", \"8004\", \"8007\", \"8110\"],\n                    ranges: [[90 - 99]],\n                    type: { max: 30, type: \"alphanumeric\" }\n                },{\n                    ids: [\"7001\"],\n                    ranges: [[410, 414]],\n                    type: { length: 13 }\n                },{\n                    ids: [\"10\",\"21\", \"254\", \"420\", \"8002\"],\n                    type: { max: 20, type: \"alphanumeric\" }\n                },{\n                    ids: [\"00\", \"8006\", \"8017\", \"8018\"],\n                    type: { length: 18 }\n                },{\n                    ids: [\"01\", \"02\", \"8001\"],\n                    type: { length: 14 }\n                },{\n                    ids: [\"422\"],\n                    ranges: [\n                        [424, 426]\n                    ],\n                    type: { length: 3 }\n                },{\n                    ids: [\"20\", \"8102\"],\n                    type: { length: 2 }\n                },{\n                    ids: [\"30\",\"37\"],\n                    type: { max: 8, type: \"alphanumeric\" }\n                },{\n                    ids: [\"390\",\"392\"],\n                    type: { max: 15, type: \"alphanumeric\" }\n                },{\n                    ids: [\"421\", \"423\"],\n                    type: { min: 3, max: 15, type: \"alphanumeric\" }\n                }, {\n                    ids: [\"391\", \"393\"],\n                    type: { min: 3, max: 18, type: \"alphanumeric\" }\n                },{\n                    ids: [\"7003\", \"8101\"],\n                    type: { length: 10 }\n                }]\n            },\n            START: 102\n        });\n\n        var code128Base = Encoding.extend({\n            init: function(options) {\n                Encoding.fn.init.call(this, options);\n                this._initStates();\n            },\n            _initStates: function() {\n                var that = this;\n                for (var i = 0; i < that.states.length; i++) {\n                    that[that.states[i]] = new states128[that.states[i]](that, that.states);\n                }\n            },\n            initValue: function(value, width, height) {\n               var that = this;\n               that.pattern = [];\n               that.value = value;\n               that.width = width;\n               that.height = height;\n               that.checkSum = 0;\n               that.totalUnits = 0;\n               that.index = 0;\n               that.position = 1;\n            },\n            addData: function() {\n                var that = this,\n                    encodingState = {\n                        value: that.value,\n                        index: 0,\n                        state: \"\"\n                    };\n                if (that.value.length === 0) {\n                    return;\n                }\n\n                encodingState.state =\n                    encodingState.previousState = that.getNextState(encodingState, that.states);\n\n                that.addStart(encodingState);\n\n                that.pushData(encodingState, that.states);\n\n                that.addCheckSum();\n                that.addStop();\n                that.setBaseUnit();\n            },\n            pushData: function(encodingState, states) {\n                var that = this;\n                while (true) {\n                    that[encodingState.state].pushState(encodingState);\n                    if (encodingState.index >= encodingState.value.length) {\n                        break;\n                    }\n\n                    if (!encodingState.shifted) {\n                        encodingState.previousState = encodingState.state;\n                        encodingState.state = that.getNextState(encodingState, states);\n                        that[encodingState.state].move(encodingState);\n                    }\n                    else {\n                       var temp = encodingState.state;\n                       encodingState.state = encodingState.previousState;\n                       encodingState.previousState = temp;\n                       encodingState.shifted = false;\n                    }\n                }\n            },\n            addStart: function(encodingState) {\n                this[encodingState.state].addStart(encodingState);\n                this.position = 1;\n            },\n            addCheckSum: function() {\n                var that = this;\n\n                that.checksum = that.checkSum % 103;\n                that.addPattern(that.checksum);\n            },\n            addStop: function() {\n                this.addPattern(this.STOP);\n            },\n            setBaseUnit: function() {\n                var that = this;\n                that.baseUnit = that.width / (that.totalUnits + that.quietZoneLength);\n            },\n            addPattern: function(code) {\n                var that = this,\n                    pattern = that.characterMap[code].toString(),\n                    value;\n\n                for (var i = 0; i < pattern.length; i++) {\n                    value = parseInt(pattern.charAt(i),10);\n                    that.pattern.push(value);\n                    that.totalUnits += value;\n                }\n                that.checkSum += code * that.position++;\n            },\n            getNextState: function(encodingState, states) {\n                for (var i = 0; i < states.length; i++) {\n                    if (this[states[i]].is(encodingState.value, encodingState.index)) {\n                        return states[i];\n                    }\n                }\n                this.invalidCharacterError(encodingState.value.charAt(encodingState.index));\n            },\n            characterMap: [\n                212222,222122,222221,121223,121322,131222,122213,122312,132212,221213,\n                221312,231212,112232,122132,122231,113222,123122,123221,223211,221132,\n                221231,213212,223112,312131,311222,321122,321221,312212,322112,322211,\n                212123,212321,232121,111323,131123,131321,112313,132113,132311,211313,\n                231113,231311,112133,112331,132131,113123,113321,133121,313121,211331,\n                231131,213113,213311,213131,311123,311321,331121,312113,312311,332111,\n                314111,221411,431111,111224,111422,121124,121421,141122,141221,112214,\n                112412,122114,122411,142112,142211,241211,221114,413111,241112,134111,\n                111242,121142,121241,114212,124112,124211,411212,421112,421211,212141,\n                214121,412121,111143,111341,131141,114113,114311,411113,411311,113141,\n                114131,311141,411131,211412,211214,211232,2331112\n            ],\n            STOP: 106\n        });\n\n        encodings.code128a = code128Base.extend({\n            name: \"Code 128 A\",\n            states: [\"A\"]\n        });\n\n\n        encodings.code128b = code128Base.extend({\n            name: \"Code 128 B\",\n            states: [\"B\"]\n        });\n\n        encodings.code128c = code128Base.extend({\n            name: \"Code 128 C\",\n            states: [\"C\"]\n        });\n\n        encodings.code128 = code128Base.extend({\n            name: \"Code 128\",\n            states: [\"C\", \"B\", \"A\", \"FNC4\"]\n        });\n\n        encodings[\"gs1-128\"] = code128Base.extend({\n           name: \"Code GS1-128\",\n           states: [\"FNC1\", \"C\", \"B\"]\n        });\n\n        var msiBase = Encoding.extend({\n            initValue: function(value, width) {\n                var that = this;\n                that.pattern = [];\n                that.value = value;\n                that.checkSumLength = 0;\n                that.width = width;\n            },\n            setBaseUnit: function() {\n                var that = this,\n                    startStopLength = 7;\n\n                that.baseUnit = that.width /\n                        ( 12 * (that.value.length + that.checkSumLength) + that.quietZoneLength + startStopLength);\n            },\n            addData: function() {\n                var that = this,\n                    value = that.value;\n                that.addPattern(that.START);\n\n                for (var i = 0; i < value.length; i++) {\n                    that.addCharacter(value.charAt(i));\n                }\n\n                if (that.options.addCheckSum) {\n                    that.addCheckSum();\n                }\n\n                that.addPattern(that.STOP);\n                that.setBaseUnit();\n            },\n            addCharacter: function(character) {\n                var that = this,\n                    pattern = that.characterMap[character];\n                if (!pattern) {\n                    that.invalidCharacterError(character);\n                }\n                that.addPattern(pattern);\n            },\n            addPattern: function(pattern) {\n                for (var i = 0; i < pattern.length; i++) {\n                    this.pattern.push(parseInt(pattern.charAt(i),10));\n                }\n            },\n            addCheckSum: function() {\n                var that = this,\n                    checkSumFunction = that.checkSums[that.checkSumType],\n                    checkValues;\n\n                checkValues = checkSumFunction.call(that.checkSums, that.value);\n\n                that.checksum = checkValues.join(\"\");\n                for (var i = 0; i < checkValues.length; i++) {\n                    that.checkSumLength++;\n                    that.addPattern(that.characterMap[checkValues[i]]);\n                }\n            },\n            checkSums: {\n                Modulo10: function(value) {\n                    var checkValues = [0, \"\"],\n                    odd = value.length % 2,\n                    idx,\n                    evenSum,\n                    oddSum;\n\n                    for (idx = 0; idx < value.length; idx++) {\n                        checkValues[(idx + odd) % 2] += parseInt(value.charAt(idx),10);\n                    }\n\n                    oddSum = checkValues[0];\n                    evenSum = (checkValues[1] * 2).toString();\n\n                    for (idx = 0; idx < evenSum.length; idx++) {\n                        oddSum += parseInt(evenSum.charAt(idx),10);\n                    }\n\n                    return [(10 - (oddSum % 10)) % 10];\n                },\n                Modulo11: function(value) {\n                    var weightedSum = 0,\n                        mod = 11,\n                        length = value.length,\n                        weight,\n                        checkValue;\n\n                    for (var i = 0; i < length; i++) {\n                        weight = ((length - i) % 6 || 6) + 1;\n                        weightedSum += weight * value.charAt(i);\n                    }\n                    checkValue = (mod - weightedSum % mod) % mod;\n                    if (checkValue != 10) {\n                        return [checkValue];\n                    }\n                    return [1, 0];\n                },\n                Modulo11Modulo10: function(value) {\n                    var checkValues = this.Modulo11(value),\n                        mod11Value;\n                    mod11Value = value + checkValues[0];\n\n                    return checkValues.concat(this.Modulo10(mod11Value));\n                },\n                Modulo10Modulo10: function(value) {\n                    var checkValues = this.Modulo10(value),\n                        mod10Value;\n                    mod10Value = value + checkValues[0];\n\n                    return checkValues.concat(this.Modulo10(mod10Value));\n                }\n            },\n            characterMap: [\"12121212\", \"12121221\",\"12122112\", \"12122121\", \"12211212\", \"12211221\", \"12212112\", \"12212121\", \"21121212\", \"21121221\"],\n            START: \"21\",\n            STOP: \"121\",\n            checkSumType: \"\"\n        });\n\n        encodings.msimod10 = msiBase.extend({\n            name: \"MSI Modulo10\",\n            checkSumType: \"Modulo10\"\n        });\n\n        encodings.msimod11 = msiBase.extend({\n            name: \"MSI Modulo11\",\n            checkSumType: \"Modulo11\"\n        });\n\n        encodings.msimod1110 = msiBase.extend({\n            name: \"MSI Modulo11 Modulo10\",\n            checkSumType: \"Modulo11Modulo10\"\n        });\n\n        encodings.msimod1010 = msiBase.extend({\n            name: \"MSI Modulo10 Modulo10\",\n            checkSumType: \"Modulo10Modulo10\"\n        });\n\n        encodings.code11 = Encoding.extend({\n            name: \"Code 11\",\n            cCheckSumTotal: 10,\n            kCheckSumTotal: 9,\n            kCheckSumMinLength: 10,\n            checkSumMod: 11,\n            DASH_VALUE: 10,\n            DASH: \"-\",\n            START: \"112211\",\n            STOP: \"11221\",\n            initValue: function(value, width) {\n                var that = this;\n                that.pattern = [];\n                that.value = value;\n                that.width = width;\n                that.totalUnits = 0;\n            },\n            addData: function() {\n                var that = this;\n                var value = that.value;\n                that.addPattern(that.START);\n\n                for (var i = 0; i < value.length; i++) {\n                    that.addCharacter(value.charAt(i));\n                }\n\n                if (that.options.addCheckSum) {\n                    that.addCheckSum();\n                }\n\n                that.addPattern(that.STOP);\n                that.setBaseUnit();\n            },\n            setBaseUnit: function() {\n                var that = this;\n                that.baseUnit = that.width / (that.totalUnits + that.quietZoneLength);\n            },\n            addCheckSum: function() {\n                var that = this,\n                    value = that.value,\n                    length = value.length,\n                    cValue;\n\n                cValue = that.getWeightedSum(value, length, that.cCheckSumTotal) % that.checkSumMod;\n                that.checksum = cValue + \"\";\n                that.addPattern(that.characterMap[cValue]);\n\n                length++;\n                if (length >= that.kCheckSumMinLength) {\n                    var kValue = (cValue + that.getWeightedSum(value, length, that.kCheckSumTotal)) % that.checkSumMod;\n                    that.checksum += kValue;\n                    that.addPattern(that.characterMap[kValue]);\n                }\n            },\n            getWeightedSum: function(value, length, total) {\n                var weightedSum = 0;\n                for (var i = 0; i < value.length; i++) {\n                    weightedSum += this.weightedValue(this.getValue(value.charAt(i)), length, i, total);\n                }\n\n                return weightedSum;\n            },\n            weightedValue: function(value, length, index, total) {\n                var weight = (length - index) % total || total;\n                return weight * value;\n            },\n            getValue: function(character) {\n                var that = this;\n                if (!isNaN(character)) {\n                    return parseInt(character,10);\n                }\n                else if (character !== that.DASH) {\n                    that.invalidCharacterError(character);\n                }\n                return that.DASH_VALUE;\n            },\n            addCharacter: function(character) {\n                var that = this,\n                    value = that.getValue(character),\n                    pattern = that.characterMap[value];\n                that.addPattern(pattern);\n            },\n            addPattern: function(pattern) {\n                var value;\n                for (var i = 0; i < pattern.length; i++) {\n                    value = parseInt(pattern.charAt(i),10);\n                    this.pattern.push(value);\n                    this.totalUnits += value;\n                }\n            },\n            characterMap: [\"111121\", \"211121\", \"121121\", \"221111\", \"112121\", \"212111\", \"122111\", \"111221\", \"211211\", \"211111\", \"112111\"],\n            options: {\n                addCheckSum: true\n            }\n        });\n\n        encodings.postnet = Encoding.extend({\n            name: \"Postnet\",\n            START: \"2\",\n            VALID_CODE_LENGTHS: [5,9, 11],\n            DIGIT_SEPARATOR: \"-\",\n            initValue: function(value, width, height) {\n                var that = this;\n                that.height = height;\n                that.width = width;\n                that.baseHeight = height / 2;\n                that.value = value.replace(new RegExp(that.DIGIT_SEPARATOR,\"g\"), \"\");\n                that.pattern = [];\n                that.validate(that.value);\n                that.checkSum = 0;\n                that.setBaseUnit();\n            },\n            addData: function() {\n                var that = this,\n                    value = that.value;\n                that.addPattern(that.START);\n\n                for (var i = 0; i < value.length; i++) {\n                    that.addCharacter(value.charAt(i));\n                }\n\n                if (that.options.addCheckSum) {\n                    that.addCheckSum();\n                }\n\n                that.addPattern(that.START);\n                that.pattern.pop();\n            },\n            addCharacter: function(character) {\n                var that = this,\n                    pattern = that.characterMap[character];\n                that.checkSum += parseInt(character,10);\n                that.addPattern(pattern);\n            },\n            addCheckSum: function() {\n                var that = this;\n                that.checksum = (10 - (that.checkSum % 10)) % 10;\n                that.addCharacter(that.checksum);\n            },\n            setBaseUnit: function() {\n                var that = this,\n                    startStopLength = 3;\n                that.baseUnit = that.width / ((that.value.length + 1) * 10 + startStopLength + that.quietZoneLength);\n            },\n            validate: function(value) {\n                var that = this;\n\n                if (!numberRegex.test(value)) {\n                    that.invalidCharacterError(value.match(/[^0-9]/)[0]);\n                }\n                if (inArray(value.length, that.VALID_CODE_LENGTHS) < 0) {\n                    throw new Error(\"Invalid value length. Valid lengths for the Postnet symbology are \" + that.VALID_CODE_LENGTHS.join(\",\"));\n                }\n            },\n            addPattern: function(pattern) {\n                var that = this,\n                    y1;\n                for (var i = 0; i < pattern.length; i++) {\n                    y1 = that.height - that.baseHeight * pattern.charAt(i);\n                    that.pattern.push({ width: 1, y1: y1, y2: that.height });\n                    that.pattern.push(1);\n                }\n            },\n            characterMap: [\"22111\", \"11122\", \"11212\", \"11221\", \"12112\", \"12121\", \"12211\", \"21112\", \"21121\", \"21211\"]\n        });\n\n        encodings.ean13 = Encoding.extend({\n            initValue: function(value, width, height) {\n                value += \"\";\n\n                if (value.length != 12 || /\\D/.test(value)) {\n                    throw new Error('The value of the \"EAN13\" encoding should be 12 symbols');\n                }\n\n                var that = this;\n                that.pattern = [];\n                that.options.height = height;\n                that.baseUnit = width / (95 + that.quietZoneLength);\n                that.value = value;\n                that.checksum = that.calculateChecksum();\n                that.leftKey = value[0];\n                that.leftPart = value.substr(1,6);\n                that.rightPart = value.substr(7) + that.checksum;\n            },\n            addData: function() {\n                var that = this;\n                that.addPieces(that.characterMap.start);\n                that.addSide(that.leftPart,that.leftKey);\n                that.addPieces(that.characterMap.middle);\n                that.addSide(that.rightPart);\n                that.addPieces(that.characterMap.start);\n            },\n            addSide: function(leftPart,key) {\n                var that = this;\n                for (var i = 0; i < leftPart.length; i++) {\n                    if (key && parseInt(that.keyTable[key].charAt(i),10)) {\n                        that.addPieces(Array.prototype.slice.call(that.characterMap.digits[leftPart.charAt(i)]).reverse(),true);\n                    } else {\n                        that.addPieces(that.characterMap.digits[leftPart.charAt(i)],true);\n                    }\n                }\n            },\n            addPieces: function(arrToAdd,limitedHeight) {\n                var that = this;\n                for (var i = 0; i < arrToAdd.length; i++) {\n                    if (limitedHeight) {\n                        that.pattern.push({\n                            y1: 0,\n                            y2: that.options.height * 0.95,\n                            width: arrToAdd[i]\n                        });\n                    } else {\n                        that.pattern.push(arrToAdd[i]);\n                    }\n                }\n            },\n            calculateChecksum: function() {\n                var odd = 0,\n                    even = 0,\n                    value = this.value.split(\"\").reverse().join(\"\");\n                for (var i = 0; i < value.length; i++) {\n                    if (i % 2) {\n                        even += parseInt(value.charAt(i),10);\n                    }\n                    else {\n                        odd += parseInt(value.charAt(i),10);\n                    }\n                }\n                var checksum = (10 - ((3 * odd + even) % 10)) % 10;\n                return checksum;\n            },\n            keyTable: [\n                '000000',\n                '001011',\n                '001101',\n                '001110',\n                '010011',\n                '011001',\n                '011100',\n                '010101',\n                '010110',\n                '011010'\n            ],\n            characterMap: {\n                digits: [\n                    [3,2,1,1],\n                    [2,2,2,1],\n                    [2,1,2,2],\n                    [1,4,1,1],\n                    [1,1,3,2],\n                    [1,2,3,1],\n                    [1,1,1,4],\n                    [1,3,1,2],\n                    [1,2,1,3],\n                    [3,1,1,2]\n                ],\n                start: [1,1,1],\n                middle: [1,1,1,1,1]\n            }\n        });\n\n        encodings.ean8 = encodings.ean13.extend({\n            initValue: function(value, width, height) {\n                var that = this;\n                if (value.length != 7 || /\\D/.test(value)) {\n                    throw new Error('Invalid value provided');\n                }\n                that.value = value;\n                that.options.height = height;\n                that.checksum = that.calculateChecksum(that.value);\n                that.leftPart = that.value.substr(0,4);\n                that.rightPart = that.value.substr(4) + that.checksum;\n                that.pattern = [];\n                that.baseUnit = width / (67 + that.quietZoneLength);\n            }\n        });\n\n        var Barcode = Widget.extend({\n            init: function(element, options) {\n                 var that = this;\n                 Widget.fn.init.call(that, element, options);\n                 that.element = $(element);\n                 that.wrapper = that.element;\n                 that.element.addClass(\"k-barcode\").css(\"display\", \"block\");\n                 that.surfaceWrap = $(\"<div />\").css(\"position\", \"relative\").appendTo(this.element);\n                 that.surface = kendo_drawing_cmn_chunk_js.w.create(that.surfaceWrap[0], {\n                     type: that.options.renderAs\n                 });\n                 that._setOptions(options);\n                 if (options && kendo_charts_cmn_chunk_js.e(options.value)) {\n                     that.redraw();\n                 }\n            },\n\n            setOptions: function(options) {\n                this._setOptions(options);\n                this.redraw();\n            },\n\n            redraw: function() {\n                var size = this._getSize();\n\n                this.surface.clear();\n                this.surface.setSize({\n                    width: size.width,\n                    height: size.height\n                });\n\n                this.createVisual();\n                this.surface.draw(this.visual);\n            },\n\n            getSize: function() {\n                return kendo.dimensions(this.element);\n            },\n\n            _resize: function() {\n                this.redraw();\n            },\n\n            createVisual: function() {\n                this.visual = this._render();\n            },\n\n            _render: function() {\n                var that = this,\n                    options = that.options,\n                    value = options.value,\n                    textOptions = options.text,\n                    textMargin = kendo_charts_cmn_chunk_js.E(textOptions.margin),\n                    size = that._getSize(),\n                    border = options.border || {},\n                    encoding = that.encoding,\n                    contentBox = new kendo_charts_cmn_chunk_js.B(0, 0, size.width, size.height).unpad(border.width).unpad(options.padding),\n                    barHeight = contentBox.height(),\n                    result, textToDisplay,\n                    textHeight;\n\n                var visual = new kendo_drawing_cmn_chunk_js.G();\n\n                that.contentBox = contentBox;\n                visual.append(that._getBackground(size));\n\n                if (textOptions.visible) {\n                    textHeight = kendo_drawing_cmn_chunk_js.n(value, { font: textOptions.font }).height;\n                    barHeight -= textHeight + textMargin.top + textMargin.bottom;\n                }\n\n                result = encoding.encode(value, contentBox.width(), barHeight);\n\n                if (textOptions.visible) {\n                    textToDisplay = value;\n                    if (options.checksum && kendo_charts_cmn_chunk_js.e(encoding.checksum)) {\n                        textToDisplay += \" \" + encoding.checksum;\n                    }\n\n                    visual.append(that._getText(textToDisplay));\n                }\n\n                that.barHeight = barHeight;\n                this._bandsGroup = this._getBands(result.pattern, result.baseUnit);\n                visual.append(this._bandsGroup);\n\n                return visual;\n            },\n\n            exportVisual: function() {\n                return this._render();\n            },\n\n            _getSize: function() {\n                var that = this,\n                    element = that.element,\n                    size = new kendo_drawing_cmn_chunk_js.z(DEFAULT_WIDTH, DEFAULT_HEIGHT);\n\n                if (element.width() > 0) {\n                    size.width = element.width();\n                }\n                if (element.height() > 0) {\n                    size.height = element.height();\n                }\n                if (that.options.width) {\n                   size.width = that.options.width;\n                }\n                if (that.options.height) {\n                   size.height = that.options.height;\n                }\n\n                return size;\n            },\n\n            value: function(value) {\n                var that = this;\n                if (!kendo_charts_cmn_chunk_js.e(value)) {\n                    return that.options.value;\n                }\n                that.options.value = value + '';\n                that.redraw();\n            },\n\n            _getBands: function(pattern, baseUnit) {\n                var that = this,\n                    contentBox = that.contentBox,\n                    position = contentBox.x1,\n                    step,\n                    item;\n\n                var group = new kendo_drawing_cmn_chunk_js.G();\n                for (var i = 0; i < pattern.length; i++) {\n                    item = isPlainObject(pattern[i]) ? pattern[i] : {\n                        width: pattern[i],\n                        y1: 0,\n                        y2: that.barHeight\n                    };\n\n                    step = item.width * baseUnit;\n\n                    if (i % 2) {\n                        var rect = kendo_drawing_cmn_chunk_js.R.fromPoints(\n                            new kendo_drawing_cmn_chunk_js.P(position, item.y1 + contentBox.y1),\n                            new kendo_drawing_cmn_chunk_js.P(position + step, item.y2 + contentBox.y1)\n                        );\n\n                        var path = kendo_drawing_cmn_chunk_js.b.fromRect(rect, {\n                            fill: {\n                                color: that.options.color\n                            },\n                            stroke: null\n                        });\n\n                        group.append(path);\n                    }\n\n                    position += step;\n                }\n\n                return group;\n            },\n\n            _getBackground: function(size) {\n                var that = this,\n                    options = that.options,\n                    border = options.border || {};\n\n                var box = new kendo_charts_cmn_chunk_js.B(0,0, size.width, size.height).unpad(border.width / 2);\n                var path = kendo_drawing_cmn_chunk_js.b.fromRect(box.toRect(), {\n                    fill: {\n                        color: options.background\n                    },\n                    stroke: {\n                        color: border.width ? border.color : \"\",\n                        width: border.width,\n                        dashType: border.dashType\n                    }\n                });\n\n                return path;\n            },\n\n            _getText: function(value) {\n                var that = this,\n                    textOptions = that.options.text,\n                    text = that._textbox = new kendo_charts_cmn_chunk_js.T(value, {\n                        font: textOptions.font,\n                        color: textOptions.color,\n                        align: \"center\",\n                        vAlign: \"bottom\",\n                        margin: textOptions.margin\n                    });\n\n                text.reflow(that.contentBox);\n                text.renderVisual();\n\n                return text.visual;\n            },\n\n            _setOptions: function(options) {\n                var that = this;\n                that.type = (options.type || that.options.type).toLowerCase();\n\n                if (that.type == \"upca\") { //extend instead\n                    that.type = \"ean13\";\n                    options.value = '0' + options.value;\n                }\n\n                if (that.type == \"upce\") {\n                    that.type = \"ean8\";\n                    options.value = '0' + options.value;\n                }\n\n                if (!encodings[that.type]) {\n                    throw new Error('Encoding ' + that.type + 'is not supported.');\n                }\n\n                that.encoding = new encodings[that.type]();\n\n                that.options = extend(true, that.options, options);\n            },\n\n            options: {\n                name: \"Barcode\",\n                renderAs: \"svg\",\n                value: \"\",\n                type: \"code39\",\n                checksum: false,\n                width: 0,\n                height: 0,\n                color: \"black\",\n                background: \"white\",\n                text: {\n                    visible: true,\n                    font: \"16px Consolas, Monaco, Sans Mono, monospace, sans-serif\",\n                    color: \"black\",\n                    margin: {\n                        top: 0,\n                        bottom: 0,\n                        left: 0,\n                        right: 0\n                    }\n                },\n                border: {\n                    width: 0,\n                    dashType: \"solid\",\n                    color: \"black\"\n                },\n                padding: {\n                    top: 0,\n                    bottom: 0,\n                    left: 0,\n                    right: 0\n                }\n            }\n        });\n        dataviz.ExportMixin.extend(Barcode.fn);\n\n        dataviz.ui.plugin(Barcode);\n\n        kendo.deepExtend(dataviz, {\n            encodings: encodings,\n            Encoding: Encoding\n        });\n\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    exports.__meta__ = __meta__;\n    exports.default = kendo$1;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}