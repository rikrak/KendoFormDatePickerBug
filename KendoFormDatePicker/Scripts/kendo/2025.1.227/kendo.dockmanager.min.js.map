{"version":3,"sources":["raw-js/kendo.dockmanager.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendo","_globals","Dockmanager","this","$","undefined$1","window","Widget","ui","NS","extend","percentageUnitsRegex","DOCK_MANAGER_TOOLBAR","TOOLBAR_TEMPLATE","KSTATIC_PANE","KKPINNED_PANE","KKUNPINNED_PANE","KPANE_TABBED","SPLITTER","KSPLITBAR","HORIZONTAL","VERTICAL","KHIDDEN","KBUTTON","KPANE","KPANES_CONTAINER","KPANE_ACTIONS","KDOCK_INDICATOR","KDOCK_NAVIGATOR","KDOCK_PREVIEW","KSELECTED","KACTIVE","KTABSTRIP","SPLIT","TAB","HEIGHT","WIDTH","TOP","BOTTOM","LEFT","RIGHT","MIDDLE","CLICK","PIN","UNPIN","UNSHIFT","PANE","paneSelector","uid","attr","UID_ATTR","INDICATOR_ATTR","ACTION_ATTR","INDICATOR_TEMPLATE","NAVIGATOR_TEMPLATE","CLOSE","DOCK","INNER_DOCK","RESIZE","DRAG","DRAGSTART","DRAGEND","DockManager","init","element","options","that","fn","call","addClass","panesContainer","appendTo","_processPanes","rootPane","_refreshToolbar","_createPane","_bindEvents","_initNavigator","_initUnpinnedResizable","notify","events","name","type","orientation","panes","paneDefaults","visible","closeable","collapsed","size","actions","icon","shouldAdd","pane","unpinnable","unpinned","minimizable","maximizable","indicators","top","left","transform","previewTop","previewLeft","rotate","hoveredPaneHeight","draggedPaneHeight","hoveredPaneWidth","draggedPaneWidth","togglePane","id","_getPaneById","_togglePane","removePane","_removePane","getOptions","setOptions","currentOptions","deepExtend","destroy","empty","_unpinnedResizable","Resizable","unpinnedContainer","handle","resize","e","delta","x","containerWidth","width","on","_toolbarButtonClick","bind","_hideUnpinnedPanes","_pinPaneClick","_closePane","_displayDockPreview","_hideDockPreview","currentlyOpened","find","filter","unpinnedContainerVisible","is","_toolbar","removeClass","itemUid","currentTarget","preventDefault","_showUnpinnedPane","paneUid","toolbarWidth","outerWidth","_findPaneByUid","hasUnpinnedSize","unpinnedSize","css","button","isTabbed","parent","action","paneElement","closest","isUnpinned","parentPane","parentUid","eventData","remove","_refreshRootPane","toggleClass","trigger","paneIndex","indexOf","event","splice","_shouldHideParent","length","some","_refreshPane","parentElement","guid","_extendPane","forEach","childPane","j","subItem","scrollable","unpinnedPanes","_unpinnedPanes","unpinnedPannesContainer","append","insertBefore","prepend","i","html","renderButton","fillMode","_paneHeader","off","wrapper","refresh","rootPaneElement","_createSplitPane","splitterElement","splitterOptions","childPanesToInit","paneOptions","_createUnpinnedPane","push","splitter","Splitter","_updatePaneSize","leftPane","rightPane","ev","_createTabPane","tabStripElement","tabContainer","selectedPane","selected","tab","title","contentElement","_addActions","children","kendoTabStrip","animation","_createContentPane","content","template","data","isUnnpinned","actionsContainer","themeColor","string","charAt","toUpperCase","slice","result","concat","header","tabHeader","found","prop","value","params","navigatorDraggable","Draggable","autoScroll","hint","actionsHtml","_getActionButtons","hintTemplate","height","updateHint","coordinates","location","y","zIndex","dragstart","_dragStart","dragend","_dragEnd","drag","_drag","target","draggedPane","_displayGlobalIndicators","draggableEvent","hoveredIndicator","hide","_updateLayout","_showHiddenPanes","hoveredPane","currentPane","elementUnderCursor","navigator","currentPaneUid","prevPaneUid","dragTargetUid","position","dockable","innerDock","_showTab","_showPane","tabstrip","show","activateTab","splitbar","siblings","_hideDraggedPane","draggedElement","_hideTab","_hidePane","prevElement","prev","nextElement","next","isActive","buttons","container","each","_","clone","indicator","isGlobalIndicator","indicatorName","indicatorUid","indicatorData","previewElement","containerHeight","outerHeight","existingPreview","preview","draggedPaneParent","draggedPaneIndex","_tabDock","_splitDock","_adjustSiblingSizes","targetPane","isGlobalDock","targetPaneParent","targetPaneIndex","dimension","newParentPane","unshift","_getSiblings","parentSize","draggedPaneSize","newParentSize","noSizePanes","freeSpace","_calculateNewSize","noSizePane","newSize","paneSize","proportion","noUnitSize","unit","test","replace","p","plugin","jQuery","kendo$1","__meta__","category","description","depends","default","Object","defineProperty"],"mappings":"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","file":"kendo.dockmanager.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('kendo.core.js'), require('kendo.splitter.js'), require('kendo.tabstrip.js'), require('kendo.window.js'), require('kendo.html.button.js'), require('kendo.resizable.js'), require('kendo.draganddrop.js')) :\n    typeof define === 'function' && define.amd ? define(['exports', 'kendo.core', 'kendo.splitter', 'kendo.tabstrip', 'kendo.window', 'kendo.html.button', 'kendo.resizable', 'kendo.draganddrop'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.kendo = global.kendo || {}, global.kendo._globals = global.kendo._globals || {}, global.kendo._globals.Dockmanager = {})));\n})(this, (function (exports) {\n    const __meta__ = {\n        id: \"dockManager\",\n        name: \"DockManager\",\n        category: \"web\",\n        description: \"The DockManager widget represents a layout component that allows users to achieve custom layouts by docking panes.\",\n        depends: [\"core\", \"splitter\", \"tabstrip\", \"window\", \"html.button\"]\n    };\n\n    (function($, undefined$1) {\n        const kendo = window.kendo,\n            Widget = kendo.ui.Widget,\n            NS = \".kendoDockManager\",\n            ui = kendo.ui,\n            extend = $.extend,\n            percentageUnitsRegex = /^\\d+(\\.\\d+)?%$/i,\n            DOCK_MANAGER = \"k-dock-manager\",\n            DOCK_MANAGER_TOOLBAR = \"k-dock-manager-toolbar\",\n            TOOLBAR_TEMPLATE = `<div class=\"${DOCK_MANAGER_TOOLBAR} k-toolbar-left k-toolbar k-toolbar-md k-toolbar-solid\"></div>`,\n            TOOLBAR_BUTTON = \"k-toolbar-button\",\n            SEPARATOR = `<div class=\"k-separator k-separator-horizontal\"></div>`,\n            KSTATIC_PANE = \"k-pane-static\",\n            KKPINNED_PANE = \"k-pane-pinned\",\n            KKUNPINNED_PANE = \"k-pane-unpinned\",\n            KPANE_TABBED = \"k-pane-tabbed\",\n            SPLITTER = \"k-splitter\",\n            KSPLITBAR = \"k-splitbar\",\n            DOCK_SPLITTER = \"k-dock-manager-splitter\",\n            KUNPINNED_CONTAINER = \"k-dock-manager-unpinned-container\",\n            HORIZONTAL = \"horizontal\",\n            VERTICAL = \"vertical\",\n            KHIDDEN = \"k-hidden\",\n            KBUTTON = \"k-button\",\n            KPANE = \"k-pane\",\n            KPANE_FLEX = \"k-pane-flex\",\n            KPANES_CONTAINER = \"k-dock-manager-pane-container\",\n            KPANE_SCROLLABLE = \"k-pane-scrollable\",\n            KPANE_ACTIONS = \"k-pane-actions\",\n            KDOCK_INDICATOR = \"k-dock-indicator\",\n            KDOCK_NAVIGATOR = \"k-dock-navigator\",\n            KDOCK_PREVIEW = \"k-docking-preview\",\n            KSELECTED = \"k-selected\",\n            KACTIVE = \"k-active\",\n            KTABSTRIP = \"k-tabstrip\",\n            KSPLITBAR_DRAGGABLE = \"k-splitbar-draggable\",\n            SPLIT = \"split\",\n            TAB = \"tab\",\n            CONTENT = \"content\",\n            HEIGHT = \"height\",\n            WIDTH = \"width\",\n            TOP = \"top\",\n            BOTTOM = \"bottom\",\n            LEFT = \"left\",\n            RIGHT = \"right\",\n            MIDDLE = \"middle\",\n            CLICK = \"click\",\n            PIN = \"pin\",\n            UNPIN = \"unpin\",\n            UNSHIFT = \"unshift\",\n            PUSH = \"push\",\n            PANE = `<div class=\"${KPANE} ${KPANE_FLEX} ${KSTATIC_PANE}\"></div>`,\n            paneSelector = uid => `.${KPANE}[${kendo.attr(\"uid\")}=\"${uid}\"]`,\n            buttonTextTemplate = text => `<span class=\"k-button-text\">${text}</span>`,\n            contentPaneTemplate = data => `<div class=\"${KPANE_SCROLLABLE}\">\n                                            <div class=\"k-pane-header\">\n                                                <span class=\"k-pane-title\">${data.title}</span>\n                                                <div class=\"${KPANE_ACTIONS}\"></div>\n                                            </div>\n                                            <div class=\"k-pane-content\">${data.content}</div>\n                                        </div>`,\n            tabTemplate = title => `<li><span class=\"k-link\"><span class=\"k-link-text\">${title}</span></span></li>`,\n            unpinnedResizeSplitbar = `<div class=\"k-splitbar k-splitbar-horizontal ${KSPLITBAR_DRAGGABLE}-horizontal\">\n                                    <div class=\"k-resize-handle\"></div>\n                                </div>`,\n            UID_ATTR = kendo.attr(\"uid\"),\n            INDICATOR_ATTR = kendo.attr(\"indicator\"),\n            ACTION_ATTR = kendo.attr(\"action\"),\n            hintTemplate = pane => `<div class=\"k-tooltip k-tooltip-primary\">\n                                    <div class=\"k-tooltip-content\">${pane.title}</div>\n                                </div>`,\n            INDICATOR_TEMPLATE = `<div class=\"${KDOCK_INDICATOR}\">\n                        <span class=\"k-svg-icon k-icon-xl k-svg-i-position-top\">\n                        <svg aria-hidden=\"true\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n                            <path d=\"M480 448V32H32v448h448v-32zm-416 0V64h384v384H64zM96 96h320v96H96z\"></path>\n                        </svg>\n                        </span>\n                    </div>`,\n            NAVIGATOR_TEMPLATE = `<div class=\"${KDOCK_NAVIGATOR}\" style=\"position: relative;\">\n                                <div class=\"k-dock-indicator k-dock-indicator-top\" ${INDICATOR_ATTR}=\"top\">\n                                <span class=\"k-svg-icon k-icon-xl k-svg-i-position-top\">\n                                    <svg aria-hidden=\"true\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n                                        <path d=\"M480 448V32H32v448h448v-32zm-416 0V64h384v384H64zM96 96h320v96H96z\"></path>\n                                    </svg>\n                                </span>\n                                </div>\n                                <div class=\"k-dock-indicator k-dock-indicator-right\" ${INDICATOR_ATTR}=\"right\">\n                                <span class=\"k-svg-icon k-icon-xl k-svg-i-position-right\">\n                                    <svg aria-hidden=\"true\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n                                        <path d=\"M64 480h416V32H32v448h32zm0-416h384v384H64V64zm256 32h96v320h-96z\"></path>\n                                    </svg>\n                                </span>\n                                </div>\n                                <div class=\"k-dock-indicator k-dock-indicator-bottom\" ${INDICATOR_ATTR}=\"bottom\">\n                                <span class=\"k-svg-icon k-icon-xl k-svg-i-position-bottom\">\n                                    <svg aria-hidden=\"true\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n                                        <path d=\"M32 64v416h448V32H32v32zm416 0v384H64V64h384zM96 320h320v96H96z\"></path>\n                                    </svg>\n                                </span>\n                                </div>\n                                <div class=\"k-dock-indicator k-dock-indicator-left\" ${INDICATOR_ATTR}=\"left\">\n                                <span class=\"k-svg-icon k-icon-xl k-svg-i-position-left\">\n                                    <svg aria-hidden=\"true\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n                                        <path d=\"M448 32H32v448h448V32h-32zm0 416H64V64h384v384zM96 96h96v320H96z\"></path>\n                                    </svg>\n                                </span>\n                                </div>\n                                <div class=\"k-dock-indicator k-dock-indicator-middle\" ${INDICATOR_ATTR}=\"middle\">\n                                <span class=\"k-svg-icon k-icon-xl k-svg-i-window\">\n                                    <svg aria-hidden=\"true\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n                                        <path d=\"M96 96v320h320V96H96zm288 288H128V192h256v192z\"></path>\n                                    </svg>\n                                </span>\n                                </div>\n                            </div>`,\n            CLOSE = \"close\",\n            DOCK = \"dock\",\n            INNER_DOCK = \"innerDock\",\n            RESIZE = \"resize\",\n            RESIZING = \"resizing\",\n            DRAG = \"drag\",\n            DRAGSTART = \"dragStart\",\n            DRAGEND = \"dragEnd\",\n            CHANGE = \"change\";\n\n        function capitalizeFirstLetter(string) {\n            return string.charAt(0).toUpperCase() + string.slice(1);\n        }\n\n        function isPercentageSize(size) {\n            return percentageUnitsRegex.test(size);\n        }\n\n        const DockManager = Widget.extend({\n            init: function(element, options) {\n                const that = this;\n\n                Widget.fn.init.call(that, element, options);\n                options = $.extend(true, {}, options);\n                that.element.addClass(DOCK_MANAGER);\n\n                that.panesContainer = $(`<div class=\"${KPANES_CONTAINER}\" />`).appendTo(that.element);\n                that._processPanes(that.options.rootPane);\n                that._refreshToolbar();\n                that._createPane(that.panesContainer, that.options.rootPane);\n                that._bindEvents();\n                that._initNavigator();\n                that._initUnpinnedResizable();\n\n                kendo.notify(that);\n            },\n\n            events: [\n                CLOSE,\n                PIN,\n                UNPIN,\n                DOCK,\n                INNER_DOCK,\n                RESIZE,\n                DRAG,\n                DRAGSTART,\n                DRAGEND\n            ],\n\n            options: {\n                name: 'DockManager',\n                rootPane: {\n                    type: SPLIT,\n                    orientation: HORIZONTAL,\n                    panes: []\n                }\n            },\n\n            paneDefaults: {\n                visible: true,\n                closeable: true,\n                collapsed: false,\n                size: ''\n            },\n\n            actions: [\n                {\n                    name: \"pin\",\n                    icon: \"unpin\",\n                    shouldAdd: pane => pane.unpinnable && pane.unpinnable.unpinned\n                },{\n                    name: \"unpin\",\n                    icon: \"pin\",\n                    shouldAdd: pane => pane.unpinnable && !pane.unpinnable.unpinned\n                },{\n                    name: \"minimize\",\n                    icon: \"minimize\",\n                    shouldAdd: pane => pane.minimizable\n                },{\n                    name: \"maximize\",\n                    icon: \"maximize\",\n                    shouldAdd: pane => pane.maximizable\n                },{\n                    name: \"close\",\n                    icon: \"x\",\n                    shouldAdd: pane => pane.closeable != false\n                },{\n                    name: \"more\",\n                    icon: \"more-vertical\",\n                    shouldAdd: pane => false //not needed for v1 as currently only 2 actions are available\n                }\n            ],\n\n            indicators: [\n                {\n                    name: TOP,\n                    top: 0,\n                    left: \"50%\",\n                    transform: \"translate(-50%, 0)\",\n                    previewTop: () => 0,\n                    previewLeft: () => 0,\n                    rotate: \"0deg\"\n                },{\n                    name: BOTTOM,\n                    top: \"100%\",\n                    left: \"50%\",\n                    transform: \"translate(-50%, -100%)\",\n                    previewTop: (hoveredPaneHeight, draggedPaneHeight) => hoveredPaneHeight - draggedPaneHeight,\n                    previewLeft: () => 0,\n                    rotate: \"180deg\"\n                },{\n                    name: LEFT,\n                    top: \"50%\",\n                    left: 0,\n                    transform: \"translate(0, -50%)\",\n                    previewTop: () => 0,\n                    previewLeft: () => 0,\n                    rotate: \"270deg\"\n                },{\n                    name: RIGHT,\n                    top: \"50%\",\n                    left: \"100%\",\n                    transform: \"translate(-100%, -50%)\",\n                    previewTop: () => 0,\n                    previewLeft: (hoveredPaneWidth, draggedPaneWidth) => hoveredPaneWidth - draggedPaneWidth,\n                    rotate: \"90deg\"\n                },{\n                    name: MIDDLE,\n                    previewTop: () => 0,\n                    previewLeft: () => 0,\n                }\n            ],\n\n            togglePane: function(id) {\n                const that = this,\n                pane = that._getPaneById(that.options.rootPane, \"id\", id);\n\n                if (pane != undefined$1) {\n                    that._togglePane(pane);\n                }\n            },\n\n            removePane: function(id) {\n                const that = this;\n                const pane = that._getPaneById(that.options.rootPane, \"id\", id);\n\n                if (pane != undefined$1) {\n                    that._removePane(pane);\n                }\n            },\n\n            getOptions: function() {\n                const that = this;\n                return that.options;\n            },\n\n            setOptions: function(options) {\n                const that = this;\n                let currentOptions = that.getOptions();\n                kendo.deepExtend(currentOptions, options);\n\n                that.destroy();\n                that.element.empty();\n\n                that.init(that.element, currentOptions);\n\n            },\n\n            _initUnpinnedResizable: function() {\n                const that = this;\n\n                that._unpinnedResizable = new kendo.ui.Resizable(that.unpinnedContainer, {\n                    orientation: HORIZONTAL,\n                    handle: \".k-splitbar-horizontal.k-splitbar-draggable-horizontal\",\n                    resize: function(e) {\n                        const delta = e.x.delta;\n                        const containerWidth = that.unpinnedContainer.width();\n\n                        that.unpinnedContainer.width(containerWidth + delta);\n                    }\n                });\n            },\n\n            _bindEvents: function() {\n                const that = this;\n\n                that.element.on(CLICK + NS, `.k-dock-manager-toolbar .${KBUTTON}`, that._toolbarButtonClick.bind(that));\n                that.element.on(CLICK + NS, `.${KPANES_CONTAINER}`, that._hideUnpinnedPanes.bind(that));\n                that.element.on(CLICK + NS, `.${KBUTTON}[${ACTION_ATTR}=\"pin\"], .${KBUTTON}[${ACTION_ATTR}=\"unpin\"]`, that._pinPaneClick.bind(that));\n                that.element.on(CLICK + NS, `.${KBUTTON}[${ACTION_ATTR}=\"close\"]`, that._closePane.bind(that));\n                that.element.on(\"mouseenter\" + NS, `.${KDOCK_INDICATOR}`, that._displayDockPreview.bind(that));\n                that.element.on(\"mouseleave\" + NS, `.${KDOCK_INDICATOR}`, that._hideDockPreview.bind(that));\n            },\n\n            _hideUnpinnedPanes: function(e) {\n                const that = this;\n                const unpinnedPanes = that.unpinnedContainer.find(`.${KPANE}`);\n                const currentlyOpened = unpinnedPanes.filter(\":visible\");\n                const unpinnedContainerVisible = that.unpinnedContainer.is(\":visible\");\n\n                if (currentlyOpened && unpinnedContainerVisible) {\n                    that._toolbar.find(`.${KSELECTED}`).removeClass(KSELECTED);\n                    that.unpinnedContainer.addClass(KHIDDEN);\n                    return;\n                }\n            },\n\n            _toolbarButtonClick: function(e) {\n                const that = this;\n                const itemUid = $(e.currentTarget).attr(UID_ATTR);\n                const unpinnedPanes = that.unpinnedContainer.find(`.${KPANE}`);\n                const currentlyOpened = unpinnedPanes.filter(\":visible\");\n                const unpinnedContainerVisible = that.unpinnedContainer.is(\":visible\");\n\n                e.preventDefault();\n                that._toolbar.find(`.${KBUTTON}`).removeClass(KSELECTED);\n\n                if (currentlyOpened.attr(UID_ATTR) === itemUid && unpinnedContainerVisible) {\n                    that.unpinnedContainer.addClass(KHIDDEN);\n                    return;\n                }\n\n                that._showUnpinnedPane(itemUid);\n            },\n\n            _showUnpinnedPane: function(paneUid) {\n                const that = this;\n                const toolbarWidth = that._toolbar.outerWidth();\n                const pane = that._findPaneByUid(paneUid);\n                const hasUnpinnedSize = pane.unpinnable.unpinnedSize;\n\n                that.unpinnedContainer.removeClass(KHIDDEN).css({ left: `${toolbarWidth}px` });\n                that.unpinnedContainer.find(`.${KPANE}`).addClass(KHIDDEN);\n                that.unpinnedContainer.find(paneSelector(paneUid)).removeClass(KHIDDEN);\n\n                if (hasUnpinnedSize) {\n                    that.unpinnedContainer.css({ width: `${pane.unpinnable.unpinnedSize}` });\n                }\n\n                that._toolbar.find(`.${KBUTTON}[${UID_ATTR}=\"${paneUid}\"]`).addClass(KSELECTED);\n            },\n\n            _pinPaneClick: function(e) {\n                const that = this;\n                const button = $(e.currentTarget);\n                const isTabbed = button.parent().is(\"li\");\n                const action = button.attr(ACTION_ATTR);\n                const paneElement = isTabbed ? button.parent() : $(e.currentTarget).closest(`.${KPANE}`);\n                const pane = that._findPaneByUid(paneElement.attr(UID_ATTR));\n                const isUnpinned = pane.unpinnable.unpinned;\n                const parentPane = that._findPaneByUid(pane.parentUid);\n                const parentPaneElement = that.panesContainer.find(`.${KPANE}[${UID_ATTR}=\"${parentPane.uid}\"], .${SPLITTER}[${UID_ATTR}=\"${parentPane.uid}\"]`);\n                const eventData = { pane: pane, paneElement: paneElement };\n\n                if (isUnpinned) {\n                    kendo.destroy(paneElement);\n                    paneElement.remove();\n                }\n\n                pane.unpinnable.unpinned = action === PIN ? false : true;\n                that._refreshRootPane();\n                that.unpinnedContainer.toggleClass(KHIDDEN, action === PIN);\n                that.unpinnedContainer.find(`.${KPANE}`).removeClass(KKPINNED_PANE).addClass(KKUNPINNED_PANE);\n\n                if (action === \"pin\") {\n                    that.trigger(PIN, eventData);\n                    return;\n                }\n\n                that.trigger(UNPIN, eventData);\n                that._showUnpinnedPane(pane.uid);\n            },\n\n            _closePane: function(e) {\n                const that = this;\n                const button = $(e.currentTarget);\n                const isTabbed = button.parent().is(\"li\");\n                const paneElement = isTabbed ? button.parent() : $(e.currentTarget).closest(`.${KPANE}`);\n                const pane = that._findPaneByUid(paneElement.attr(UID_ATTR));\n                const parentPane = that._findPaneByUid(pane.parentUid);\n                const parentPaneElement = that.panesContainer.find(`.${KPANE}[${UID_ATTR}=\"${parentPane.uid}\"], .${SPLITTER}[${UID_ATTR}=\"${parentPane.uid}\"]`);\n                const paneIndex = parentPane.panes.indexOf(pane);\n                const eventData = { pane: pane, paneElement: paneElement, event: e };\n\n                if (that.trigger(CLOSE, eventData)) {\n                    e.preventDefault();\n                }\n\n                if (pane.unpinnable && pane.unpinnable.unpinned) {\n                    that.unpinnedContainer.addClass(KHIDDEN);\n                }\n\n                parentPane.panes.splice(paneIndex, 1);\n\n                if (that._shouldHideParent(parentPane)) {\n                    parentPane.visible = false;\n                }\n\n                that._refreshRootPane();\n            },\n\n            _shouldHideParent: function(pane) {\n                const that = this,\n                parent = that._findPaneByUid(pane.parentUid);\n\n                if (pane.panes.length == 0) {\n                    if (pane.type == TAB && parent.panes.length == 1) {\n                        parent.panes.splice(0,1);\n                        parent.visible = false;\n                    }\n                    return true;\n                }\n\n                if (pane.panes.length == 1 &&\n                    pane.panes[0].type == TAB &&\n                    !pane.panes.some(x => x.visible)) {\n                    return true;\n                }\n\n                return false;\n            },\n\n            _refreshPane: function(paneElement, pane) {\n                const that = this;\n                const parentElement = paneElement.parent();\n                const isTabbed = paneElement.is(`.${KPANE_TABBED}`);\n\n                kendo.destroy(paneElement);\n                isTabbed ? paneElement.empty() : paneElement.remove();\n                that._refreshToolbar();\n                that._createPane(isTabbed ? paneElement : parentElement, pane);\n            },\n\n            _processPanes: function(pane) {\n                const that = this;\n                pane.uid = pane.uid || kendo.guid();\n                that._extendPane(pane);\n\n                if (pane.type === SPLIT && !pane.orientation) {\n                    pane.orientation = HORIZONTAL;\n                }\n\n                pane.panes.forEach((childPane) => {\n                    childPane.parentUid = pane.uid;\n\n                    if (childPane.type == CONTENT) {\n                        if (childPane.unpinnable === undefined$1 || childPane.unpinnable === true) {\n                            childPane.unpinnable = {\n                                unpinned: false\n                            };\n                        }\n                        childPane.uid = childPane.uid || kendo.guid();\n                    }\n\n                    if (childPane.panes && childPane.panes.length) {\n                        that._processPanes(childPane);\n                    }\n                });\n            },\n\n            _extendPane: function(pane) {\n                const that = this;\n\n                if (pane.panes) {\n                    for (var j = 0; j < pane.panes.length; j++) {\n                        pane.panes.forEach(subItem => {\n                            that._extendPane(subItem);\n                        });\n                    }\n                }\n\n                extend(pane, {\n                    visible: pane.visible === undefined$1 ? that.paneDefaults.visible : pane.visible,\n                    closeable: pane.closeable === undefined$1 ? that.paneDefaults.closeable : pane.closeable,\n                    collapsed: pane.collapsed === undefined$1 ? that.paneDefaults.collapsed : pane.collapsed,\n                    size: pane.size === undefined$1 ? that.paneDefaults.size : pane.size,\n                    scrollable: false,\n                });\n            },\n\n            _togglePane: function(pane) {\n                const that = this;\n\n                pane.visible = !pane.visible;\n                that._refreshRootPane();\n            },\n\n            _removePane: function(pane) {\n                const that = this;\n                const parentPane = that._findPaneByUid(pane.parentUid);\n                const paneIndex = parentPane.panes.indexOf(pane);\n                const parentPaneElement = that.panesContainer.find(`[${UID_ATTR}=\"${pane.uid}\"]`).parent();\n\n                parentPane.panes.splice(paneIndex, 1);\n                that._refreshRootPane();\n            },\n\n            _refreshToolbar: function() {\n                const that = this;\n                const unpinnedPanes = that._unpinnedPanes();\n                const unpinnedPannesContainer = $(`<div class=\"${KHIDDEN}\"/>`).addClass(KUNPINNED_CONTAINER);\n\n                if (!that.unpinnedContainer) {\n                    that.unpinnedContainer = unpinnedPannesContainer;\n                    unpinnedPannesContainer.append(unpinnedResizeSplitbar);\n                    unpinnedPannesContainer.insertBefore(that.panesContainer);\n                }\n\n                if (!unpinnedPanes.length) {\n                    that._toolbar && that._toolbar.remove();\n                    that._toolbar = null;\n                    return;\n                }\n\n                if (!that._toolbar) {\n                    that._toolbar = that.element.prepend(TOOLBAR_TEMPLATE).find(`.${DOCK_MANAGER_TOOLBAR}`);\n                }\n\n                that._toolbar.empty();\n\n                for (let i = 0; i < unpinnedPanes.length; i++) {\n                    const pane = unpinnedPanes[i];\n\n                    const button = $(kendo.html.renderButton({ fillMode: \"flat\", size: \"small\" }))\n                                    .addClass(TOOLBAR_BUTTON)\n                                    .append(buttonTextTemplate(that._paneHeader(pane)));\n\n                    button.attr(UID_ATTR, pane.uid);\n                    that._toolbar.append(button);\n\n                    if (i < unpinnedPanes.length - 1) {\n                        that._toolbar.append(SEPARATOR);\n                    }\n                }\n            },\n\n            destroy: function() {\n                const that = this;\n\n                Widget.fn.destroy.call(that);\n\n                that.element.off(NS);\n                that.element.empty();\n\n                kendo.destroy(that.wrapper);\n            },\n\n            refresh: function() {\n                const that = this;\n                kendo.destroy(that.unpinnedContainer);\n                that.unpinnedContainer.empty();\n                that._refreshRootPane();\n            },\n\n            _refreshRootPane: function() {\n                const that = this;\n                const rootPaneElement = that.element.find(`[${UID_ATTR}=\"${that.options.rootPane.uid}\"]`);\n\n                that._refreshPane(rootPaneElement, that.options.rootPane);\n            },\n\n            _createSplitPane: function(parentElement, pane) {\n                const that = this;\n                const splitterElement = $(\"<div ref-dock-splitter/>\").attr(UID_ATTR, pane.uid);\n                const splitterOptions = {\n                    orientation: pane.orientation || HORIZONTAL,\n                    panes: []\n                };\n\n                if (!pane.panes.some(x=>x.visible)) {\n                    return;\n                }\n\n                parentElement.append(splitterElement);\n\n                const childPanesToInit = [];\n\n                pane.panes.forEach((childPane) => {\n                    const paneOptions = {\n                        uid: childPane.uid,\n                        scrollable: false\n                    };\n                    const paneElement = $(PANE).removeClass(KSTATIC_PANE);\n\n                    if (childPane.unpinnable && childPane.unpinnable.unpinned) {\n                        that._createUnpinnedPane(childPane);\n                        return;\n                    }\n\n                    if (childPane.size) {\n                        paneOptions.size = childPane.size;\n                    }\n\n                    if (childPane.visible != undefined$1) {\n                        paneOptions.visible = childPane.visible;\n                    }\n\n                    if (childPane.visible) {\n                        splitterElement.append(paneElement);\n                        childPanesToInit.push(\n                            () => that._createPane(paneElement, childPane)\n                        );\n                        splitterOptions.panes.push(paneOptions);\n                    }\n                });\n\n                pane.splitter = new kendo.ui.Splitter(splitterElement, splitterOptions); // eslint-disable-line no-new\n                pane.splitter.element.addClass(DOCK_SPLITTER);\n                childPanesToInit.forEach(x => x());\n                pane.splitter.bind(RESIZE, that._updatePaneSize.bind(that));\n                pane.splitter.bind(RESIZING, ( { pane } ) => kendo.resize(pane));\n            },\n\n            _updatePaneSize: function(e) {\n                const that = this;\n                if (!e.leftPane && !e.rightPane) {\n                    return;\n                }\n\n                const leftPane = that._findPaneByUid(e.leftPane.uid),\n                rightPane = that._findPaneByUid(e.rightPane.uid);\n\n                leftPane.size = e.leftPane.size;\n                rightPane.size = e.rightPane.size;\n                that.trigger(RESIZE, { ev: e, leftPane: leftPane, rightPane: rightPane });\n            },\n\n            _createTabPane: function(parentElement, pane) {\n                const that = this;\n                const tabStripElement = $(\"<div class='k-header'/>\");\n                const tabContainer = $(\"<ul/>\");\n                const tabStripOptions = {\n                    animation: false,\n                };\n                const selectedPane = (pane.selected === undefined$1 || pane.panes.indexOf(pane.panes[pane.selected]) == -1 || pane.panes[pane.selected].unpinnable.unpinned) ? 0 : pane.selected;\n\n                if (!pane.panes.some(x=>x.visible)) {\n                    return;\n                }\n\n                tabStripElement.append(tabContainer);\n                parentElement.append(tabStripElement);\n                parentElement.attr(UID_ATTR, pane.uid);\n                parentElement.addClass(KPANE_TABBED);\n\n                pane.panes.forEach((childPane) => {\n                    const tab = $(tabTemplate(that._paneHeader(childPane))).attr(UID_ATTR, childPane.uid);\n                    const contentElement = $(\"<div/>\");\n\n                    if (childPane.unpinnable && childPane.unpinnable.unpinned) {\n                        that._createUnpinnedPane(childPane);\n                        return;\n                    }\n\n                    if (childPane.visible) {\n                        that._addActions(tab, childPane);\n                        tabContainer.append(tab);\n                        tabStripElement.append(contentElement);\n                        that._createPane(contentElement, childPane);\n                    }\n                });\n\n                $(tabContainer.children()[selectedPane]).addClass(KACTIVE);\n                tabStripElement.kendoTabStrip(tabStripOptions);\n            },\n\n            _createContentPane: function(parentElement, pane) {\n                const that = this;\n                const content = typeof pane.content === \"function\" ? kendo.template(pane.content)({}) : pane.content;\n                const element = $(contentPaneTemplate(extend({}, pane, { title: that._paneHeader(pane), content: content })));\n                const parentPane = that._findPaneByUid(pane.parentUid);\n                const isUnnpinned = pane.unpinnable && pane.unpinnable.unpinned;\n\n\n                if (parentPane && parentPane.type === TAB && !isUnnpinned) {\n                    parentElement.append(content);\n                    return;\n                }\n\n                parentElement.addClass(isUnnpinned ? KKUNPINNED_PANE : KKPINNED_PANE)\n                             .removeClass(KSTATIC_PANE)\n                             .attr(UID_ATTR, pane.uid);\n                that._addActions(element.find(`.${KPANE_ACTIONS}`), pane);\n                parentElement.append(element);\n            },\n\n            _createUnpinnedPane: function(pane) {\n                const that = this;\n                const paneElement = $(PANE).removeClass(KSTATIC_PANE);\n\n                if (that.unpinnedContainer.find(paneSelector(pane.uid)).length) {\n                    return;\n                }\n\n                that.unpinnedContainer.prepend(paneElement);\n                that._createContentPane(paneElement, pane);\n            },\n\n            _addActions: function(actionsContainer, pane) {\n                const that = this;\n\n                that.actions.forEach((action) => {\n                    if (action.shouldAdd(pane)) {\n                        actionsContainer.append($(kendo.html.renderButton({ fillMode: \"flat\", icon: action.icon, themeColor: 'base' })).attr(ACTION_ATTR, action.name));\n                    }\n                });\n\n            },\n\n            _createPane: function(parentElement, pane) {\n                const that = this;\n\n                if (pane.id) {\n                    parentElement.attr(\"id\", pane.id);\n                }\n\n                return that[\"_create\" + capitalizeFirstLetter(pane.type) + \"Pane\"](parentElement, pane);\n            },\n\n            _unpinnedPanes: function(panes) {\n                const that = this;\n                const options = that.options;\n                let result = [];\n\n                if (!panes) {\n                    panes = options.rootPane.panes;\n                }\n\n                panes.forEach((pane) => {\n                    if (pane.unpinnable && pane.unpinnable.unpinned) {\n                        result.push(pane);\n                    }\n\n                    if (pane.panes && pane.panes.length) {\n                        result = result.concat(that._unpinnedPanes(pane.panes));\n                    }\n                });\n\n                return result;\n            },\n\n            _paneHeader: function(pane) {\n                const that = this;\n                const parentPane = that._findPaneByUid(pane.parentUid);\n                const isTabbed = parentPane && parentPane.type === \"tab\";\n                let header = pane.header;\n\n                if (isTabbed && pane.tabHeader) {\n                    header = pane.tabHeader;\n                }\n\n                if (!header) {\n                    return pane.title || \"\";\n                }\n\n                return kendo.template(header)(pane);\n            },\n\n            _findPaneByUid: function(uid, parent) {\n                const that = this;\n                let found;\n\n                parent = parent || that.options.rootPane;\n\n                if (parent.uid === uid) {\n                    return parent;\n                }\n\n                parent.panes.forEach((pane) => {\n                    if (pane.uid === uid) {\n                        found = pane;\n                        return;\n                    }\n\n                    if (pane.panes && pane.panes.length) {\n                        const result = that._findPaneByUid(uid, pane);\n\n                        if (result) {\n                            found = result;\n                            return;\n                        }\n                    }\n                });\n                return found;\n            },\n\n            _getPaneById: function(pane, prop, value) {\n                const that = this;\n                let found;\n\n                if (pane[prop] == value) {\n                    return pane;\n                }\n\n                if (pane.panes) {\n                    pane.panes.forEach((childPane) => {\n                        let result = that._getPaneById(childPane, prop, value);\n                        if (result) {\n                            found = result;\n                        }\n                    });\n                }\n                return found;\n            },\n\n            _initNavigator: function(params) {\n                const that = this;\n\n                that.navigatorDraggable = new kendo.ui.Draggable(that.element, {\n                    autoScroll: true,\n                    filter: \".k-pane-header, .k-pane-tabbed .k-item\",\n                    hint: function(element) {\n                        const isTabbed = element.is(\"li\");\n                        const paneElement = element.closest(`.${KPANE}`);\n                        const pane = that._findPaneByUid((isTabbed ? element : paneElement).attr(UID_ATTR));\n                        const actionsHtml = isTabbed ? that._getActionButtons(element) : paneElement.find(`.${KPANE_ACTIONS}`).html();\n\n                        return hintTemplate({\n                            width: paneElement.width(),\n                            height: paneElement.height(),\n                            content: pane.content,\n                            title: that._paneHeader(pane),\n                            actions: actionsHtml,\n                        });\n                    },\n                    updateHint: function(hint, event) {\n                        const coordinates = {\n                            left: event.x.location + 1,\n                            top: event.y.location + 1,\n                        };\n\n                        const additionStyles = {\n                            zIndex: 100010,\n                        };\n\n                        hint.css($.extend({}, coordinates, additionStyles));\n\n                    },\n                    dragstart: that._dragStart.bind(that),\n                    dragend: that._dragEnd.bind(that),\n                    drag: that._drag.bind(that)\n                });\n            },\n\n            _dragStart: function(e) {\n                const that = this;\n                const target = $(e.currentTarget);\n                const pane = target.closest(`.${KPANE}`);\n\n                that.draggedPane = {\n                    width: pane.width(),\n                    height: pane.height(),\n                    pane,\n                    target\n                };\n\n                that._displayGlobalIndicators();\n\n                that.trigger(DRAGSTART, { pane: that.draggedPane.pane, draggableEvent: e });\n            },\n\n            _dragEnd: function(e) {\n                const that = this;\n                const hoveredIndicator = that.element.find(`.${KDOCK_INDICATOR}:hover`);\n                const eventData = { pane: that.draggedPane.pane, draggableEvent: e };\n\n                if (hoveredIndicator.length) {\n                    that.navigatorDraggable.hint.hide();\n                    that._updateLayout(hoveredIndicator);\n                }\n\n                that.element.find(`.${KDOCK_INDICATOR}`).remove();\n                that.element.find(`.${KDOCK_PREVIEW}`).remove();\n\n                if (!hoveredIndicator.length) {\n                    that._showHiddenPanes();\n                }\n                that.trigger(DRAGEND, eventData);\n                that.hoveredPane = null;\n                that.draggedPane = null;\n            },\n\n            _drag: function(e) {\n                const that = this;\n                const currentPane = $(e.elementUnderCursor).closest(`.${KPANE}[${UID_ATTR}]`);\n                const pane = that._findPaneByUid(currentPane.attr(UID_ATTR));\n                const navigator = $(NAVIGATOR_TEMPLATE);\n                const currentPaneUid = currentPane.attr(UID_ATTR);\n                const prevPaneUid = that.hoveredPane && that.hoveredPane.attr(UID_ATTR);\n                const eventData = { pane: that.draggedPane.pane, draggableEvent: e };\n                const dragTargetUid = e.currentTarget.closest(`.${KPANE}`).attr(UID_ATTR);\n\n                if (that.trigger(DRAG, eventData)) {\n                    e.preventDefault();\n                    return;\n                }\n\n                if (currentPaneUid === prevPaneUid) {\n                    return;\n                }\n\n                that.hoveredPane = currentPane;\n                that.element.find(`.${KDOCK_NAVIGATOR}`).remove();\n                navigator.css({\n                    position: \"absolute\",\n                    top: \"50%\",\n                    left: \"50%\",\n                    transform: \"translate(-50%,-50%)\",\n                    \"z-index\": 100008\n                });\n\n                if (pane && pane.dockable && !pane.dockable.innerDock) {\n                    navigator.css(\"display\", \"none\");\n                }\n                if (currentPaneUid !== dragTargetUid) {\n                    currentPane.append(navigator);\n                }\n            },\n\n            _showHiddenPanes: function() {\n                const that = this;\n                const isTabbed = that.draggedPane.pane.is(`.${KPANE_TABBED}`);\n\n                if (isTabbed) {\n                    return that._showTab();\n                }\n\n                that._showPane(that.draggedPane.pane);\n            },\n\n            _showTab: function(tab) {\n                if (tab === undefined$1) {\n                    return;\n                }\n\n                const that = this;\n                const tabstrip = tab.closest(`.${KTABSTRIP}`).data(\"kendoTabStrip\");\n\n                tab.show();\n                tabstrip.activateTab(tab);\n            },\n\n            _showPane: function(paneElement) {\n                const that = this;\n                const splitbar = paneElement.siblings(`.${KSPLITBAR}:hidden`);\n                paneElement.show();\n                splitbar.show();\n            },\n\n            _hideDraggedPane: function(draggedElement) {\n                const that = this;\n                const isTabbed = draggedElement.is(\"li\");\n\n                if (isTabbed) {\n                    return that._hideTab(draggedElement);\n                }\n\n                that._hidePane(draggedElement);\n            },\n\n            _hidePane: function(draggedElement) {\n                const that = this;\n                const paneElement = draggedElement.closest(`.${KPANE}`);\n                const prevElement = paneElement.prev();\n                const nextElement = paneElement.next();\n\n                paneElement.hide();\n\n                if (prevElement.is(`.${KSPLITBAR}`)) {\n                    return prevElement.hide();\n                }\n\n                nextElement.hide();\n            },\n\n            _hideTab: function(tab) {\n                const that = this;\n                const isActive = tab.is(`.${KACTIVE}`);\n                const tabstrip = tab.closest(`.${KTABSTRIP}`).data(\"kendoTabStrip\");\n\n                tab.hide();\n\n                if (isActive) {\n                    tabstrip.activateTab(\"li:visible:first\");\n                }\n            },\n\n            _getActionButtons: function(paneElement) {\n                const buttons = paneElement.find(\"button\");\n                const container = $(\"<div/>\");\n\n                buttons.each((_, button) => container.append($(button).clone()));\n\n                return container.html();\n            },\n\n            _displayGlobalIndicators: function() {\n                const that = this;\n\n                that.indicators.forEach((indicator) => {\n                    const element = $(INDICATOR_TEMPLATE);\n\n                    if (indicator.name === \"middle\") {\n                        return;\n                    }\n\n                    that.element.append(element);\n                    element.css({\n                        position: \"absolute\",\n                        \"z-index\": \"100002\",\n                        top: indicator.top,\n                        left: indicator.left,\n                        transform: `${indicator.transform} rotate(${indicator.rotate})`\n                    });\n                    element.attr(INDICATOR_ATTR, indicator.name);\n                });\n            },\n\n            _displayDockPreview: function(e) {\n                const that = this;\n                const indicator = $(e.currentTarget);\n                const isGlobalIndicator = !indicator.parent().is(`.${KDOCK_NAVIGATOR}`);\n                const indicatorName = indicator.attr(INDICATOR_ATTR);\n                const indicatorUid = indicator.attr(UID_ATTR);\n                const indicatorData = that.indicators.filter(i => i.name === indicatorName)[0];\n                const previewElement = $(`<div class=\"${KDOCK_PREVIEW}\"/>`);\n                const container = isGlobalIndicator ? that.panesContainer : that.hoveredPane;\n                const toolbarWidth = that._toolbar ? that._toolbar.outerWidth() : 0;\n                const containerWidth = container.outerWidth();\n                const containerHeight = container.outerHeight();\n                const existingPreview = indicatorUid && container.find(`.${KDOCK_PREVIEW}[${UID_ATTR}=\"${indicatorUid}\"]`);\n                const uid = kendo.guid();\n                let width = that.draggedPane.width;\n                let height = that.draggedPane.height;\n\n                if (existingPreview && existingPreview.length) {\n                    return existingPreview.show();\n                }\n\n                if (indicatorName === MIDDLE) {\n                    width = containerWidth;\n                    height = containerHeight;\n                }\n\n                if (indicatorName === TOP || indicatorName === BOTTOM) {\n                    if (height > containerHeight / 2) {\n                        height = containerHeight / 2;\n                    }\n\n                    width = containerWidth;\n                }\n\n                if (indicatorName === LEFT || indicatorName === RIGHT) {\n                    if (width > containerWidth / 2) {\n                        width = containerWidth / 2;\n                    }\n\n                    height = containerHeight;\n                }\n\n                const css = {\n                    position: \"absolute\",\n                    \"z-index\": 100000,\n                    top: indicatorData.previewTop(containerHeight, height),\n                    left: indicatorData.previewLeft(containerWidth, width) + (isGlobalIndicator ? toolbarWidth : 0),\n                    width: width,\n                    height\n                };\n\n                previewElement.css(css);\n                previewElement.attr(INDICATOR_ATTR, indicatorData.name)\n                              .attr(UID_ATTR, uid);\n                indicator.attr(UID_ATTR, uid);\n                container.append(previewElement);\n                that.draggedPane.preview = {\n                    width,\n                    height\n                };\n                that.draggedPane.container = {\n                    width: containerWidth,\n                    height: containerHeight\n                };\n            },\n\n            _hideDockPreview: function() {\n                const that = this;\n\n                that.element.find(`.${KDOCK_PREVIEW}`).hide();\n            },\n\n            _updateLayout: function(indicator) {\n                const that = this;\n                const isTabbed = that.draggedPane.target.is(\"li\");\n                const isGlobalIndicator = !indicator.parent().is(`.${KDOCK_NAVIGATOR}`);\n                const paneElement = isTabbed ? that.draggedPane.target : that.draggedPane.pane;\n                const hoveredPane = that._findPaneByUid(that.hoveredPane.attr(UID_ATTR));\n                const draggedPane = that._findPaneByUid(paneElement.attr(UID_ATTR));\n                const location = indicator.attr(INDICATOR_ATTR);\n                const draggedPaneParent = that._findPaneByUid(draggedPane.parentUid);\n                const draggedPaneIndex = draggedPaneParent.panes.indexOf(draggedPane);\n                const rootPaneElement = that.element.find(`[${UID_ATTR}=\"${that.options.rootPane.uid}\"]`);\n\n                draggedPaneParent.panes.splice(draggedPaneIndex, 1);\n                location == MIDDLE ? that._tabDock(hoveredPane, draggedPane) : that._splitDock(hoveredPane, draggedPane, location, isGlobalIndicator);\n                that._processPanes(that.options.rootPane);\n                that._adjustSiblingSizes(draggedPane, location, isGlobalIndicator);\n                that._refreshPane(rootPaneElement, that.options.rootPane);\n                location == MIDDLE ?\n                    that.trigger(INNER_DOCK, { pane: draggedPane, paneElement: paneElement }) :\n                    that.trigger(DOCK, { pane: draggedPane, paneElement: paneElement });\n            },\n\n            _splitDock: function(targetPane, pane, location, isGlobalDock) {\n                const that = this;\n                const targetPaneParent = isGlobalDock ? that.options.rootPane : that._findPaneByUid(targetPane.parentUid);\n                const targetPaneIndex = targetPaneParent.panes.indexOf(targetPane);\n                const action = location === TOP || location === LEFT ? UNSHIFT : PUSH;\n                const paneIndex = targetPaneIndex + (action === UNSHIFT ? 0 : 1);\n                const orientation = location === TOP || location === BOTTOM ? VERTICAL : HORIZONTAL;\n                const dimension = location === TOP || location === BOTTOM ? HEIGHT : WIDTH;\n                const newParentPane = {\n                    type: SPLIT,\n                    orientation,\n                    panes: [],\n                };\n                const previewSize = that.draggedPane.preview[dimension];\n                const size = `${previewSize}px`;\n\n                pane.size = size;\n\n                if (isGlobalDock) {\n                    newParentPane.panes.push(targetPaneParent);\n                    (location === TOP || location === LEFT) ? newParentPane.panes.unshift(pane) : newParentPane.panes.push(pane);\n                    that.options.rootPane = newParentPane;\n                    return;\n                }\n\n                if (((location === TOP || location === BOTTOM) && targetPaneParent.orientation === VERTICAL) ||\n                    ((location === LEFT || location === RIGHT) && targetPaneParent.orientation === HORIZONTAL)) {\n                    return targetPaneParent.panes.splice(paneIndex, 0, pane);\n                }\n\n                if (targetPane) {\n                    newParentPane.size = targetPane.size;\n                    targetPane.size = null;\n                }\n\n                targetPaneParent.panes.splice(targetPaneIndex, 1);\n                newParentPane.panes.push(targetPane);\n                newParentPane.panes[action](pane);\n                targetPaneParent.panes.splice(targetPaneIndex, 0, newParentPane);\n            },\n\n            _tabDock: function name(targetPane, pane) {\n                const that = this;\n                const targetPaneParent = that._findPaneByUid(targetPane.parentUid);\n                const targetPaneIndex = targetPaneParent.panes.indexOf(targetPane);\n                const newParentPane = {\n                    type: TAB,\n                    panes: [\n                        targetPane,\n                        pane\n                    ]\n                };\n\n                if (targetPane.type === TAB) {\n                    targetPane.panes.push(pane);\n                    return;\n                }\n\n                targetPaneParent.panes.splice(targetPaneIndex, 1);\n                targetPaneParent.panes.splice(targetPaneIndex, 0, newParentPane);\n\n            },\n\n            _adjustSiblingSizes: function(pane, location, isGlobalDock) {\n                const that = this;\n                const siblings = that._getSiblings(pane);\n                const dimension = location === TOP || location === BOTTOM ? HEIGHT : WIDTH;\n                const parentSize = that.draggedPane.container[dimension];\n                const draggedPaneSize = that.draggedPane[dimension];\n                const newParentSize = parentSize - draggedPaneSize;\n                const noSizePanes = [];\n                let freeSpace = newParentSize;\n\n                if (location === MIDDLE) {\n                    return;\n                }\n\n                if (siblings.length === 2) {\n                    siblings[0].size = null;\n                    return;\n                }\n\n                siblings.forEach((childPane) => {\n                    if (childPane.uid === pane.uid) {\n                        return;\n                    }\n\n                    if (!childPane.size) {\n                        noSizePanes.push(childPane);\n                        return;\n                    }\n\n                    childPane.size = that._calculateNewSize(parentSize, newParentSize, childPane.size);\n                    freeSpace -= childPane.size;\n                });\n\n                noSizePanes.forEach((noSizePane) => {\n                    const newSize = freeSpace / noSizePanes.length;\n\n                    noSizePane.size = newSize;\n                });\n\n            },\n\n            _calculateNewSize: function(parentSize, newParentSize, paneSize) {\n                const proportion = newParentSize / parentSize;\n                let unit = \"px\";\n                let noUnitSize;\n\n                if (isPercentageSize(paneSize)) {\n                    unit = \"%\";\n                }\n                if (typeof paneSize === \"string\") {\n                    noUnitSize = +paneSize.replace(unit, \"\");\n                }\n\n                return `${noUnitSize * proportion}${unit}`;\n            },\n\n            _getSiblings: function(pane) {\n                const that = this;\n                const parent = that._findPaneByUid(pane.parentUid);\n\n                return parent.panes.filter(p => p.visible !== false &&\n                                                p.uid !== pane.uid &&\n                                                (p.unpinnable && p.unpinnable.unpinned !== true));\n            }\n        });\n\n        ui.plugin(DockManager);\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    exports.__meta__ = __meta__;\n    exports.default = kendo$1;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}