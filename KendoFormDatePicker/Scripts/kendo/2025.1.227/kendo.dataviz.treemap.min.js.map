{"version":3,"sources":["raw-js/kendo.dataviz.treemap.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendo","_globals","DatavizTreemap","this","$","math","Math","isArray","Array","window","outerHeight","_outerHeight","outerWidth","_outerWidth","Class","Widget","ui","template","deepExtend","HierarchicalDataSource","data","getter","dataviz","NS","CHANGE","DATA_BOUND","ITEM_CREATED","MAX_VALUE","Number","MOUSEOVER_NS","MOUSELEAVE_NS","TreeMap","extend","init","element","options","destroy","empty","fn","call","wrapper","_initTheme","addClass","_setLayout","_originalOptions","_initDataSource","_attachEvents","notify","name","theme","autoBind","textField","valueField","colorField","events","themeOptions","themes","toLowerCase","treeMap","on","_mouseover","bind","_mouseleave","_resizeHandler","resize","onResize","type","_layout","SliceAndDice","_view","SliceAndDiceView","Squarified","SquarifiedView","that","dataSource","_dataChangeHandler","_onDataChange","create","fetch","setDataSource","unbind","e","item","i","node","items","length","root","_getByUid","uid","children","Query","_sortForGrouping","push","_wrapItem","htmlSize","compute","coord","_setColors","render","createRoot","_root","_colorIdx","load","trigger","colorRange","colors","color","min","max","minRGBtoDecimal","rgbToDecimal","maxRGBtoDecimal","isDarker","colorBrightness","rgbColor","r","colorByIndex","g","b","buildColorFromRGB","colorsByLength","leafNodes","defined","dataItem","hasChildren","_contentSize","view","renderHeight","wrap","value","getField","text","level","pop","concat","attr","getByUid","findByUid","find","target","hasClass","_removeActiveState","removeClass","off","unbindResize","getSize","dimensions","_resize","rootElement","width","height","css","_resizeItems","child","childElement","elements","titleSize","idx","filter","setItemSize","setOptions","_setEvents","top","left","leaf","tree","layoutChildren","parentArea","totalArea","itemsArea","parseFloat","area","minimumSideValue","layoutHorizontal","firstElement","tail","slice","squarify","initElement","computeDim","worstAspectRatio","newCoords","layoutRow","dim","layoutLast","w","layoutV","layoutH","orientation","layoutVertical","layoutChange","areaSum","maxArea","minArea","rootCoord","newRootCoord","round","_totalArea","ans","total","offset","_clean","_getText","title","_createTitle","append","_compile","_createWrap","innerWidth","rootWrap","htmlElement","_createLeaf","_createTile","toggleClass","_tileColorBrightness","toggle","html","tile","_itemCoordinates","coordinates","_renderTemplate","htmlEncode","titleTemplate","vertical","quotient","sliceAndDice","field","row","get","index","minColor","abs","maxColor","currentStep","decimalToRgb","colorLength","substring","colorToRGB","replace","rgbToHex","number","result","toString","toUpperCase","rgb","parseInt","brightness","sqrt","power","pow","plugin","jQuery","kendo$1","__meta__","id","category","description","depends","default","Object","defineProperty"],"mappings":"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","file":"kendo.dataviz.treemap.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('kendo.data.js'), require('kendo.userevents.js'), require('kendo.dataviz.themes.js')) :\n    typeof define === 'function' && define.amd ? define(['exports', 'kendo.data', 'kendo.userevents', 'kendo.dataviz.themes'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.kendo = global.kendo || {}, global.kendo._globals = global.kendo._globals || {}, global.kendo._globals.DatavizTreemap = {})));\n})(this, (function (exports) {\n    const __meta__ = {\n        id: \"dataviz.treeMap\",\n        name: \"TreeMap\",\n        category: \"dataviz\",\n        description: \"The Kendo DataViz TreeMap\",\n        depends: [ \"data\", \"userevents\", \"dataviz.themes\" ]\n    };\n\n    (function($, undefined$1) {\n        var math = Math,\n\n            isArray = Array.isArray,\n\n            kendo = window.kendo,\n            outerHeight = kendo._outerHeight,\n            outerWidth = kendo._outerWidth,\n            Class = kendo.Class,\n            Widget = kendo.ui.Widget,\n            template = kendo.template,\n            deepExtend = kendo.deepExtend,\n            HierarchicalDataSource = kendo.data.HierarchicalDataSource,\n            getter = kendo.getter,\n\n            dataviz = kendo.dataviz;\n\n        var NS = \".kendoTreeMap\",\n            CHANGE = \"change\",\n            DATA_BOUND = \"dataBound\",\n            ITEM_CREATED = \"itemCreated\",\n            MAX_VALUE = Number.MAX_VALUE,\n            MOUSEOVER_NS = \"mouseover\" + NS,\n            MOUSELEAVE_NS = \"mouseleave\" + NS,\n            UNDEFINED = \"undefined\";\n\n        var TreeMap = Widget.extend({\n            init: function(element, options) {\n                kendo.destroy(element);\n                $(element).empty();\n\n                Widget.fn.init.call(this, element, options);\n                this.wrapper = this.element;\n\n                this._initTheme(this.options);\n\n                this.element.addClass(\"k-widget k-treemap\");\n\n                this._setLayout();\n\n                this._originalOptions = deepExtend({}, this.options);\n\n                this._initDataSource();\n\n                this._attachEvents();\n\n                kendo.notify(this, dataviz.ui);\n            },\n\n            options: {\n                name: \"TreeMap\",\n                theme: \"sass\",\n                autoBind: true,\n                textField: \"text\",\n                valueField: \"value\",\n                colorField: \"color\"\n            },\n\n            events: [DATA_BOUND, ITEM_CREATED],\n\n            _initTheme: function(options) {\n                var that = this,\n                    themes = dataviz.ui.themes || {},\n                    themeName = ((options || {}).theme || \"\").toLowerCase(),\n                    themeOptions = (themes[themeName] || {}).treeMap;\n\n                that.options = deepExtend({}, themeOptions, options);\n            },\n\n            _attachEvents: function() {\n                this.element\n                    .on(MOUSEOVER_NS, this._mouseover.bind(this))\n                    .on(MOUSELEAVE_NS, this._mouseleave.bind(this));\n\n                this._resizeHandler = this.resize.bind(this, false);\n                kendo.onResize(this._resizeHandler);\n            },\n\n            _setLayout: function() {\n                if (this.options.type === \"horizontal\") {\n                    this._layout = new SliceAndDice(false);\n                    this._view = new SliceAndDiceView(this, this.options);\n                } else if (this.options.type === \"vertical\") {\n                    this._layout = new SliceAndDice(true);\n                    this._view = new SliceAndDiceView(this, this.options);\n                } else {\n                    this._layout = new Squarified();\n                    this._view = new SquarifiedView(this, this.options);\n                }\n            },\n\n            _initDataSource: function() {\n                var that = this,\n                    options = that.options,\n                    dataSource = options.dataSource;\n\n                that._dataChangeHandler = that._onDataChange.bind(that);\n\n                that.dataSource = HierarchicalDataSource\n                    .create(dataSource)\n                    .bind(CHANGE, that._dataChangeHandler);\n\n                if (dataSource) {\n                    if (that.options.autoBind) {\n                        that.dataSource.fetch();\n                    }\n                }\n            },\n\n            setDataSource: function(dataSource) {\n                var that = this;\n                that.dataSource.unbind(CHANGE, that._dataChangeHandler);\n                that.dataSource = dataSource\n                        .bind(CHANGE, that._dataChangeHandler);\n\n                if (dataSource) {\n                    if (that.options.autoBind) {\n                        that.dataSource.fetch();\n                    }\n                }\n            },\n\n            _onDataChange: function(e) {\n                var node = e.node;\n                var items = e.items;\n                var options = this.options;\n                var item, i;\n\n                if (!node) {\n                    this.element.empty();\n                    item = this._wrapItem(items[0]);\n                    this._layout.createRoot(\n                        item,\n                        outerWidth(this.element),\n                        outerHeight(this.element),\n                        this.options.type === \"vertical\"\n                    );\n                    this._view.createRoot(item);\n                    // Reference of the root\n                    this._root = item;\n                    this._colorIdx = 0;\n                } else {\n                    if (items.length) {\n                        var root = this._getByUid(node.uid);\n                        root.children = [];\n                        items = new kendo.data.Query(items)._sortForGrouping(options.valueField, \"desc\");\n\n                        for (i = 0; i < items.length; i++) {\n                            item = items[i];\n                            root.children.push(this._wrapItem(item));\n                        }\n\n                        var htmlSize = this._view.htmlSize(root);\n                        this._layout.compute(root.children, root.coord, htmlSize);\n\n                        this._setColors(root.children);\n                        this._view.render(root);\n                    }\n                }\n\n                for (i = 0; i < items.length; i++) {\n                    items[i].load();\n                }\n\n                if (node) {\n                    this.trigger(DATA_BOUND, {\n                        node: node\n                    });\n                }\n            },\n\n            _setColors: function(items) {\n                var colors = this.options.colors;\n                var colorIdx = this._colorIdx;\n                var color = colors[colorIdx % colors.length];\n                var colorRange, item;\n                if (isArray(color)) {\n                    colorRange = colorsByLength(color[0], color[1], items.length);\n                }\n\n                var leafNodes = false;\n                for (var i = 0; i < items.length; i++) {\n                    item = items[i];\n\n                    if (!defined(item.color)) {\n                        if (colorRange) {\n                            item.color = colorRange[i];\n                        } else {\n                            item.color = color;\n                        }\n                    }\n                    if (!item.dataItem.hasChildren) {\n                        leafNodes = true;\n                    }\n                }\n\n                if (leafNodes) {\n                    this._colorIdx++;\n                }\n            },\n\n            _contentSize: function(root) {\n                this.view.renderHeight(root);\n            },\n\n            _wrapItem: function(item) {\n                var wrap = {};\n\n                if (defined(this.options.valueField)) {\n                    wrap.value = getField(this.options.valueField, item);\n                }\n\n                if (defined(this.options.colorField)) {\n                    wrap.color = getField(this.options.colorField, item);\n                }\n\n                if (defined(this.options.textField)) {\n                    wrap.text = getField(this.options.textField, item);\n                }\n\n                wrap.level = item.level();\n\n                wrap.dataItem = item;\n\n                return wrap;\n            },\n\n            _getByUid: function(uid) {\n                var items = [this._root];\n                var item;\n\n                while (items.length) {\n                    item = items.pop();\n                    if (item.dataItem.uid === uid) {\n                        return item;\n                    }\n\n                    if (item.children) {\n                        items = items.concat(item.children);\n                    }\n                }\n            },\n\n            dataItem: function(node) {\n                var uid = $(node).attr(kendo.attr(\"uid\")),\n                    dataSource = this.dataSource;\n\n                return dataSource && dataSource.getByUid(uid);\n            },\n\n            findByUid: function(uid) {\n                return this.element.find(\".k-treemap-tile[\" + kendo.attr(\"uid\") + \"='\" + uid + \"']\");\n            },\n\n            _mouseover: function(e) {\n                var target = $(e.target);\n                if (target.hasClass(\"k-leaf\")) {\n                    this._removeActiveState();\n                    target\n                        .removeClass(\"k-hover\")\n                        .addClass(\"k-hover\");\n                }\n            },\n\n            _removeActiveState: function() {\n                this.element\n                    .find(\".k-hover\")\n                    .removeClass(\"k-hover\");\n            },\n\n            _mouseleave: function() {\n                this._removeActiveState();\n            },\n\n            destroy: function() {\n                Widget.fn.destroy.call(this);\n                this.element.off(NS);\n\n                if (this.dataSource) {\n                    this.dataSource.unbind(CHANGE, this._dataChangeHandler);\n                }\n\n                this._root = null;\n                kendo.unbindResize(this._resizeHandler);\n\n                kendo.destroy(this.element);\n            },\n\n            items: function() {\n                return $();\n            },\n\n            getSize: function() {\n                return kendo.dimensions(this.element);\n            },\n\n            _resize: function() {\n                var root = this._root;\n                if (root) {\n                    var element = this.element;\n                    var rootElement = element.children();\n                    root.coord.width = outerWidth(element);\n                    root.coord.height = outerHeight(element);\n\n                    rootElement.css({\n                        width: root.coord.width,\n                        height: root.coord.height\n                    });\n\n                    this._resizeItems(root, rootElement);\n                }\n            },\n\n            _resizeItems: function(root, element) {\n                if (root.children && root.children.length) {\n                    var elements = element.children(\".k-treemap-wrap\").children();\n                    var child, childElement;\n\n                    this._layout.compute(root.children, root.coord, { text: this._view.titleSize(root, element) });\n                    for (var idx = 0; idx < root.children.length; idx++) {\n                        child = root.children[idx];\n                        childElement = elements.filter(\"[\" + kendo.attr(\"uid\") + \"='\" + child.dataItem.uid + \"']\");\n                        this._view.setItemSize(child, childElement);\n                        this._resizeItems(child, childElement);\n                    }\n                }\n            },\n\n            setOptions: function(options) {\n                var dataSource = options.dataSource;\n\n                options.dataSource = undefined$1;\n                this._originalOptions = deepExtend(this._originalOptions, options);\n                this.options = deepExtend({}, this._originalOptions);\n                this._setLayout();\n                this._initTheme(this.options);\n\n                Widget.fn._setEvents.call(this, options);\n\n                if (dataSource) {\n                    this.setDataSource(HierarchicalDataSource.create(dataSource));\n                }\n\n                if (this.options.autoBind) {\n                    this.dataSource.fetch();\n                }\n            }\n        });\n\n        var Squarified = Class.extend({\n            createRoot: function(root, width, height) {\n                root.coord = {\n                    width: width,\n                    height: height,\n                    top: 0,\n                    left: 0\n                };\n            },\n\n            leaf: function(tree) {\n                return !tree.children;\n            },\n\n            layoutChildren: function(items, coord) {\n                var parentArea = coord.width * coord.height;\n                var totalArea = 0,\n                    itemsArea = [],\n                    i;\n\n                for (i = 0; i < items.length; i++) {\n                    itemsArea[i] = parseFloat(items[i].value);\n                    totalArea += itemsArea[i];\n                }\n\n                for (i = 0; i < itemsArea.length; i++) {\n                    items[i].area = parentArea * itemsArea[i] / totalArea;\n                }\n\n                var minimumSideValue = this.layoutHorizontal() ? coord.height : coord.width;\n\n                var firstElement = [items[0]];\n                var tail = items.slice(1);\n                this.squarify(tail, firstElement, minimumSideValue, coord);\n            },\n\n            squarify: function(tail, initElement, width, coord) {\n                this.computeDim(tail, initElement, width, coord);\n            },\n\n            computeDim: function(tail, initElement, width, coord) {\n                if (tail.length + initElement.length == 1) {\n                    var element = tail.length == 1 ? tail : initElement;\n                    this.layoutLast(element, width, coord);\n                    return;\n                }\n\n                if (tail.length >= 2 && initElement.length === 0) {\n                    initElement = [tail[0]];\n                    tail = tail.slice(1);\n                }\n\n                if (tail.length === 0) {\n                    if (initElement.length > 0) {\n                        this.layoutRow(initElement, width, coord);\n                    }\n                    return;\n                }\n\n                var firstElement = tail[0];\n\n                if (this.worstAspectRatio(initElement, width) >= this.worstAspectRatio([firstElement].concat(initElement), width)) {\n                    this.computeDim(tail.slice(1), initElement.concat([firstElement]), width, coord);\n                } else {\n                    var newCoords = this.layoutRow(initElement, width, coord);\n                    this.computeDim(tail, [], newCoords.dim, newCoords);\n                }\n            },\n\n            layoutLast: function(items, w, coord) {\n                items[0].coord = coord;\n            },\n\n            layoutRow: function(items, width, coord) {\n                if (this.layoutHorizontal()) {\n                    return this.layoutV(items, width, coord);\n                } else {\n                    return this.layoutH(items, width, coord);\n                }\n            },\n\n            orientation: \"h\",\n\n            layoutVertical: function() {\n                return this.orientation === \"v\";\n            },\n\n            layoutHorizontal: function() {\n                return this.orientation === \"h\";\n            },\n\n            layoutChange: function() {\n                this.orientation = this.layoutVertical() ? \"h\" : \"v\";\n            },\n\n            worstAspectRatio: function(items, width) {\n                if (!items || items.length === 0) {\n                    return MAX_VALUE;\n                }\n\n                var areaSum = 0,\n                    maxArea = 0,\n                    minArea = MAX_VALUE;\n\n                for (var i = 0; i < items.length; i++) {\n                    var area = items[i].area;\n                    areaSum += area;\n                    minArea = (minArea < area) ? minArea : area;\n                    maxArea = (maxArea > area) ? maxArea : area;\n                }\n\n                return math.max(\n                    (width * width * maxArea) / (areaSum * areaSum),\n                    (areaSum * areaSum) / (width * width * minArea)\n                );\n            },\n\n            compute: function(children, rootCoord, htmlSize) {\n                if (!(rootCoord.width >= rootCoord.height && this.layoutHorizontal())) {\n                    this.layoutChange();\n                }\n\n                if (children && children.length > 0) {\n                    var newRootCoord = {\n                        width: rootCoord.width,\n                        height: rootCoord.height - htmlSize.text,\n                        top: 0,\n                        left: 0\n                    };\n\n                    this.layoutChildren(children, newRootCoord);\n                }\n            },\n\n            layoutV: function(items, width, coord) {\n                var totalArea = this._totalArea(items),\n                    top = 0;\n\n                width = round(totalArea / width);\n\n                for (var i = 0; i < items.length; i++) {\n                    var height = round(items[i].area / width);\n                    items[i].coord = {\n                        height: height,\n                        width: width,\n                        top: coord.top + top,\n                        left: coord.left\n                    };\n\n                    top += height;\n                }\n\n                var ans = {\n                    height: coord.height,\n                    width: coord.width - width,\n                    top: coord.top,\n                    left: coord.left + width\n                };\n\n                ans.dim = math.min(ans.width, ans.height);\n\n                if (ans.dim != ans.height) {\n                    this.layoutChange();\n                }\n\n                return ans;\n            },\n\n            layoutH: function(items, width, coord) {\n                var totalArea = this._totalArea(items);\n\n                var height = round(totalArea / width),\n                    top = coord.top,\n                    left = 0;\n\n                for (var i = 0; i < items.length; i++) {\n                    items[i].coord = {\n                        height: height,\n                        width: round(items[i].area / height),\n                        top: top,\n                        left: coord.left + left\n                    };\n                    left += items[i].coord.width;\n                }\n\n                var ans = {\n                    height: coord.height - height,\n                    width: coord.width,\n                    top: coord.top + height,\n                    left: coord.left\n                };\n\n                ans.dim = math.min(ans.width, ans.height);\n\n                if (ans.dim != ans.width) {\n                    this.layoutChange();\n                }\n\n                return ans;\n            },\n\n            _totalArea: function(items) {\n                var total = 0;\n\n                for (var i = 0; i < items.length; i++) {\n                    total += items[i].area;\n                }\n\n                return total;\n            }\n        });\n\n        var SquarifiedView = Class.extend({\n            init: function(treeMap, options) {\n                this.options = deepExtend({}, this.options, options);\n                this.treeMap = treeMap;\n                this.element = $(treeMap.element);\n\n                this.offset = 0;\n            },\n\n            titleSize: function(item, element) {\n                var text = element.children(\".k-treemap-title\");\n                return text.height() || 0;\n            },\n\n            htmlSize: function(root) {\n                var rootElement = this._getByUid(root.dataItem.uid);\n                var htmlSize = {\n                    text: 0\n                };\n\n                if (root.children) {\n                    this._clean(rootElement);\n\n                    var text = this._getText(root);\n                    if (text) {\n                        var title = this._createTitle(root);\n                        rootElement.append(title);\n\n                        this._compile(title, root.dataItem);\n\n                        htmlSize.text = title.height();\n                    }\n\n                    rootElement.append(this._createWrap());\n\n                    this.offset = (outerWidth(rootElement) - rootElement.innerWidth()) / 2;\n                }\n\n                return htmlSize;\n            },\n\n            _compile: function(element, dataItem) {\n            },\n\n            _getByUid: function(uid) {\n                return this.element.find(\".k-treemap-tile[\" + kendo.attr(\"uid\") + \"='\" + uid + \"']\");\n            },\n\n            render: function(root) {\n                var rootElement = this._getByUid(root.dataItem.uid);\n                var children = root.children;\n                if (children) {\n                    var rootWrap = rootElement.find(\".k-treemap-wrap\");\n\n                    for (var i = 0; i < children.length; i++) {\n                        var leaf = children[i];\n                        var htmlElement = this._createLeaf(leaf);\n                        rootWrap.append(htmlElement);\n\n                        this._compile(htmlElement.children(), leaf.dataItem);\n\n                        this.treeMap.trigger(ITEM_CREATED, {\n                            element: htmlElement\n                        });\n                    }\n                }\n            },\n\n            createRoot: function(root) {\n                var htmlElement = this._createLeaf(root);\n                this.element.append(htmlElement);\n                this._compile(htmlElement.children(), root.dataItem);\n\n                this.treeMap.trigger(ITEM_CREATED, {\n                    element: htmlElement\n                });\n            },\n\n            _clean: function(root) {\n                root.css(\"background-color\", \"\");\n                root.removeClass(\"k-leaf\");\n                root.removeClass(\"k-inverse\");\n                root.empty();\n            },\n\n            _createLeaf: function(item) {\n                return this._createTile(item)\n                        .css(\"background-color\", item.color)\n                        .addClass(\"k-leaf\")\n                        .toggleClass(\n                            \"k-inverse\",\n                            this._tileColorBrightness(item) > 180\n                        )\n                        .toggle(item.value !== 0)\n                        .append($(\"<div></div>\")\n                        .html(this._getText(item)));\n            },\n\n            _createTile: function(item) {\n                var tile = $(\"<div class='k-treemap-tile'></div>\");\n                this.setItemSize(item, tile);\n\n                if (defined(item.dataItem) && defined(item.dataItem.uid)) {\n                    tile.attr(kendo.attr(\"uid\"), item.dataItem.uid);\n                }\n\n                return tile;\n            },\n\n            _itemCoordinates: function(item) {\n                var coordinates = {\n                    width: item.coord.width,\n                    height: item.coord.height,\n                    left: item.coord.left,\n                    top: item.coord.top\n                };\n\n                if (coordinates.left && this.offset) {\n                    coordinates.width += this.offset * 2;\n                } else {\n                    coordinates.width += this.offset;\n                }\n\n                if (coordinates.top) {\n                    coordinates.height += this.offset * 2;\n                } else {\n                    coordinates.height += this.offset;\n                }\n\n                return coordinates;\n            },\n\n            setItemSize: function(item, element) {\n                var coordinates = this._itemCoordinates(item);\n                element.css({\n                    width: coordinates.width,\n                    height: coordinates.height,\n                    left: coordinates.left,\n                    top: coordinates.top\n                });\n            },\n\n            _getText: function(item) {\n                if (this.options.template) {\n                    return this._renderTemplate(item);\n                }\n\n                return kendo.htmlEncode(item.text);\n            },\n\n            _renderTemplate: function(item) {\n                var titleTemplate = template(this.options.template);\n                return titleTemplate({\n                    dataItem: item.dataItem,\n                    text: item.text\n                });\n            },\n\n            _createTitle: function(item) {\n                return $(\"<div class='k-treemap-title'></div>\")\n                        .append($(\"<div></div>\").html(this._getText(item)));\n            },\n\n            _createWrap: function() {\n                return $(\"<div class='k-treemap-wrap'></div>\");\n            },\n\n            _tileColorBrightness: function(item) {\n                return colorBrightness(item.color);\n            }\n        });\n\n        var SliceAndDice = Class.extend({\n            createRoot: function(root, width, height, vertical) {\n                root.coord = {\n                    width: width,\n                    height: height,\n                    top: 0,\n                    left: 0\n                };\n                root.vertical = vertical;\n            },\n\n            init: function(vertical) {\n                this.vertical = vertical;\n                this.quotient = vertical ? 1 : 0;\n            },\n\n            compute: function(children, rootCoord, htmlSize) {\n\n                if (children.length > 0) {\n                    var width = rootCoord.width;\n                    var height = rootCoord.height;\n\n                    if (this.vertical) {\n                        height -= htmlSize.text;\n                    } else {\n                        width -= htmlSize.text;\n                    }\n\n                    var newRootCoord = {\n                        width: width,\n                        height: height,\n                        top: 0,\n                        left: 0\n                    };\n\n                    this.layoutChildren(children, newRootCoord);\n                }\n            },\n\n            layoutChildren: function(items, coord) {\n                var parentArea = coord.width * coord.height;\n                var totalArea = 0;\n                var itemsArea = [];\n                var i;\n\n                for (i = 0; i < items.length; i++) {\n                    var item = items[i];\n                    itemsArea[i] = parseFloat(items[i].value);\n                    totalArea += itemsArea[i];\n                    item.vertical = this.vertical;\n                }\n\n                for (i = 0; i < itemsArea.length; i++) {\n                    items[i].area = parentArea * itemsArea[i] / totalArea;\n                }\n\n                this.sliceAndDice(items, coord);\n            },\n\n            sliceAndDice: function(items, coord) {\n                var totalArea = this._totalArea(items);\n                if (items[0].level % 2 === this.quotient) {\n                    this.layoutHorizontal(items, coord, totalArea);\n                } else {\n                    this.layoutVertical(items, coord, totalArea);\n                }\n            },\n\n            layoutHorizontal: function(items, coord, totalArea) {\n                var left = 0;\n\n                for (var i = 0; i < items.length; i++) {\n                    var item = items[i];\n                    var width = item.area / (totalArea / coord.width);\n                    item.coord = {\n                        height: coord.height,\n                        width: width,\n                        top: coord.top,\n                        left: coord.left + left\n                    };\n\n                    left += width;\n                }\n            },\n\n            layoutVertical: function(items, coord, totalArea) {\n                var top = 0;\n\n                for (var i = 0; i < items.length; i++) {\n                    var item = items[i];\n                    var height = item.area / (totalArea / coord.height);\n                    item.coord = {\n                        height: height,\n                        width: coord.width,\n                        top: coord.top + top,\n                        left: coord.left\n                    };\n\n                    top += height;\n                }\n            },\n\n            _totalArea: function(items) {\n                var total = 0;\n\n                for (var i = 0; i < items.length; i++) {\n                    total += items[i].area;\n                }\n\n                return total;\n            }\n        });\n\n        var SliceAndDiceView = SquarifiedView.extend({\n            htmlSize: function(root) {\n                var rootElement = this._getByUid(root.dataItem.uid);\n                var htmlSize = {\n                    text: 0,\n                    offset: 0\n                };\n\n                if (root.children) {\n                    this._clean(rootElement);\n\n                    var text = this._getText(root);\n                    if (text) {\n                        var title = this._createTitle(root);\n                        rootElement.append(title);\n                        this._compile(title, root.dataItem);\n\n                        if (root.vertical) {\n                            htmlSize.text = title.height();\n                        } else {\n                            htmlSize.text = title.width();\n                        }\n                    }\n\n                    rootElement.append(this._createWrap());\n\n                    this.offset = (outerWidth(rootElement) - rootElement.innerWidth()) / 2;\n                }\n\n                return htmlSize;\n            },\n\n            titleSize: function(item, element) {\n                var size;\n                if (item.vertical) {\n                   size = element.children(\".k-treemap-title\").height();\n                } else {\n                   size = element.children(\".k-treemap-title-vertical\").width();\n                }\n                return size || 0;\n            },\n\n            _createTitle: function(item) {\n                var title;\n                if (item.vertical) {\n                    title = $(\"<div class='k-treemap-title'></div>\");\n                } else {\n                    title = $(\"<div class='k-treemap-title-vertical'></div>\");\n                }\n\n                return title.append($(\"<div></div>\").html(this._getText(item)));\n            }\n        });\n\n        function getField(field, row) {\n            if (row === null) {\n                return row;\n            }\n\n            var get = getter(field, true);\n            return get(row);\n        }\n\n        function defined(value) {\n            return typeof value !== UNDEFINED;\n        }\n\n        function colorsByLength(min, max, length) {\n            var minRGBtoDecimal = rgbToDecimal(min);\n            var maxRGBtoDecimal = rgbToDecimal(max);\n            var isDarker = colorBrightness(min) - colorBrightness(max) < 0;\n            var colors = [];\n\n            colors.push(min);\n\n            for (var i = 0; i < length; i++) {\n                var rgbColor = {\n                    r: colorByIndex(minRGBtoDecimal.r, maxRGBtoDecimal.r, i, length, isDarker),\n                    g: colorByIndex(minRGBtoDecimal.g, maxRGBtoDecimal.g, i, length, isDarker),\n                    b: colorByIndex(minRGBtoDecimal.b, maxRGBtoDecimal.b, i, length, isDarker)\n                };\n                colors.push(buildColorFromRGB(rgbColor));\n            }\n\n            colors.push(max);\n\n            return colors;\n        }\n\n        function colorByIndex(min, max, index, length, isDarker) {\n            var minColor = math.min(math.abs(min), math.abs(max));\n            var maxColor = math.max(math.abs(min), math.abs(max));\n            var step = (maxColor - minColor) / (length + 1);\n            var currentStep = step * (index + 1);\n            var color;\n\n            if (isDarker) {\n                color = minColor + currentStep;\n            } else {\n                color = maxColor - currentStep;\n            }\n\n            return color;\n        }\n\n        function buildColorFromRGB(color) {\n            return \"#\" + decimalToRgb(color.r) + decimalToRgb(color.g) + decimalToRgb(color.b);\n        }\n\n        function rgbToDecimal(color) {\n            color = color.replace(\"#\", \"\");\n            var rgbColor = colorToRGB(color);\n\n            return {\n                r: rgbToHex(rgbColor.r),\n                g: rgbToHex(rgbColor.g),\n                b: rgbToHex(rgbColor.b)\n            };\n        }\n\n        function decimalToRgb(number) {\n            var result = math.round(number).toString(16).toUpperCase();\n\n            if (result.length === 1) {\n                result = \"0\" + result;\n            }\n\n            return result;\n        }\n\n        function colorToRGB(color) {\n            var colorLength = color.length;\n            var rgbColor = {};\n            if (colorLength === 3) {\n                rgbColor.r = color[0];\n                rgbColor.g = color[1];\n                rgbColor.b = color[2];\n            } else {\n                rgbColor.r = color.substring(0, 2);\n                rgbColor.g = color.substring(2, 4);\n                rgbColor.b = color.substring(4, 6);\n            }\n\n            return rgbColor;\n        }\n\n        function rgbToHex(rgb) {\n            return parseInt(rgb.toString(16), 16);\n        }\n\n        function colorBrightness(color) {\n            var brightness = 0;\n            if (color) {\n                color = rgbToDecimal(color);\n                brightness = math.sqrt(0.241 * color.r * color.r + 0.691 * color.g * color.g + 0.068 * color.b * color.b);\n            }\n\n            return brightness;\n        }\n\n        function round(value) {\n            var power = math.pow(10, 4);\n            return math.round(value * power) / power;\n        }\n\n        dataviz.ui.plugin(TreeMap);\n\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    exports.__meta__ = __meta__;\n    exports.default = kendo$1;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}