{"version":3,"sources":["raw-js/kendo.avatar.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendo","_globals","Avatar","this","$","window","Widget","ui","ICON_SELECTOR","AVATAR_STYLES","AVATAR_TYPE","extend","init","element","options","fn","call","_fromMarkup","_wrapper","_markupContent","length","_contentFromMarkup","_content","name","alt","border","className","fillMode","icon","image","rounded","size","style","text","themeColor","type","events","setOptions","currentOptions","wrapper","updatedOptions","_optionsFromWrapper","removeClass","empty","content","span","find","html","renderIcon","attr","append","first","children","slice","remove","trim","split","forEach","indexOf","substring","replace","addClass","_applyCssClasses","css","prepend","cssProperties","registerPrefix","registerValues","prop","values","roundedValues","concat","plugin","jQuery","kendo$1","__meta__","id","category","description","depends","default","Object","defineProperty","value"],"mappings":"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","file":"kendo.avatar.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('kendo.core.js'), require('kendo.icons.js')) :\n    typeof define === 'function' && define.amd ? define(['exports', 'kendo.core', 'kendo.icons'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.kendo = global.kendo || {}, global.kendo._globals = global.kendo._globals || {}, global.kendo._globals.Avatar = {})));\n})(this, (function (exports) {\n    const __meta__ = {\n        id: \"avatar\",\n        name: \"Avatar\",\n        category: \"web\",\n        description: \"The Avatar component represents an icon, text, or image rendered in a styled container.\",\n        depends: [ \"core\" ]\n    };\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            Widget = kendo.ui.Widget,\n            DASH = \"-\",\n            ICON_SELECTOR = \".k-icon,.k-svg-icon\";\n\n        var AVATAR_STYLES = {\n            widget: \"k-widget\",\n            avatar: \"k-avatar\",\n            bordered: \"k-avatar-bordered\"\n        };\n\n        var AVATAR_TYPE = {\n            icon: \"icon\",\n            image: \"image\",\n            text: \"text\"\n        };\n\n        var Avatar = Widget.extend({\n            init: function(element, options) {\n                var that = this;\n\n                options = options || {};\n\n                Widget.fn.init.call(that, element, options);\n\n                this._fromMarkup();\n                this._wrapper();\n\n                if (this._markupContent && this._markupContent.length > 0) {\n                    this._contentFromMarkup();\n                } else {\n                    this._content();\n                }\n            },\n\n            options: {\n                name: \"Avatar\",\n                alt: null,\n                border: false,\n                className: null,\n                fillMode: \"solid\",\n                icon: null,\n                image: null,\n                rounded: \"full\",\n                size: \"medium\",\n                style: null,\n                text: null,\n                themeColor: \"primary\",\n                type: AVATAR_TYPE.text\n            },\n\n            events: [ ],\n\n            setOptions: function(options) {\n                var currentOptions = this.options,\n                    wrapper = this.wrapper,\n                    updatedOptions = $.extend({}, currentOptions, options);\n\n                Widget.fn.setOptions.call(this, options);\n\n                if (!updatedOptions[updatedOptions.type]) {\n                    currentOptions = this._optionsFromWrapper(currentOptions);\n                }\n                if (updatedOptions.border === false) {\n                    wrapper.removeClass(AVATAR_STYLES.bordered);\n                }\n\n                wrapper.empty();\n\n                this.options = currentOptions;\n                this._wrapper();\n                this._content();\n            },\n\n            _content: function() {\n                var span = this.wrapper.find(\"> span\"),\n                    options = this.options,\n                    type = options.type,\n                    content;\n\n                if (type === AVATAR_TYPE.icon) {\n                    content = $(kendo.html.renderIcon({ icon: options.icon }));\n                } else if (type === AVATAR_TYPE.image) {\n                    content = $(\"<img src='\" + options.image + \"'>\");\n\n                    if (options.alt) {\n                        content.attr(\"alt\", options.alt);\n                    }\n                } else if (type === AVATAR_TYPE.text) {\n                    content = $(\"<span>\" + options.text + \"</span>\");\n                }\n\n                span.append(content);\n            },\n\n            _contentFromMarkup: function() {\n                var span = this.wrapper.find(\"> span\").first();\n\n                span.append(this._markupContent);\n            },\n\n            _fromMarkup: function() {\n                var element = this.element,\n                    options = this.options,\n                    image, icon;\n\n                element.children().slice(1).remove();\n\n                image = element.children(\"img\");\n                icon = element.children(ICON_SELECTOR);\n\n                if (image.length > 0 ) {\n                    options.type = AVATAR_TYPE.image;\n                    this._markupContent = image.first();\n                } else if (icon.length > 0) {\n                    options.type = AVATAR_TYPE.icon;\n                    this._markupContent = icon.first();\n                } else if (element.children().length > 0) {\n                    options.type = AVATAR_TYPE.text;\n                    this._markupContent = element.children();\n                }\n            },\n\n            _optionsFromWrapper: function(updatedOptions) {\n                var wrapper = this.wrapper,\n                    classes, image;\n\n                if (updatedOptions.type === AVATAR_TYPE.text) {\n                    updatedOptions.text = wrapper.text().trim();\n                } else if (updatedOptions.type === AVATAR_TYPE.icon) {\n                    classes = wrapper.find(ICON_SELECTOR).attr(\"class\").split(/\\s+/);\n\n                    classes.forEach(function(name) {\n                        if (name.indexOf(\"k-i-\") === 0) {\n                            updatedOptions.icon = name.substring(4);\n                        } else if (name.indexOf(\"k-svg-i-\") === 0) {\n                            updatedOptions.icon = name.replace(/^k-svg-i-/,\"\");\n                        }\n                    });\n                } else if (updatedOptions.type === AVATAR_TYPE.image) {\n                    image = wrapper.find(\"img\");\n                    updatedOptions.image = image.attr(\"src\");\n\n                    if (image.attr(\"alt\")) {\n                        updatedOptions.alt = image.attr(\"alt\");\n                    }\n                }\n\n                return updatedOptions;\n            },\n\n            _wrapper: function() {\n                var wrapper = this.element,\n                    options = this.options,\n                    span = $(\"<span>\");\n\n                this.wrapper = wrapper;\n                wrapper.addClass(AVATAR_STYLES.avatar);\n\n                this._applyCssClasses();\n\n                if (options.border) {\n                    wrapper.addClass(AVATAR_STYLES.bordered);\n                }\n                if (options.style) {\n                    wrapper.css(options.style);\n                }\n                if (options.className) {\n                    wrapper.addClass(options.className);\n                }\n\n                span.addClass(AVATAR_STYLES.avatar + DASH + options.type);\n                wrapper.prepend(span);\n            }\n        });\n\n        kendo.cssProperties.registerPrefix(\"Avatar\", \"k-avatar-\");\n\n        kendo.cssProperties.registerValues(\"Avatar\", [{\n            prop: \"rounded\",\n            values: kendo.cssProperties.roundedValues.concat([['full', 'full']])\n        }]);\n\n        kendo.ui.plugin(Avatar);\n\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    exports.__meta__ = __meta__;\n    exports.default = kendo$1;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}