{"version":3,"sources":["raw-js/kendo.date-math.cmn.chunk.js"],"names":["global","factory","exports","module","define","amd","globalThis","self","kendo","_globals","DateMathCmnChunk","this","Direction","cloneDate","date","Date","getTime","adjustDST","hour","newDate","getHours","setHours","addDays","offset","setDate","getDate","createDate","year","month","day","hours","minutes","seconds","milliseconds","setFullYear","getFullYear","lastDayOfMonth","getMonth","getMinutes","getSeconds","getMilliseconds","addMonths","expectedMonth","setMonth","normalize","Day","dayOfWeek","weekDay","direction","Forward","newDay","getDay","isEqual","candidate","expected","timezones","rules","titles","zones","MONTHS","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","DAYS","Sun","Mon","Tue","Wed","Thu","Fri","Sat","ruleToDate","rule","zoneOffset","on","time","ruleOffset","isNaN","indexOf","UTC","targetDay","substr","ourDay","getUTCDay","setUTCDate","getUTCDate","CURRENT_UTC_TIME","findRule","zoneRule","utcTime","split","length","Number","getUTCFullYear","filter","currentRule","from","to","push","sort","a","b","NO_TZ_INFO","formatRegExp","formatMessage","message","values","_i","arguments","flattenValues","reduce","concat","replace","_","index","parseInt","findZone","timezone","zoneRules","Error","result","getZoneRules","idx","until","zone","zoneAndRule","padNumber","num","len","Array","Math","abs","join","slice","getTimezoneOffset","_a","parseFloat","addMinutes","addHours","dayAbbr","monthAbbr","isZoneMissingHour","currentOffset","prevHour","shiftZoneMissingHour","utcDate","dstOffset","convertTimezoneUTC","utcLocal","fromTimezone","toTimezone","fromOffset","toOffset","baseDiff","midDate","midOffset","ZonedDate","_utcDate","tzOffset","timezoneOffset","localDate","_localDate","Object","defineProperty","prototype","get","enumerable","configurable","fromLocalDate","shiftZone","fixedOffset","adjDate","fromUTCDate","toLocalDate","toUTCDate","clone","days","addTime","utcMid","setTime","utcResult","stripTime","ticks","getUTCMonth","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","setMilliseconds","ms","setUTCMilliseconds","setSeconds","sec","setUTCSeconds","setMinutes","min","setUTCMinutes","setUTCHours","setUTCMonth","setUTCFullYear","toISOString","toJSON","toString","dateString","timeString","toTimeString","toDateString","sign","value","floor","formatOffset","abbrev","base","trunc","hoursPart","signPart","minutesPart","abbrTimezone","toLocaleString","locales","options","toLocaleDateString","toLocaleTimeString","toUTCString","Symbol","toPrimitive","hint","valueOf","getVarDate","format","formatUTC","__meta__","id","name","category","description","depends","hidden","chunk","c","d","e","f","g","i","l"],"mappings":"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","file":"kendo.date-math.cmn.chunk.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n    typeof define === 'function' && define.amd ? define(['exports'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.kendo = global.kendo || {}, global.kendo._globals = global.kendo._globals || {}, global.kendo._globals.DateMathCmnChunk = {})));\n})(this, (function (exports) {\n    const __meta__ = {\n        id: \"date-math.cmn.chunk\",\n        name: \"DateMathCmnChunk\",\n        category: \"web\",\n        description: \"A reusable outputed chunk of code\",\n        depends: [],\n        hidden: true,\n        chunk: true\n    };\n\n    /**\n     * A function that clones the passed date. The parameter could be `null`.\n     *\n     * @param date - The initial date value.\n     * @returns - A new `Date` instance.\n     *\n     * @example\n     * ```ts-no-run\n     * cloneDate(new Date(2016, 0, 1)); // returns new Date(2016, 0, 1);\n     * cloneDate(null); // returns null\n     * ```\n     */\n    var cloneDate = function (date) { return date ? new Date(date.getTime()) : null; };\n\n    /**\n     * @hidden\n     */\n    var adjustDST = function (date, hour) {\n        var newDate = cloneDate(date);\n        if (hour === 0 && newDate.getHours() === 23) {\n            newDate.setHours(newDate.getHours() + 2);\n        }\n        return newDate;\n    };\n\n    /**\n     * A function that adds and subtracts days from a `Date` object.\n     *\n     * @param date - The initial date value.\n     * @param offset - The number of days to add and subtract from the date.\n     * @returns - A new `Date` instance.\n     *\n     * @example\n     * ```ts-no-run\n     * addDays(new Date(2016, 0, 1), 5); // 2016-1-6\n     * addDays(new Date(2016, 0, 1), -5); // 2015-12-26\n     * ```\n     */\n    var addDays = function (date, offset) {\n        var newDate = cloneDate(date);\n        newDate.setDate(newDate.getDate() + offset);\n        return adjustDST(newDate, date.getHours());\n    };\n\n    /**\n     * A function which returns a new `Date` instance.\n     *\n     * @param year - The year value.\n     * @param month - The month value.\n     * @param day - The day value.\n     * @param hours - The hours value.\n     * @param minutes - The minutes value.\n     * @param seconds - The seconds value.\n     * @param milliseconds - milliseconds value.\n     * @returns The date instance.\n     *\n     * @example\n     * ```ts-no-run\n     * createDate(2016, 0, 15); // 2016-01-15 00:00:00\n     * createDate(2016, 0, 15, 22, 22, 20); // 2016-01-15 22:22:20\n     * ```\n     */\n    var createDate = function (year, month, day, hours, minutes, seconds, milliseconds) {\n        if (hours === void 0) { hours = 0; }\n        if (minutes === void 0) { minutes = 0; }\n        if (seconds === void 0) { seconds = 0; }\n        if (milliseconds === void 0) { milliseconds = 0; }\n        var date = new Date(year, month, day, hours, minutes, seconds, milliseconds);\n        if (year > -1 && year < 100) {\n            date.setFullYear(date.getFullYear() - 1900);\n        }\n        return adjustDST(date, hours);\n    };\n\n    /**\n     * A function which returns the last date of the month.\n     *\n     * @param date - The initial date.\n     * @returns - The last date of the initial date month.\n     *\n     * @example\n     * ```ts-no-run\n     * lastDayOfMonth(new Date(2016, 0, 15)); // 2016-01-31\n     * ```\n     */\n    var lastDayOfMonth = function (date) {\n        var newDate = createDate(date.getFullYear(), date.getMonth() + 1, 1, date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n        return addDays(newDate, -1);\n    };\n\n    var MONTHS_LENGTH = 12;\n    var normalize = function (date, expectedMonth) { return (date.getMonth() !== expectedMonth ? lastDayOfMonth(addMonths(date, -1)) : date //tslint:disable-line:no-use-before-declare\n    ); };\n    /**\n     * A function that adds and subtracts months from a `Date` object.\n     *\n     * @param date - The initial date value.\n     * @param offset - The number of months to add or subtract from the date.\n     * @returns - A new `Date` instance.\n     *\n     * @example\n     * ```ts-no-run\n     * addMonths(new Date(2016, 5, 1), 5); // 2016-11-1\n     * addMonths(new Date(2016, 5, 1), -5); // 2015-1-1\n     * ```\n     */\n    var addMonths = function (date, offset) {\n        var newDate = cloneDate(date);\n        var diff = (newDate.getMonth() + offset) % MONTHS_LENGTH;\n        var expectedMonth = (MONTHS_LENGTH + diff) % MONTHS_LENGTH;\n        newDate.setMonth(newDate.getMonth() + offset);\n        return normalize(adjustDST(newDate, date.getHours()), expectedMonth);\n    };\n\n    /**\n     * @hidden\n     */\n    var setYear = function (value, year) {\n        var month = value.getMonth();\n        var candidate = createDate(year, month, value.getDate(), value.getHours(), value.getMinutes(), value.getSeconds(), value.getMilliseconds());\n        return candidate.getMonth() === month ? candidate : lastDayOfMonth(addMonths(candidate, -1));\n    };\n\n    /**\n     * A function that adds and subtracts years from a `Date` object.\n     *\n     * @param date - The initial date value.\n     * @param offset - The number of years to add or subtract from the date.\n     * @returns - A new `Date` instance.\n     *\n     * @example\n     * ```ts-no-run\n     * addYears(new Date(2016, 5, 1), 5); // 2011-6-1\n     * addYears(new Date(2016, 5, 1), -5); // 2021-6-1\n     * ```\n     */\n    var addYears = function (value, offset) {\n        return adjustDST(setYear(value, value.getFullYear() + offset), value.getHours());\n    };\n\n    /**\n     * A function that adds and subtracts centuries from a `Date` object.\n     *\n     * @param date - The initial date value.\n     * @param offset - The number of centuries to add or subtract from the date.\n     * @returns - A new `Date` instance.\n     *\n     * @example\n     * ```ts-no-run\n     * addCenturies(new Date(2016, 5, 1), 5); // 2516-6-1\n     * addCenturies(new Date(2016, 5, 1), -5); // 1516-6-1\n     * ```\n     */\n    var addCenturies = function (value, offset) {\n        return addYears(value, 100 * offset);\n    };\n\n    /**\n     * A function that adds and subtracts decades from a `Date` object.\n     *\n     * @param date - The initial date value.\n     * @param offset - The number of decades to add or subtract from the date.\n     * @returns - A new `Date` instance.\n     *\n     * @example\n     * ```ts-no-run\n     * addDecades(new Date(2016, 5, 1), 5); // 2066-6-1\n     * addDecades(new Date(2016, 5, 1), -5); // 1966-6-1\n     * ```\n     */\n    var addDecades = function (value, offset) {\n        return addYears(value, 10 * offset);\n    };\n\n    /**\n     * A function that adds and subtracts weeks from a Date object.\n     *\n     * @param date - The initial date value.\n     * @param offset - The number of weeks to add/subtract from the date.\n     * @returns - A new `Date` instance.\n     *\n     * @example\n     * ```ts-no-run\n     * addWeeks(new Date(2016, 5, 1), 3); // 2016-6-22\n     * addWeeks(new Date(2016, 5, 1), -3); // 2015-5-11\n     * ```\n     */\n    var addWeeks = function (date, offset) {\n        return addDays(date, offset * 7);\n    };\n\n    /**\n     * The number of milliseconds in one minute.\n     */\n    var MS_PER_MINUTE$1 = 60000;\n    /**\n     * The number of milliseconds in one hour.\n     */\n    var MS_PER_HOUR = 3600000;\n    /**\n     * The number of milliseconds in one standard day.\n     */\n    var MS_PER_DAY = 86400000;\n\n    // tslint:disable:max-line-length\n    /**\n     * An enumeration which represents the horizontal direction. The `Forward` option moves forward. The `Backward` option moves backward.\n     */\n    var Direction;\n    (function (Direction) {\n        /**\n         * The `Forward` value with an underlying `1` number value.\n         */\n        Direction[Direction[\"Forward\"] = 1] = \"Forward\";\n        /**\n         * The `Backward` value with an underlying `-1` (minus one) number value.\n         */\n        Direction[Direction[\"Backward\"] = -1] = \"Backward\";\n    })(Direction || (Direction = {}));\n    // tslint:enable:max-line-length\n\n    /**\n     * @hidden\n     *\n     * A function which returns the next or previous date for a specific week day. For example, `Day.Monday`.\n     *\n     * @param date - The date to calculate from.\n     * @param weekDay - The `Day` enum specifying the desired week day.\n     * @param direction - The `Direction` enum specifying the calculation direction.\n     * @returns - A `Date` instance.\n     *\n     * @example\n     * ```ts-no-run\n     * dayOfWeek(new Date(2016, 0, 1), Day.Wednesday, Direction.Forward); // 2016-01-06, Wednesday\n     * dayOfWeek(new Date(2016, 0, 1), Day.Wednesday, Direction.Backward); // 2015-12-30, Wednesday\n     * ```\n     */\n    var dayOfWeek = function (date, weekDay, direction) {\n        if (direction === void 0) { direction = Direction.Forward; }\n        var newDate = cloneDate(date);\n        var newDay = ((weekDay - newDate.getDay()) + (7 * direction)) % 7;\n        newDate.setDate(newDate.getDate() + newDay);\n        return adjustDST(newDate, date.getHours());\n    };\n\n    /**\n     * Enumeration which represents the week days.\n     */\n    var Day;\n    (function (Day) {\n        /**\n         * The Sunday value with an underlying `0` number value.\n         */\n        Day[Day[\"Sunday\"] = 0] = \"Sunday\";\n        /**\n         * The Monday value with an underlying `1` number value.\n         */\n        Day[Day[\"Monday\"] = 1] = \"Monday\";\n        /**\n         * The Tuesday value with an underlying `2` number value.\n         */\n        Day[Day[\"Tuesday\"] = 2] = \"Tuesday\";\n        /**\n         * The Wednesday value with an underlying `3` number value.\n         */\n        Day[Day[\"Wednesday\"] = 3] = \"Wednesday\";\n        /**\n         * The Thursday value with an underlying `4` number value.\n         */\n        Day[Day[\"Thursday\"] = 4] = \"Thursday\";\n        /**\n         * The Friday value with an underlying `5` number value.\n         */\n        Day[Day[\"Friday\"] = 5] = \"Friday\";\n        /**\n         * The Saturday value with an underlying `6` number value.\n         */\n        Day[Day[\"Saturday\"] = 6] = \"Saturday\";\n    })(Day || (Day = {}));\n\n    /**\n     * @hidden\n     */\n    var normalizeYear = function (value, year) { return (setYear(value, year(value.getFullYear()))); };\n\n    /**\n     * A function that returns a `Date` object of the first decade in a century.\n     *\n     * @param date - The start date value.\n     * @returns - The first year in a century.\n     *\n     * @example\n     * ```ts-no-run\n     * firstDecadeOfCentury(new Date(2017, 0, 1)); // 2000-1-1\n     * firstDecadeOfCentury(new Date(2007, 10, 22)); // 2000-11-22\n     * firstDecadeOfCentury(new Date(2126, 0, 1)); // 2100-1-1\n     * ```\n     */\n    var firstDecadeOfCentury = function (value) { return (normalizeYear(value, function (y) { return y - (y % 100); })); };\n\n    /**\n     * A function that calculates duration in centuries between two `Date` objects.\n     *\n     * @param start - The start date value.\n     * @param end - The end date value.\n     * @returns - The duration in months.\n     *\n     * @example\n     * ```ts-no-run\n     * durationInCenturies(new Date(2016, 0, 1), new Date(3216, 0, 1)); // 12\n     * durationInCenturies(new Date(2016, 6, 1), new Date(2617, 0, 1)); // 6\n     * durationInCenturies(new Date(2016, 0, 1), new Date(2016, 0, 1)); // 0\n     * ```\n     */\n    var durationInCenturies = function (start, end) { return ((firstDecadeOfCentury(end).getFullYear() - firstDecadeOfCentury(start).getFullYear()) / 100); };\n\n    /**\n     * A function that returns a `Date` object of the first year in a decade.\n     *\n     * @param date - The start date value.\n     * @returns - The first year in a decade.\n     *\n     * @example\n     * ```ts-no-run\n     * firstYearOfDecade(new Date(2017, 0, 1)); // 2010-1-1\n     * firstYearOfDecade(new Date(2007, 10, 22)); // 2000-11-22\n     * firstYearOfDecade(new Date(2026, 0, 1)); // 2020-1-1\n     * ```\n     */\n    var firstYearOfDecade = function (value) { return (normalizeYear(value, function (y) { return y - (y % 10); })); };\n\n    /**\n     * A function that calculates duration in decades between two `Date` objects.\n     *\n     * @param start - The start date value.\n     * @param end - The end date value.\n     * @returns - The duration in months.\n     *\n     * @example\n     * ```ts-no-run\n     * durationInDecades(new Date(2016, 0, 1), new Date(2136, 0, 1)); // 12\n     * durationInDecades(new Date(2016, 0, 1), new Date(2016, 0, 1)); // 0\n     * ```\n     */\n    var durationInDecades = function (start, end) { return ((firstYearOfDecade(end).getFullYear() - firstYearOfDecade(start).getFullYear()) / 10); };\n\n    /**\n     * A function that calculates duration in months between two `Date` objects.\n     *\n     * @param start - The start date value.\n     * @param end - The end date value.\n     * @returns - The duration in months.\n     *\n     * @example\n     * ```ts-no-run\n     * durationInMonths(new Date(2016, 0, 1), new Date(2017, 0, 1)); // 12\n     * durationInMonths(new Date(2016, 6, 1), new Date(2017, 0, 1)); // 6\n     * durationInMonths(new Date(2016, 0, 1), new Date(2016, 0, 1)); // 0\n     * ```\n     */\n    var durationInMonths = function (start, end) { return (((end.getFullYear() - start.getFullYear())) * 12 + (end.getMonth() - start.getMonth())); };\n\n    /**\n     * A function that calculates duration in years between two `Date` objects.\n     *\n     * @param start - The start date value.\n     * @param end - The end date value.\n     * @returns - The duration in years.\n     *\n     * @example\n     * ```ts-no-run\n     * durationInYears(new Date(2016, 0, 1), new Date(2028, 0, 1)); // 12\n     * durationInYears(new Date(2016, 0, 1), new Date(2022, 0, 1)); // 6\n     * durationInYears(new Date(2016, 0, 1), new Date(2016, 0, 1)); // 0\n     * ```\n     */\n    var durationInYears = function (start, end) { return (end.getFullYear() - start.getFullYear()); };\n\n    /**\n     *  A function which returns the first date of the current week.\n     *\n     * @param date - The initial date.\n     * @param weekStartDay [default: Day.Sunday] - The first day of the week.\n     * @returns - The first date of the current week.\n     *\n     * @example\n     * ```ts-no-run\n     * firstDayInWeek(new Date(2016, 0, 15)); // 2016-01-10\n     * firstDayInWeek(new Date(2016, 0, 15), Day.Monday); // 2016-01-11\n     * ```\n     */\n    var firstDayInWeek = function (date, weekStartDay) {\n        if (weekStartDay === void 0) { weekStartDay = Day.Sunday; }\n        var first = cloneDate(date);\n        while (first.getDay() !== weekStartDay) {\n            first.setDate(first.getDate() - 1);\n        }\n        return first;\n    };\n\n    /**\n     * A function which returns the first date of the month.\n     *\n     * @param date - The initial date.\n     * @returns - The first date of the initial date month.\n     *\n     * @example\n     * ```ts-no-run\n     * firstDayOfMonth(new Date(2016, 0, 15)); // 2016-01-01\n     * ```\n     */\n    var firstDayOfMonth = function (date) {\n        return createDate(date.getFullYear(), date.getMonth(), 1, date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n    };\n\n    /**\n     * @hidden\n     */\n    var setMonth = function (value, month) {\n        var day = value.getDate();\n        var candidate = createDate(value.getFullYear(), month, day, value.getHours(), value.getMinutes(), value.getSeconds(), value.getMilliseconds());\n        return candidate.getDate() === day ? candidate : lastDayOfMonth(addMonths(candidate, -1));\n    };\n\n    /**\n     * A function that returns a `Date` object of the first month in a year.\n     *\n     * @param date - The start date value.\n     * @returns - The first month in a year.\n     *\n     * @example\n     * ```ts-no-run\n     * firstMonthOfYear(new Date(2017, 11, 1)); // 2017-1-1\n     * firstMonthOfYear(new Date(2017, 0, 1)); // 2017-1-1\n     * ```\n     */\n    var firstMonthOfYear = function (value) { return setMonth(value, 0); };\n\n    /**\n     * A function which returns the passed date with a midnight time portion.\n     *\n     * @param date - The initial date.\n     * @returns - The date with a midnight time portion.\n     *\n     * @example\n     * ```ts-no-run\n     * getDate(new Date(2016, 0, 15, 14, 30, 30)); // 2016-01-15 00:00:00\n     * ```\n     */\n    var getDate = function (date) {\n        return createDate(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0);\n    };\n\n    /**\n     * A function that compares two dates. The comparison also includes the time portion.\n     *\n     * @param candidate - The candidate date.\n     * @param expected - The expected date.\n     * @returns - A Boolean value indicating whether the values are equal.\n     *\n     * @example\n     * ```ts-no-run\n     * isEqual(new Date(2016, 0, 1), new Date(2016, 0, 1)); // true\n     * isEqual(new Date(2016, 0, 1), new Date(2016, 0, 2)); // false\n     * isEqual(new Date(2016, 0, 1, 10), new Date(2016, 0, 1, 20)); // false\n     * ```\n     */\n    var isEqual = function (candidate, expected) {\n        if (!candidate && !expected) {\n            return true;\n        }\n        return candidate && expected && candidate.getTime() === expected.getTime();\n    };\n\n    /**\n     * A function that compares the date portions of 2 dates.\n     *\n     * @param candidate - The candidate date.\n     * @param expected - The expected date.\n     * @returns - A Boolean value whether the values are equal.\n     *\n     * @example\n     * ```ts-no-run\n     * isEqualDate(new Date(2016, 0, 1, 10), new Date(2016, 0, 1, 20)); // true\n     * isEqualDate(new Date(2016, 0, 1, 10), new Date(2016, 0, 2, 10)); // false\n     * ```\n     */\n    var isEqualDate = function (candidate, expected) {\n        if (!candidate && !expected) {\n            return true;\n        }\n        return candidate && expected && isEqual(getDate(candidate), getDate(expected));\n    };\n\n    /**\n     * A function that returns a `Date` object of the last decade in a century.\n     *\n     * @param date - The start date value.\n     * @returns - The last year in a decade.\n     *\n     * @example\n     * ```ts-no-run\n     * lastDecadeOfCentury(new Date(2017, 0, 1)); // 2090-1-1\n     * lastDecadeOfCentury(new Date(2007, 10, 22)); // 2090-11-22\n     * lastDecadeOfCentury(new Date(2126, 0, 1)); // 2190-1-1\n     * ```\n     */\n    var lastDecadeOfCentury = function (value) { return (normalizeYear(value, function (y) { return y - (y % 100) + 90; })); };\n\n    /**\n     * A function that returns a `Date` object of the last month in a year.\n     *\n     * @param date - The start date value.\n     * @returns - The last month in a year.\n     *\n     * @example\n     * ```ts-no-run\n     * lastMonthOfYear(new Date(2017, 5, 3)); // 2017-12-3\n     * lastMonthOfYear(new Date(2017, 11, 3)); // 2017-12-3\n     * ```\n     */\n    var lastMonthOfYear = function (value) { return setMonth(value, 11); };\n\n    /**\n     * A function that returns a `Date` object of the last year in a decade.\n     *\n     * @param date - The start date value.\n     * @returns - The last year in a decade.\n     *\n     * @example\n     * ```ts-no-run\n     * lastYearOfDecade(new Date(2017, 0, 1)); // 2019-1-1\n     * lastYearOfDecade(new Date(2007, 10, 22)); // 2009-11-22\n     * lastYearOfDecade(new Date(2026, 0, 1)); // 2029-1-1\n     * ```\n     */\n    var lastYearOfDecade = function (value) { return (normalizeYear(value, function (y) { return y - (y % 10) + 9; })); };\n\n    /**\n     * A function which returns a date by a specific week name. For example, `Day.Monday`.\n     *\n     * @param date - The date to calculate from.\n     * @param weekDay - The `Day` enum specifying the desired week day.\n     * @returns - A `Date` instance.\n     *\n     * @example\n     * ```ts-no-run\n     * nextDayOfWeek(new Date(2016, 0, 1), Day.Wednesday); // 2016-01-06, Wednesday\n     * ```\n     */\n    var nextDayOfWeek = function (date, weekDay) {\n        return dayOfWeek(date, weekDay, Direction.Forward);\n    };\n\n    /**\n     * A function which returns a date by a specific week name. For example, `Day.Monday`.\n     *\n     * @param date - The date to calculate from.\n     * @param weekDay - The `Day` enum specifying the desired week day.\n     * @returns - A `Date` instance.\n     *\n     * @example\n     * ```ts-no-run\n     * prevDayOfWeek(new Date(2016, 0, 1), Day.Wednesday); // 2015-12-30, Wednesday\n     * ```\n     */\n    var prevDayOfWeek = function (date, weekDay) {\n        return dayOfWeek(date, weekDay, Direction.Backward);\n    };\n\n    /**\n     * @hidden\n     *\n     * An object which contains the information about the cities within the timezone.\n     */\n    var timezones = {\n        rules: {},\n        titles: {},\n        zones: {}\n    };\n\n    var MONTHS = { Jan: 0, Feb: 1, Mar: 2, Apr: 3, May: 4, Jun: 5, Jul: 6, Aug: 7, Sep: 8, Oct: 9, Nov: 10, Dec: 11 };\n    var DAYS = { Sun: 0, Mon: 1, Tue: 2, Wed: 3, Thu: 4, Fri: 5, Sat: 6 };\n    var MS_PER_MINUTE = 60000;\n    /**\n     * @hidden\n     *\n     * A function that finds zone rules which become applicable after a specific time.\n     *\n     * @param year - The value of the year.\n     * @param rule - A specific zone rule.\n     * @param zone - The definition of the zone.\n     *\n     * @return - Returns an extended rule.\n     *\n     * @example\n     * ```ts-no-run\n     * ruleToDate(2018, rule); // A rule that contains {'2018': |2018 DST date| }\n     * ```\n     */\n    var ruleToDate = function (year, rule, zoneOffset) {\n        var month = rule[3];\n        var on = rule[4];\n        var time = rule[5];\n        var date;\n        var ruleOffset = time[3] === 'u' ? -zoneOffset * MS_PER_MINUTE : 0;\n        if (!isNaN(on)) {\n            date = new Date(Date.UTC(year, MONTHS[month], on, time[0], time[1], time[2]) + ruleOffset);\n        }\n        else if (on.indexOf('last') === 0) {\n            date = new Date(Date.UTC(year, MONTHS[month] + 1, 1, time[0] - 24, time[1], time[2]) + ruleOffset);\n            var targetDay = DAYS[on.substr(4, 3)];\n            var ourDay = date.getUTCDay();\n            date.setUTCDate(date.getUTCDate() + targetDay - ourDay - (targetDay > ourDay ? 7 : 0));\n        }\n        else if (on.indexOf('>=') >= 0) {\n            date = new Date(Date.UTC(year, MONTHS[month], on.substr(5), time[0], time[1], time[2], 0) + ruleOffset);\n            var targetDay = DAYS[on.substr(0, 3)];\n            var ourDay = date.getUTCDay();\n            date.setUTCDate(date.getUTCDate() + targetDay - ourDay + (targetDay < ourDay ? 7 : 0));\n        }\n        return date;\n    };\n\n    var CURRENT_UTC_TIME = (new Date()).getTime();\n    /**\n     * @hidden\n     *\n     * A function that finds zone rules which become applicable after a specific time.\n     *\n     * @param timezone - The timezone name. For example, `America/Chicago`, `Europe/Sofia`.\n     * @param utcTime - The UTC time boundary for a zone rule. Defaults to the current UTC time.\n     *\n     * @return - Returns a zone rule for the specific zone name.\n     *\n     * @example\n     * ```ts-no-run\n     * findZone('Europe/Sofia'); //[-120,\"EU\",\"EE%sT\",null]\n     * ```\n     */\n    var findRule = function (zoneRule, utcTime, zoneOffset) {\n        if (utcTime === void 0) { utcTime = CURRENT_UTC_TIME; }\n        if (zoneOffset === void 0) { zoneOffset = 0; }\n        var rules = timezones.rules[zoneRule];\n        if (!rules) {\n            var time = zoneRule.split(\":\");\n            var offset = 0;\n            if (time.length > 1) {\n                offset = time[0] * 60 + Number(time[1]);\n            }\n            return [-1000000, 'max', '-', 'Jan', 1, [0, 0, 0], offset, '-'];\n        }\n        var year = new Date(utcTime).getUTCFullYear();\n        rules = rules.filter(function (currentRule) {\n            var from = currentRule[0];\n            var to = currentRule[1];\n            return from <= year && (to >= year || (from === year && to === \"only\") || to === \"max\");\n        });\n        rules.push(utcTime);\n        rules.sort(function (a, b) {\n            if (typeof a !== \"number\") {\n                a = Number(ruleToDate(year, a, zoneOffset));\n            }\n            if (typeof b !== \"number\") {\n                b = Number(ruleToDate(year, b, zoneOffset));\n            }\n            return a - b;\n        });\n        var rule = rules[rules.indexOf(utcTime) - 1] || rules[rules.length - 1];\n        return isNaN(rule) ? rule : null;\n    };\n\n    /** @hidden */\n    var NO_TZ_INFO = 'The required {0} timezone information is not provided!';\n    /** @hidden */\n    var INVALID_TZ_STRUCTURE = 'The provided timezone information has invalid stucture!';\n    var formatRegExp = /\\{(\\d+)}?\\}/g;\n    var flatten = function (arr) { return arr.reduce(function (a, b) { return a.concat(b); }, []); };\n    /** @hidden */\n    var formatMessage = function (message) {\n        var values = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            values[_i - 1] = arguments[_i];\n        }\n        var flattenValues = flatten(values);\n        return message.replace(formatRegExp, function (_, index) { return flattenValues[parseInt(index, 10)]; });\n    };\n\n    /**\n     * @hidden\n     *\n     * A function that gets all zone rules for a specific zone.\n     *\n     * @param timezone - The timezone name. For example, `America/Chicago`, `Europe/Sofia`.\n     *\n     * @return - Returns all zone rules for the specific zone name.\n     *\n     * @example\n     * ```ts-no-run\n     * findZone('Europe/Sofia'); //[[-120,\"E-Eur\",\"EE%sT\",883526400000], [-120,\"EU\",\"EE%sT\",null]]\n     * ```\n     */\n    var getZoneRules = function (timezone) {\n        var zones = timezones.zones;\n        if (!zones) {\n            throw new Error(formatMessage(NO_TZ_INFO, timezone));\n        }\n        var zoneRules = zones[timezone];\n        var result = typeof zoneRules === \"string\" ? zones[zoneRules] : zoneRules;\n        if (!result) {\n            throw new Error(formatMessage(NO_TZ_INFO, timezone));\n        }\n        return result;\n    };\n\n    /**\n     * @hidden\n     *\n     * A function that finds zone rules which become applicable after specific time.\n     */\n    var findZone = function (timezone, utcTime) {\n        if (utcTime === void 0) { utcTime = new Date().getTime(); }\n        if (timezone === 'Etc/UTC' || timezone === 'Etc/GMT') {\n            return [0, \"-\", \"UTC\", null];\n        }\n        var zoneRules = getZoneRules(timezone);\n        var idx = zoneRules.length - 1;\n        for (; idx >= 0; idx--) {\n            var until = zoneRules[idx][3];\n            if (until && utcTime > until) {\n                break;\n            }\n        }\n        var zone = zoneRules[idx + 1];\n        if (!zone) {\n            throw new Error(formatMessage(NO_TZ_INFO, timezone));\n        }\n        return zone;\n    };\n\n    /**\n     * @hidden\n     *\n     * A function that gets the information about the zone and the rule for a specific timezone.\n     *\n     */\n    var zoneAndRule = function (timezone, date) {\n        var utcTime = date.getTime();\n        var zone = findZone(timezone, utcTime);\n        return {\n            rule: findRule(zone[1], utcTime, zone[0]),\n            zone: zone\n        };\n    };\n\n    /**\n     * @hidden\n     */\n    var padNumber = function (num, len) {\n        if (len === void 0) { len = 2; }\n        var sign = num < 0 ? '-' : '';\n        return sign + new Array(len).concat([Math.abs(num)]).join('0').slice(-len);\n    };\n\n    // tslint:disable:max-line-length\n    /**\n     * A function which returns the abbreviated name of the timezone. You can specify an optional date for returning the timezone name at a different point in time. The corresponding UTC date is used for locating the relevant rule. Timezone names change both historically and when they reflect the Daylight Savings Time rules.\n     *\n     * @param timezone - The timezone name. For example, `America/Chicago`, `Europe/Sofia`.\n     * @param date - A date for which to locate the zone rule. By default, the current time is used.\n     *\n     * @return - The abbreviated name of the timezone at the specified date or, if not set, returns now.\n     *\n     * @example\n     * ```ts-no-run\n     * import { abbrTimezone } from '@progress/kendo-date-math';\n     * import '@progress/kendo-date-math/tz/Europe/Sofia';\n     *\n     * const dstDate = new Date('2018-04-01T00:00:00Z');\n     * console.log(abbrTimezone('Europe/Sofia', dstDate)); // EEST\n     *\n     * const date = new Date('2018-01-01T00:00:00Z');\n     * console.log(abbrTimezone('Europe/Sofia', date)); // EET\n     * ```\n     */\n    // tslint:enable:max-line-length\n    var abbrTimezone = function (timezone, date) {\n        if (date === void 0) { date = new Date(); }\n        if (timezone === \"Etc/UTC\") {\n            return 'UTC';\n        }\n        if (timezone === \"Etc/GMT\") {\n            return 'GMT';\n        }\n        if (timezone === '') {\n            return '';\n        }\n        var _a = zoneAndRule(timezone, date), zone = _a.zone, rule = _a.rule;\n        var base = zone[2];\n        if (base.indexOf(\"/\") >= 0) {\n            return base.split(\"/\")[rule && +rule[6] ? 1 : 0];\n        }\n        else if (base.indexOf(\"%s\") >= 0) {\n            return base.replace(\"%s\", (!rule || rule[7] === \"-\") ? '' : rule[7]);\n        }\n        else if (base.indexOf(\"%z\") >= 0) {\n            var hours = -1 * Math.trunc(zone[0] / 60);\n            var hoursPart = padNumber(hours, 2);\n            var signPart = hours > 0 ? '+' : '';\n            var minutes = Math.abs(Math.trunc(zone[0] % 60));\n            var minutesPart = minutes === 0 ? '' : padNumber(minutes, 2);\n            return base.replace(\"%z\", \"\" + signPart + hoursPart + minutesPart);\n        }\n        return base;\n    };\n\n    // tslint:disable:max-line-length\n    /**\n     * A function that loads the information about the provided timezone. The details for the loaded timezone will be available to all functions that are related to the manipulation of the timezone.\n     *\n     * @param timezoneInfo - The information about the timezone that will be loaded.\n     *\n     * @example\n     * ```ts-no-run\n     * loadTimezone({ zones: [...], rules: [...]});\n     * ```\n     */\n    // tslint:enable:max-line-length\n    var loadTimezone = function (tzInfo) {\n        if (!tzInfo) {\n            throw new Error(formatMessage(NO_TZ_INFO, ''));\n        }\n        var rules = tzInfo.rules, titles = tzInfo.titles, zones = tzInfo.zones;\n        if (rules === undefined || zones === undefined) {\n            throw new Error(INVALID_TZ_STRUCTURE);\n        }\n        Object.assign(timezones.rules, rules);\n        Object.assign(timezones.titles, titles || {});\n        Object.assign(timezones.zones, zones);\n    };\n\n    /**\n     * @hidden\n     *\n     * A function that calculates the time offset based on zone name.\n     *\n     * @param timezone - The timezone name. For example, `America/Chicago`, `Europe/Sofia`.\n     * @param date - A date for which the zone rule will be located.\n     *\n     * @return - Returns the timezone offset in minutes at the specified time.\n     */\n    var offset = function (timezone, date) {\n        if (date === void 0) { date = new Date(); }\n        if (timezone === 'Etc/UTC' || timezone === 'Etc/GMT') {\n            return 0;\n        }\n        if (timezone === '') {\n            return date.getTimezoneOffset();\n        }\n        var _a = zoneAndRule(timezone, date), rule = _a.rule, zone = _a.zone;\n        return parseFloat(rule ? zone[0] - rule[6] : zone[0]);\n    };\n\n    /**\n     * A function that returns a list of grouped timezone names.\n     *\n     * @return - Returns a list of grouped timezone names.\n     *\n     * @example\n     * ```ts-no-run\n     * import '@progress/kendo-date-math/timezones/europe-berlin';\n     * import '@progress/kendo-date-math/timezones/europe-sofia';\n     *\n     * timezoneGroupNames(); // ['(GMT+01:00) Amsterdam, Berlin, ...', '(GMT+02:00) Sofia, Tallinn...']\n     * ```\n     */\n    var timezoneGroupNames = function () {\n        var groups = Object.keys(timezones.titles).reduce(function (tmp, t) {\n            var group = timezones.titles[t].group;\n            tmp[group] = group;\n            return tmp;\n        }, {});\n        return Object.keys(groups);\n    };\n\n    /**\n     * A function that returns the list of all timezones that are loaded.\n     *\n     * @return - Returns the list of all timezones that are loaded.\n     *\n     * @example\n     * ```ts-no-run\n     * import '@progress/kendo-date-math/timezones/europe-berlin';\n     * import '@progress/kendo-date-math/timezones/europe-sofia';\n     *\n     * timezoneNames(); // ['Europe/Berlin', 'Europe/Sofia']\n     * ```\n     */\n    var timezoneNames = function () { return Object.keys(timezones.zones); };\n\n    /**\n     * A function that returns the full name of the timezone.\n     *\n     * @param timezone - The timezone name. For example, `America/Chicago`, `Europe/Sofia`.\n     *\n     * @return - Returns the full names of the timezone and the group.\n     *\n     * @example\n     * ```ts-no-run\n     * timezoneTitle('America/Chicago'); // Central Standard Time\n     * ```\n     */\n    var timezoneTitle = function (timezone) {\n        var titles = timezones.titles;\n        var info = titles[timezone] || {};\n        return info.long || timezone;\n    };\n\n    /**\n     * A function that creates a local date from the UTC date parts of the input.\n     *\n     * @param date - The date value that will be converted. Only the UTC date parts are read.\n     * @return Date - A local date with the UTC time parts of the supplied date.\n     *\n     * @example\n     * ```ts-no-run\n     * import { toLocalDate } from '@progress/kendo-date-math'\n     *\n     * const date = new Date('2016-11-05');\n     * const local = toLocalDate(date);\n     *\n     * // For example, if the browser is in GMT+0200,\n     * // the local date will be shifted 2 hours back:\n     * //\n     * // \"Fri Nov 04 2016 22:00:00 GMT+0200\"\n     * console.log(local);\n     *\n     * // This is the same as the UTC parts of the input date:\n     * //\n     * // \"2016-11-05T22:00:00.000Z\"\n     * console.log(date.toISOString());\n     * ```\n     */\n    function toLocalDate(date) {\n        return new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());\n    }\n\n    var addMinutes = function (date, minutes) { return new Date(date.getTime() + minutes * MS_PER_MINUTE$1); };\n    var addHours = function (date, hours) { return new Date(date.getTime() + hours * MS_PER_HOUR); };\n    var dayAbbr = [\n        'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'\n    ];\n    var monthAbbr = [\n        'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\n    ];\n    var datePrefix = function (utcDate) {\n        return dayAbbr[utcDate.getUTCDay()] + ' ' + monthAbbr[utcDate.getUTCMonth()];\n    };\n    function isZoneMissingHour(date, timezone) {\n        var currentOffset = offset(timezone, date);\n        var prevHour = addHours(date, -1);\n        var prevOffset = offset(timezone, prevHour);\n        return currentOffset < prevOffset;\n    }\n    function shiftZoneMissingHour(utcDate, timezone) {\n        // Adjust for missing hour during DST transition in timezone.\n        var dstOffset = isZoneMissingHour(utcDate, timezone) ? 1 : 0;\n        return addHours(utcDate, dstOffset);\n    }\n    function convertTimezoneUTC(utcLocal, fromTimezone, toTimezone) {\n        if (fromTimezone === toTimezone) {\n            return utcLocal;\n        }\n        var fromOffset = offset(fromTimezone, utcLocal);\n        var toOffset = offset(toTimezone, utcLocal);\n        var baseDiff = fromOffset - toOffset;\n        var midDate = addMinutes(utcLocal, baseDiff);\n        var midOffset = offset(toTimezone, midDate);\n        var dstDiff = toOffset - midOffset;\n        return addMinutes(utcLocal, baseDiff + dstDiff);\n    }\n    function formatOffset(tzOffset) {\n        var sign = tzOffset <= 0 ? '+' : '-';\n        var value = Math.abs(tzOffset);\n        var hours = padNumber(Math.floor(value / 60));\n        var minutes = padNumber(value % 60);\n        return \"GMT\" + sign + hours + minutes;\n    }\n    /**\n     * Represents a local date in a specified timezone.\n     *\n     * The following example demonstrates how to convert a local date to the specified timezone.\n     *\n     * @example\n     * ```ts-no-run\n     * import { ZonedDate } from '@progress/kendo-date-math';\n     * import '@progress/kendo-date-math/tz/America/New_York';\n     *\n     * const date = new Date('2018-03-13T00:00:00Z');\n     * const tzDate = ZonedDate.fromLocalDate(date, 'America/New_York');\n     *\n     * // If you run this example in GMT+0200,\n     * // the output will be '2018-03-12T22:00:00.000Z'.\n     * console.log(tzDate.toISOString());\n     * ```\n     *\n     * The following example demonstrates how to convert between timezones.\n     *\n     * @example\n     * ```ts-no-run\n     * import { ZonedDate } from '@progress/kendo-date-math';\n     * import '@progress/kendo-date-math/tz/America/New_York';\n     * import '@progress/kendo-date-math/tz/America/Los_Angeles';\n     *\n     * // Note the \"Z\" suffix for UTC dates.\n     * const date = new Date('2018-03-12T22:00:00Z');\n     *\n     * const tzDate = ZonedDate.fromLocalDate(date, 'America/New_York');\n     * const result = tzDate.toTimezone('America/Los_Angeles');\n     *\n     * // Regardless of the browser timezone\n     * // the output will be '2018-03-12T15:00:00.000Z'.\n     * console.log(tzDate.toUTCDate());\n     * ```\n     */\n    var ZonedDate = /** @class */ (function () {\n        // The constructor is aliased as a static fromUTCDate method\n        // to clarify the meaning of the utcDate parameter.\n        //\n        // It can be confused for a local date time while it is in fact\n        // treated as a UTC date that represents the local date in the timezone.\n        function ZonedDate(utcDate, timezone) {\n            this._utcDate = cloneDate(utcDate);\n            this.timezone = timezone;\n            var tzOffset = offset(timezone, utcDate);\n            this.timezoneOffset = tzOffset;\n            var localDate = shiftZoneMissingHour(utcDate, timezone);\n            this._localDate = convertTimezoneUTC(localDate, timezone, 'Etc/UTC');\n        }\n        Object.defineProperty(ZonedDate.prototype, \"cachedLocalDate\", {\n            /**\n             * Returns a cached local date that denotes the exact time in the set timezone.\n             *\n             * @return Date - A local date that denotes the exact time in the set timezone.\n             *\n             * This property is an alternative to `toLocalDate()` that returns a cached value instead of cloning it.\n             *\n             * > Modifying the returned instance will corrupt the `ZonedDate` state.\n             */\n            get: function () {\n                return this._localDate;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ZonedDate.prototype, \"cachedUTCDate\", {\n            /**\n             * Returns a cached `Date` instance with UTC date parts that are set to the local time in the set timezone.\n             *\n             * @returns Date - A `Date` with UTC date parts that are set to the local time in the set timezone.\n             *\n             * This property is an alternative to `toUTCDate()` that returns a cached value instead of cloning it.\n             *\n             * > Modifying the returned instance will corrupt the `ZonedDate` state.\n             */\n            get: function () {\n                return this._utcDate;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        // tslint:disable:max-line-length\n        /**\n         * Converts an existing date to a specified timezone.\n         *\n         * If the `timezone` parameter is omitted, the `ZonedDate` defaults to the timezone of the browser. This concept is known as \"floating date\" because it does not represent a particular moment in time. Instead, its actual value depends on the current timezone of the browser.\n         *\n         * @param date - The local date that represents the actual time instance.\n         * @param timezone - The ID of the timezone that will be assumed. For example, `Europe/Sofia`.\n         * @return ZonedDate - The date in the specified timezone.\n         *\n         * @example\n         * ```ts-no-run\n         * import { ZonedDate } from '@progress/kendo-date-math';\n         * import '@progress/kendo-date-math/tz/America/New_York';\n         *\n         * const date = new Date('2018-03-13T00:00:00');\n         * const tzDate = ZonedDate.fromLocalDate(date, 'America/New_York');\n         *\n         * // If you run this example in GMT+0200,\n         * // the output will be 'Mon Mar 12 2018 18:00:00 GMT+0200 (EET)'.\n         * console.log(tzDate.toString());\n         *\n         * // If you run this example in UTC,\n         * // the output will be '2018-03-12T22:00:00.000Z'.\n         * console.log(tzDate.toISOString());\n         * ```\n         */\n        // tslint:enable:max-line-length\n        ZonedDate.fromLocalDate = function (date, timezone) {\n            if (timezone === void 0) { timezone = ''; }\n            var utcDate = convertTimezoneUTC(date, 'Etc/UTC', timezone);\n            var shiftZone = isZoneMissingHour(utcDate, timezone);\n            var zoneOffset = offset(timezone, utcDate);\n            var fixedOffset = 0;\n            if (shiftZone) {\n                // Adjust for the missing hour during the DST transition in the timezone.\n                fixedOffset = zoneOffset > 0 ? -1 : 1;\n            }\n            var adjDate = addHours(utcDate, fixedOffset);\n            return ZonedDate.fromUTCDate(adjDate, timezone);\n        };\n        // tslint:disable:max-line-length\n        /**\n         * Creates a date in a specific timezone from the UTC date parts of the supplied `Date`.\n         *\n         * If the `timezone` parameter is omitted, the `ZonedDate` defaults to the timezone of the browser. This concept is known as \"floating date\" because it does not represent a particular moment in time. Instead, its actual value depends on the current timezone of the browser.\n         *\n         * @param date - The UTC date that represents the time in the target zone. This time is not the actual time instant in UTC.\n         * @param timezone - The ID of the timezone that will be assumed. For example, `Europe/Sofia`.\n         * @return ZonedDate - The date in the specified timezone.\n         *\n         * @example\n         * ```ts-no-run\n         * import { ZonedDate } from '@progress/kendo-date-math';\n         * import '@progress/kendo-date-math/tz/America/New_York';\n         *\n         * // Note the \"Z\" suffix for UTC dates.\n         * const date = new Date('2018-03-12T18:00:00Z');\n         *\n         * // Alternative syntax using Date.UTC\n         * // const date = new Date(Date.UTC(2018, 2, 12, 18, 0));\n         *\n         * const tzDate = ZonedDate.fromUTCDate(date, 'America/New_York');\n         *\n         * // Regardless of the browser timezone\n         * // the output will be 'Mon Mar 12 2018 18:00:00 GMT+0200 (EET)'.\n         * console.log(tzDate.toString());\n         *\n         * // Regardless of the browser timezone\n         * // the output in UTC will be '2018-03-12T22:00:00.000Z'.\n         * console.log(tzDate.toISOString());\n         * ```\n         */\n        // tslint:enable:max-line-length\n        ZonedDate.fromUTCDate = function (utcDate, timezone) {\n            if (timezone === void 0) { timezone = ''; }\n            return new ZonedDate(utcDate, timezone);\n        };\n        /**\n         * Returns a local date that denotes the exact time in the set timezone.\n         *\n         * @return Date - A local date that denotes the exact time in the set timezone.\n         *\n         * @example\n         * ```ts-no-run\n         * import { ZonedDate } from '@progress/kendo-date-math';\n         * import '@progress/kendo-date-math/tz/America/New_York';\n         *\n         * // Note the \"Z\" suffix for UTC dates.\n         * const date = new Date('2018-03-12T18:00:00Z');\n         * const tzDate = ZonedDate.fromUTCDate(date, 'America/New_York');\n         *\n         * // The local date represents the same moment in time as the ZonedDate:\n         * // `2018-03-12T22:00:00.000Z`.\n         * console.log(tzDate.toLocalDate().toISOString());\n         *\n         * // The local date will apply the timezone of the browser. For example,\n         * // `Tue Mar 13 2018 00:00:00 GMT+0200 (Eastern European Standard Time)`.\n         * console.log(tzDate.toLocalDate().toString())\n         * ```\n         */\n        ZonedDate.prototype.toLocalDate = function () {\n            return cloneDate(this._localDate);\n        };\n        /**\n         * Returns a `Date` instance with UTC date parts that are set to the local time in the set timezone.\n         *\n         * @returns Date - A `Date` with UTC date parts that are set to the local time in the set timezone.\n         *\n         * @example\n         * ```ts-no-run\n         * import { ZonedDate } from '@progress/kendo-date-math';\n         * import '@progress/kendo-date-math/tz/America/New_York';\n         *\n         * // Note the \"Z\" suffix for UTC dates.\n         * const date = new Date('2018-03-12T18:00:00Z');\n         * const tzDate = ZonedDate.fromUTCDate(date, 'America/New_York');\n         *\n         * // Regardless of the browser timezone\n         * // the output will be '2018-03-12T18:00:00.000Z'.\n         * console.log(tzDate.toUTCDate());\n         * ```\n         */\n        ZonedDate.prototype.toUTCDate = function () {\n            return cloneDate(this._utcDate);\n        };\n        /**\n         * Converts the date to the specified timezone.\n         *\n         * @param toTimezone - The timezone to which the values will be converted. For example, `America/Los_Angeles`.\n         * @returns ZonedDate - The resulting zoned date.\n         *\n         * @example\n         * ```ts-no-run\n         * import { ZonedDate } from '@progress/kendo-date-math';\n         * import '@progress/kendo-date-math/tz/America/New_York';\n         * import '@progress/kendo-date-math/tz/America/Los_Angeles';\n         *\n         * // Note the \"Z\" suffix for UTC dates.\n         * const date = new Date('2018-03-12T22:00:00Z');\n         *\n         * const tzDate = ZonedDate.fromLocalDate(date, 'America/New_York');\n         * const result = tzDate.toTimezone('America/Los_Angeles');\n         *\n         * // Regardless of the browser timezone\n         * // the output will be '2018-03-12T15:00:00.000Z'.\n         * console.log(tzDate.toUTCDate());\n         * ```\n         */\n        ZonedDate.prototype.toTimezone = function (toTimezone) {\n            if (this.timezone === toTimezone) {\n                return this.clone();\n            }\n            var tzOffset = offset(this.timezone, this._utcDate);\n            var date = addMinutes(this._utcDate, tzOffset);\n            return ZonedDate.fromLocalDate(date, toTimezone);\n        };\n        /**\n         * Returns a new instance that represents the same date.\n         *\n         * @returns Date - A copy of the instance of the current zoned date.\n         */\n        ZonedDate.prototype.clone = function () {\n            return ZonedDate.fromUTCDate(this._utcDate, this.timezone);\n        };\n        // tslint:disable:max-line-length\n        /**\n         * Adds the specified number of days and returns a new instance with the resulting date in the same timezone.\n         *\n         * @param days - The number of days that will be added.\n         * @returns ZonedDate - The resulting date.\n         */\n        // tslint:enable:max-line-length\n        ZonedDate.prototype.addDays = function (days) {\n            var newDate = new Date(this._utcDate.getTime());\n            newDate.setUTCDate(newDate.getUTCDate() + days);\n            return ZonedDate.fromUTCDate(newDate, this.timezone);\n        };\n        // tslint:disable:max-line-length\n        /**\n         * Adds the specified number of milliseconds and returns a new instance with the resulting date in the same timezone.\n         *\n         * The method compensates for DST transitions and ensures that the resulting date occurs exactly after the set amount of time in the timezone.\n         *\n         * @param milliseconds - The number of days that will be added.\n         * @returns ZonedDate - The resulting date.\n         */\n        // tslint:enable:max-line-length\n        ZonedDate.prototype.addTime = function (milliseconds) {\n            var utcDate = new Date(this._utcDate.getTime());\n            var utcMid = shiftZoneMissingHour(utcDate, this.timezone);\n            utcMid.setTime(utcMid.getTime() + milliseconds);\n            var utcResult = shiftZoneMissingHour(utcMid, this.timezone);\n            return ZonedDate.fromUTCDate(utcResult, this.timezone);\n        };\n        // tslint:disable:max-line-length\n        /**\n         * Returns a new instance of the same zoned date having its time parts set to `00:00:00.000`.\n         *\n         * @returns ZonedDate - The same date having its time parts set to `00:00:00.000`.\n         */\n        // tslint:enable:max-line-length\n        ZonedDate.prototype.stripTime = function () {\n            var date = this._utcDate;\n            var ticks = Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), 0, 0, 0);\n            return ZonedDate.fromUTCDate(new Date(ticks), this.timezone);\n        };\n        /**\n         * @hidden\n         */\n        ZonedDate.prototype.getTime = function () {\n            return this._localDate.getTime();\n        };\n        /**\n         * @hidden\n         */\n        ZonedDate.prototype.getTimezoneOffset = function () {\n            return this.timezoneOffset;\n        };\n        /**\n         * @hidden\n         */\n        ZonedDate.prototype.getFullYear = function () {\n            return this._utcDate.getUTCFullYear();\n        };\n        /**\n         * @hidden\n         */\n        ZonedDate.prototype.getMonth = function () {\n            return this._utcDate.getUTCMonth();\n        };\n        /**\n         * @hidden\n         */\n        ZonedDate.prototype.getDate = function () {\n            return this._utcDate.getUTCDate();\n        };\n        /**\n         * @hidden\n         */\n        ZonedDate.prototype.getDay = function () {\n            return this._utcDate.getUTCDay();\n        };\n        /**\n         * @hidden\n         */\n        ZonedDate.prototype.getHours = function () {\n            return this._utcDate.getUTCHours();\n        };\n        /**\n         * @hidden\n         */\n        ZonedDate.prototype.getMinutes = function () {\n            return this._utcDate.getUTCMinutes();\n        };\n        /**\n         * @hidden\n         */\n        ZonedDate.prototype.getSeconds = function () {\n            return this._utcDate.getUTCSeconds();\n        };\n        /**\n         * @hidden\n         */\n        ZonedDate.prototype.getMilliseconds = function () {\n            return this._utcDate.getUTCMilliseconds();\n        };\n        // The local date UTC parts represent actual UTC time\n        /**\n         * @hidden\n         */\n        ZonedDate.prototype.getUTCDate = function () {\n            return this._localDate.getUTCDate();\n        };\n        /**\n         * @hidden\n         */\n        ZonedDate.prototype.getUTCDay = function () {\n            return this._localDate.getUTCDay();\n        };\n        /**\n         * @hidden\n         */\n        ZonedDate.prototype.getUTCFullYear = function () {\n            return this._localDate.getUTCFullYear();\n        };\n        /**\n         * @hidden\n         */\n        ZonedDate.prototype.getUTCHours = function () {\n            return this._localDate.getUTCHours();\n        };\n        /**\n         * @hidden\n         */\n        ZonedDate.prototype.getUTCMilliseconds = function () {\n            return this._localDate.getUTCMilliseconds();\n        };\n        /**\n         * @hidden\n         */\n        ZonedDate.prototype.getUTCMinutes = function () {\n            return this._localDate.getUTCMinutes();\n        };\n        /**\n         * @hidden\n         */\n        ZonedDate.prototype.getUTCMonth = function () {\n            return this._localDate.getUTCMonth();\n        };\n        /** @hidden */\n        ZonedDate.prototype.getUTCSeconds = function () {\n            return this._localDate.getUTCSeconds();\n        };\n        /** @hidden */\n        ZonedDate.prototype.setTime = function (time) {\n            throw new Error(\"Method not implemented.\");\n        };\n        /** @hidden */\n        ZonedDate.prototype.setMilliseconds = function (ms) {\n            throw new Error(\"Method not implemented.\");\n        };\n        /** @hidden */\n        ZonedDate.prototype.setUTCMilliseconds = function (ms) {\n            throw new Error(\"Method not implemented.\");\n        };\n        /** @hidden */\n        ZonedDate.prototype.setSeconds = function (sec, ms) {\n            throw new Error(\"Method not implemented.\");\n        };\n        /** @hidden */\n        ZonedDate.prototype.setUTCSeconds = function (sec, ms) {\n            throw new Error(\"Method not implemented.\");\n        };\n        /** @hidden */\n        ZonedDate.prototype.setMinutes = function (min, sec, ms) {\n            throw new Error(\"Method not implemented.\");\n        };\n        /** @hidden */\n        ZonedDate.prototype.setUTCMinutes = function (min, sec, ms) {\n            throw new Error(\"Method not implemented.\");\n        };\n        /** @hidden */\n        ZonedDate.prototype.setHours = function (hours, min, sec, ms) {\n            throw new Error(\"Method not implemented.\");\n        };\n        /** @hidden */\n        ZonedDate.prototype.setUTCHours = function (hours, min, sec, ms) {\n            throw new Error(\"Method not implemented.\");\n        };\n        /** @hidden */\n        ZonedDate.prototype.setDate = function (date) {\n            throw new Error(\"Method not implemented.\");\n        };\n        /** @hidden */\n        ZonedDate.prototype.setUTCDate = function (date) {\n            throw new Error(\"Method not implemented.\");\n        };\n        /** @hidden */\n        ZonedDate.prototype.setMonth = function (month, date) {\n            throw new Error(\"Method not implemented.\");\n        };\n        /** @hidden */\n        ZonedDate.prototype.setUTCMonth = function (month, date) {\n            throw new Error(\"Method not implemented.\");\n        };\n        /** @hidden */\n        ZonedDate.prototype.setFullYear = function (year, month, date) {\n            throw new Error(\"Method not implemented.\");\n        };\n        /** @hidden */\n        ZonedDate.prototype.setUTCFullYear = function (year, month, date) {\n            throw new Error(\"Method not implemented.\");\n        };\n        /**\n         * @hidden\n         */\n        ZonedDate.prototype.toISOString = function () {\n            return this._localDate.toISOString();\n        };\n        /**\n         * @hidden\n         */\n        ZonedDate.prototype.toJSON = function () {\n            return this._localDate.toJSON();\n        };\n        /**\n         * @hidden\n         */\n        ZonedDate.prototype.toString = function () {\n            var dateString = datePrefix(this._utcDate);\n            var timeString = this.toTimeString();\n            return dateString + \" \" + this.getDate() + \" \" + this.getFullYear() + \" \" + timeString;\n        };\n        /** @hidden */\n        ZonedDate.prototype.toDateString = function () {\n            return toLocalDate(this._utcDate).toDateString();\n        };\n        /** @hidden */\n        ZonedDate.prototype.toTimeString = function () {\n            var hours = padNumber(this.getHours());\n            var minutes = padNumber(this.getMinutes());\n            var seconds = padNumber(this.getSeconds());\n            var time = hours + \":\" + minutes + \":\" + seconds;\n            var tzOffset = formatOffset(this.timezoneOffset);\n            var abbrev = abbrTimezone(this.timezone, this._utcDate);\n            if (abbrev) {\n                abbrev = \" (\" + abbrev + \")\";\n            }\n            return time + \" \" + tzOffset + abbrev;\n        };\n        ZonedDate.prototype.toLocaleString = function (locales, options) {\n            return this._localDate.toLocaleString(locales, options);\n        };\n        ZonedDate.prototype.toLocaleDateString = function (locales, options) {\n            return this._localDate.toLocaleDateString(locales, options);\n        };\n        ZonedDate.prototype.toLocaleTimeString = function (locales, options) {\n            return this._localDate.toLocaleTimeString(locales, options);\n        };\n        /** @hidden */\n        ZonedDate.prototype.toUTCString = function () {\n            return this.toTimezone('Etc/UTC').toString();\n        };\n        ZonedDate.prototype[Symbol.toPrimitive] = function (hint) {\n            if (hint === 'string' || hint === 'default') {\n                return this.toString();\n            }\n            return this._localDate.getTime();\n        };\n        /** @hidden */\n        ZonedDate.prototype.valueOf = function () {\n            return this.getTime();\n        };\n        /** @hidden */\n        ZonedDate.prototype.getVarDate = function () {\n            throw new Error('Not implemented.');\n        };\n        /** @hidden */\n        ZonedDate.prototype.format = function (_) {\n            throw new Error('Not implemented.');\n        };\n        /** @hidden */\n        ZonedDate.prototype.formatUTC = function (_) {\n            throw new Error('Not implemented.');\n        };\n        return ZonedDate;\n    }());\n\n    /**\n     * A function that returns all timezones which match the title of the zone.\n     *\n     * @param group - The fully qualified zone title. For example, Central Standard Time.\n     *\n     * @return - Returns the list of all matching timezone names. For example, `[America/Chicago, ...]`.\n     *\n     * @example\n     * ```ts-no-run\n     * zonesPerGroup('(GMT+01:00) Amsterdam, Berlin'); // ['Europe/Amsterdam', 'Europe/Berlin'...]\n     * ```\n     */\n    var zonesPerGroup = function (group) {\n        var titles = timezones.titles;\n        return Object.keys(titles).reduce(function (result, title) {\n            var info = titles[title] || {};\n            return info.group === group ? result.concat(title.split(' ')) : result;\n        }, []);\n    };\n\n    var moveDateToWeekStart = function (date, weekStartDay) {\n        if (weekStartDay !== Day.Monday) {\n            return addDays(prevDayOfWeek(date, weekStartDay), 4);\n        }\n        return addDays(date, (4 - (date.getDay() || 7)));\n    };\n    var calcWeekInYear = function (date, weekStartDay) {\n        var firstWeekInYear = createDate(date.getFullYear(), 0, 1, -6);\n        var newDate = moveDateToWeekStart(date, weekStartDay);\n        var diffInMS = newDate.getTime() - firstWeekInYear.getTime();\n        var days = Math.floor(diffInMS / MS_PER_DAY);\n        return 1 + Math.floor(days / 7);\n    };\n    /**\n     * A function that returns the number of the week within a year, which is calculated in relation to the date.\n     *\n     * For more information, refer to the [**ISO week date**](https://en.wikipedia.org/wiki/ISO_week_date) article.\n     *\n     * @param date - The date used for the week number calculation.\n     * @param weekStartDay - The first day of the week. By default, the first week day is Monday.\n     * @returns - The number of the week within the year.\n     *\n     * @example\n     * ```ts-no-run\n     * weekInYear(new Date(2016, 0, 1)); // Week 53, 2015\n     * weekInYear(new Date(2016, 0, 5)); // Week 1, 2016\n     * weekInYear(new Date(2017, 0, 1)); // Week 52, 2016\n     * weekInYear(new Date(2017, 0, 2)); // Week 1, 2017\n     * ```\n     */\n    var weekInYear = function (date, weekStartDay) {\n        if (weekStartDay === void 0) { weekStartDay = Day.Monday; }\n        date = getDate(date);\n        var prevWeekDate = addDays(date, -7);\n        var nextWeekDate = addDays(date, 7);\n        var weekNumber = calcWeekInYear(date, weekStartDay);\n        if (weekNumber === 0) {\n            return calcWeekInYear(prevWeekDate, weekStartDay) + 1;\n        }\n        if (weekNumber === 53 && calcWeekInYear(nextWeekDate, weekStartDay) > 1) {\n            return 1;\n        }\n        return weekNumber;\n    };\n\n    exports.__meta__ = __meta__;\n    exports.a = createDate;\n    exports.b = addMonths;\n    exports.c = cloneDate;\n    exports.d = addDays;\n    exports.e = dayOfWeek;\n    exports.f = firstDayOfMonth;\n    exports.g = getDate;\n    exports.i = isEqual;\n    exports.l = lastDayOfMonth;\n\n}));\n"]}