{"version":3,"sources":["raw-js/kendo.form.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendo","_globals","Form","this","$","window","ui","NS","Widget","extend","encode","htmlEncode","VALIDATE","VALIDATEFIELD","CHANGE","CLICK","SUBMIT","CLEAR","EQUAL_SET","GROUP","ARIA_DESCRIBEDBY","DATA_STOP","DATA_ROLE","DOT","DATA_ROLE_OTP_INPUT","formStyles","form","horizontal","vertical","field","fieldsContainer","fieldWrap","fieldError","fieldHint","fieldset","layout","legend","label","emptyLabel","optional","buttonsContainer","buttonsEnd","submit","clear","invalid","hidden","formOrientation","init","element","options","that","fn","call","deepExtend","formData","_wrapper","_setFields","_setModel","_renderContainers","renderButtons","_renderButtons","_editable","_renderBoolLabels","_renderFieldsHints","_setEvents","_applyCssClasses","events","name","orientation","validatable","validateOnBlur","validationSummary","errorTemplate","buttonsTemplate","messages","grid","clearButton","items","formatLabel","focusFirst","size","_noLabelfieldTemplate","styles","colSpan","_fieldTemplate","id","encoded","text","_boolLabelTemplate","_groupTemplate","_errorTemplate","message","_hintTemplate","width","height","wrapper","addClass","css","layoutWrapper","_setupLayoutContainer","_flattenFields","fields","concat","item","shift","result","push","apply","_defaultLabel","fieldName","customFormat","length","isFunction","split","join","trim","_formatLabel","isPlainObject","_defaultFields","formDataFields","Object","keys","itemFields","defaultFormDataFields","i","fieldInfo","fieldValue","type","editor","attributes","defaultFields","_fields","parseDate","toString","Editable","editors","_isHidden","optionalText","isHidden","_isAntiForgeryToken","data","ObservableObject","_model","MyModel","Model","validatorOptions","_addEditableMvvmAttributes","editable","kendoEditable","model","clearContainer","skipFocus","target","getKendoEditable","validator","_removeEditableMvvmAttributes","attr","_getItemTemplate","antiForgeryTokenName","_renderField","fieldTemplate","isHorizontal","fieldType","isBoolField","template","_toggleFieldErrorState","state","closest","toggleClass","fieldElement","find","parent","after","fieldWidgetInstance","nextLabelElement","hint","_associateHintContainer","widgetInstance","next","_errorsByName","removeAttribute","insertAfter","input","hintId","nextFocusable","getWidgetFocusableElement","toggleAttribute","_toggleHint","_renderGroup","child","renderedGroup","append","container","targetContainer","_buttonsTemplate","buttons","kendoButton","themeColor","add","appendTarget","layoutContainer","layoutClassNames","appendTo","cols","bind","_validateField","_validate","on","_submit","_clear","_changeHandler","_change","ev","toJSON","valid","error","trigger","preventDefault","errors","value","jsonModel","validate","reset","unbind","isHiddenInput","is","val","hasClass","Upload","clearAllFiles","OtpInput","_emptyValues","set","removeClass","_validateProxy","setOptions","newOptions","destroy","removeAttr","empty","off","cssProperties","registerPrefix","plugin","jQuery","kendo$1","__meta__","category","description","depends","features","default","defineProperty"],"mappings":"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","file":"kendo.form.min.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('kendo.editable.js'), require('kendo.button.js'), require('kendo.otpinput.js')) :\n  typeof define === 'function' && define.amd ? define(['exports', 'kendo.editable', 'kendo.button', 'kendo.otpinput'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.kendo = global.kendo || {}, global.kendo._globals = global.kendo._globals || {}, global.kendo._globals.Form = {})));\n})(this, (function (exports) {\n  const __meta__ = {\n          id: \"form\",\n          name: \"Form\",\n          category: \"web\",\n          description: \"The Form widget.\",\n          depends: [ \"editable\", \"button\" ],\n          features: [{\n              id: \"form-dropdowns\",\n              name: \"DropDowns\",\n              description: \"Support for DropDown editors\",\n              depends: [ \"autocomplete\", \"combobox\", \"multiselect\", \"dropdowntree\", \"multicolumncombobox\" ]\n          }, {\n              id: \"form-datepickers\",\n              name: \"DatePickers\",\n              description: \"Support for DatePicker editors\",\n              depends: [ \"dateinput\", \"datepicker\", \"datetimepicker\", \"timepicker\" ]\n          }, {\n              id: \"form-inputs\",\n              name: \"Inputs\",\n              description: \"Support for Input editors\",\n              depends: [ \"numerictextbox\", \"maskedtextbox\", \"switch\", \"rating\", \"slider\", \"colorpicker\", \"radiogroup\", \"checkboxgroup\", \"textbox\", \"textarea\", \"checkbox\", \"otpinput\" ]\n          }, {\n              id: \"form-editor\",\n              name: \"Editor\",\n              description: \"Support for Editor editor\",\n              depends: [ \"editor\" ]\n          }]\n      };\n\n      (function($, undefined$1) {\n          var kendo = window.kendo,\n              ui = kendo.ui,\n              NS = \".kendoForm\",\n              Widget = ui.Widget,\n              extend = $.extend,\n              encode = kendo.htmlEncode,\n              VALIDATE = \"validate\",\n              VALIDATEFIELD = \"validateField\",\n              VALIDATEINPUT = \"validateInput\",\n              CHANGE = \"change\",\n              CLICK = \"click\" + NS,\n              SUBMIT = \"submit\",\n              CLEAR = \"clear\",\n              MAX_WIDTH = \"max-width\",\n              SET = \"set\",\n              EQUAL_SET = \"equalSet\",\n              GROUP = \"group\",\n              ARIA_DESCRIBEDBY = \"aria-describedby\",\n              DATA_STOP = \"data-stop\",\n              DATA_ROLE = \"data-role\",\n              EDITABLE = \"editable\",\n              FORM = \"form\",\n              DOT = \".\",\n              DATA_ROLE_OTP_INPUT = \"[data-role='otpinput']\",\n              DATA_ROLE_RADIO_GROUP = \"[data-role='radiogroup']\",\n              DATA_ROLE_CHECKBOX_GROUP = \"[data-role='checkboxgroup']\";\n\n          var formStyles = {\n              form: \"k-form\",\n              horizontal: \"k-form-horizontal\",\n              vertical: \"\",\n              field: \"k-form-field\",\n              fieldsContainer: \"k-form-fields-container\",\n              fieldWrap: \"k-form-field-wrap\",\n              fieldError: \"k-form-field-error\",\n              fieldHint: \"k-form-hint\",\n              fieldset: \"k-form-fieldset\",\n              layout: \"k-form-layout\",\n              legend: \"k-form-legend\",\n              label: \"k-label k-form-label\",\n              emptyLabel: \"k-label-empty\",\n              optional: \"k-label-optional\",\n              buttonsContainer: \"k-form-buttons\",\n              buttonsEnd: \"k-buttons-end\",\n              submit: \"k-form-submit\",\n              clear: \"k-form-clear\",\n              invalid: \"k-invalid\",\n              hidden: \"k-hidden\"\n          };\n\n          var formOrientation = {\n              horizontal: \"horizontal\",\n              vertical: \"vertical\"\n          };\n\n          var Form = Widget.extend({\n              init: function(element, options) {\n                  var that = this;\n\n                  Widget.fn.init.call(that, element, options);\n\n                  that.options = kendo.deepExtend({}, that.options, options);\n\n                  if (options && options.formData) {\n                      that.options.formData = options.formData;\n                  }\n\n                  that._wrapper();\n\n                  that._setFields();\n\n                  that._setModel();\n\n                  that._renderContainers();\n\n                  if (that.options.renderButtons) {\n                      that._renderButtons();\n                  }\n\n                  that._editable();\n\n                  that._renderBoolLabels();\n\n                  that._renderFieldsHints();\n\n                  that._setEvents();\n\n                  that._applyCssClasses();\n              },\n\n              events: [\n                  VALIDATEFIELD,\n                  VALIDATE,\n                  CHANGE,\n                  SUBMIT,\n                  CLEAR\n              ],\n\n              options: {\n                  name: \"Form\",\n                  orientation: formOrientation.vertical,\n                  validatable: {\n                      validateOnBlur: true,\n                      validationSummary: false,\n                      errorTemplate: null\n                  },\n                  buttonsTemplate: null,\n                  messages: {\n                      submit: \"Submit\",\n                      clear: \"Clear\",\n                      optional: \"(Optional)\"\n                  },\n                  layout: \"\",\n                  grid: {},\n                  clearButton: true,\n                  formData: {},\n                  items: [],\n                  formatLabel: null,\n                  focusFirst: false,\n                  renderButtons: true,\n                  size: \"medium\"\n              },\n\n              _noLabelfieldTemplate: ({ styles, colSpan, hidden, field })=>\n                                      `<div class='${encode(styles.field)} ${colSpan ? `k-col-span-${encode(colSpan)}` : '' } ${hidden ? encode(styles.hidden) : '' }'>` +\n                                          `<span class='${encode(styles.label)} ${encode(styles.emptyLabel)}'></span>` +\n                                          `<div class='k-form-field-wrap' data-container-for='${encode(field)}'></div>` +\n                                      \"</div>\",\n\n              _fieldTemplate: ({ styles, colSpan, hidden, field, label, id, optional }) =>\n                              `<div class='${encode(styles.field)} ${colSpan ? `k-col-span-${encode(colSpan)}` : ''} ${hidden ? `${encode(styles.hidden)}` : ''}'>` +\n                                  ((label && !hidden) ?\n                                  `<label class='${encode(styles.label)}' for='${encode(id)}' id='${encode(id)}-form-label'>` +\n                                      ((typeof label.encoded != 'undefined' && label.encoded === false) ?\n                                      label.text || label\n                                      : encode(label.text || label)) +\n                                      (label.optional ? `<span class='${encode(styles.optional)}'>${encode(optional)}</span>` : '') +\n                                  \"</label>\"\n                                  : '' ) +\n                                  `<div class='k-form-field-wrap' data-container-for='${encode(field)}'></div>` +\n                              \"</div>\",\n\n              _boolLabelTemplate: ({ styles, colSpan, hidden, field, label, id, optional }) =>\n                              `<label class='k-checkbox-label' for='${encode(id)}' id='${encode(id)}-form-label'>` +\n                                  ((typeof label.encoded != 'undefined' && label.encoded === false) ?\n                                  label.text || label\n                                  : encode(label.text || label)) +\n                                  (label.optional ? `<span class='${encode(styles.optional)}'>${encode(optional)}</span>` : '') +\n                              \"</label>\",\n\n              _groupTemplate: ({ styles, colSpan, label }) =>\n                              `<fieldset class='${encode(styles.fieldset)} ${colSpan ? `k-col-span-${encode(colSpan)}` : ''}'>` +\n                                  `<legend class='${encode(styles.legend)}'>${encode(label.text || label)}</legend>` +\n                              \"</fieldset>\",\n\n              _errorTemplate: ({ field, message }) => `<span class='k-form-error' id='${field}-form-error'><div>${message}</div></span>`,\n\n              _hintTemplate: ({ id, message }) => `<div class='k-form-hint' id='${id}-form-hint'><span>${message}</span></div>`,\n\n              _wrapper: function() {\n                  var that = this,\n                      options = that.options,\n                      formStyles = Form.styles,\n                      width = options.width,\n                      height = options.height;\n\n                  that.wrapper = that.element\n                      .addClass(formStyles.form)\n                      .addClass(formStyles[options.orientation]);\n\n                  if (height) {\n                      that.wrapper.height(height);\n                  }\n\n                  if (width) {\n                      that.wrapper.css(MAX_WIDTH, width);\n                  }\n\n                  that.layoutWrapper = that._setupLayoutContainer(that.wrapper, {\n                      grid: options.grid,\n                      layout: options.layout\n                  });\n              },\n\n              _flattenFields: function(fields) {\n                  var items = [].concat(fields),\n                      item = items.shift(),\n                      result = [],\n                      push = [].push;\n\n                  while (item) {\n                      if (item.items) {\n                          push.apply(items, item.items);\n                      } else {\n                          push.call(result, item);\n                      }\n\n                      item = items.shift();\n                  }\n\n                  return result;\n              },\n\n              _defaultLabel: function(fieldName) {\n                  var that = this,\n                      customFormat = that.options.formatLabel;\n\n                  if (!fieldName.length) {\n                      return;\n                  }\n\n                  if (kendo.isFunction(customFormat)) {\n                      return customFormat(fieldName);\n                  }\n\n                  return fieldName.split(/(.*[a-z])(?=[A-Z])/).join(\" \").trim() + \":\";\n              },\n\n              _formatLabel: function(field, label) {\n                  var that = this,\n                      text = $.isPlainObject(label) ? label.text : label;\n\n                  if (text !== undefined$1) {\n                      return label;\n                  }\n\n                  return that._defaultLabel(field);\n              },\n\n              _defaultFields: function() {\n                  var that = this,\n                      options = that.options,\n                      formDataFields = Object.keys(options.formData || {}),\n                      itemFields = options.items || {},\n                      defaultFormDataFields = [],\n                      field;\n\n                  if (itemFields.length) {\n                      return itemFields;\n                  }\n\n                  for (var i = 0; i < formDataFields.length; i += 1) {\n                      field = formDataFields[i];\n\n                      defaultFormDataFields.push({\n                          field: field,\n                          id: field\n                      });\n                  }\n\n                  return defaultFormDataFields;\n              },\n\n              _setFields: function() {\n                  var that = this,\n                      defaultFields = that._flattenFields(that._defaultFields()),\n                      formData = that.options.formData || {},\n                      fieldInfo, fieldValue, type, editor, attributes;\n\n                  that._fields = [];\n\n                  for (var field in defaultFields) {\n                      fieldInfo = defaultFields[field];\n                      fieldValue = formData[fieldInfo.field];\n\n                      type = typeof fieldInfo.editor === \"string\" ? fieldInfo.editor :\n                          kendo.type(fieldValue ? kendo.parseDate(fieldValue.toString()) || fieldValue : fieldValue);\n\n                      editor = kendo.isFunction(fieldInfo.editor) ? fieldInfo.editor :\n                           ui.Editable.fn.options.editors[type] ? \"\" : fieldInfo.editor;\n\n                      if (!that._isHidden(fieldInfo.editor)) {\n                          if (fieldInfo.label) {\n                              attributes = {\n                                  \"aria-labelledby\": fieldInfo.id || fieldInfo.field + \"-form-label\"\n                              };\n                          } else if (!fieldInfo.attributes || !fieldInfo.attributes[\"aria-label\"]) {\n                              attributes = {\n                                  \"aria-label\": fieldInfo.name || fieldInfo.field\n                              };\n                          }\n                      }\n\n                      fieldInfo = extend(true, {\n                          label: fieldInfo.label || fieldInfo.name || fieldInfo.field,\n                          optionalText: that.options.messages.optional\n                      }, fieldInfo, {\n                          id: fieldInfo.id || fieldInfo.field,\n                          name: fieldInfo.name || fieldInfo.field,\n                          type: type,\n                          editor: editor,\n                          attributes: attributes,\n                          isHidden: that._isHidden(fieldInfo.editor) || that._isAntiForgeryToken(fieldInfo.name || fieldInfo.field)\n                      });\n\n                      that._fields[field] = fieldInfo;\n                  }\n              },\n\n              _setModel: function() {\n                  var that = this,\n                      options = that.options,\n                      formData = options.formData || {};\n\n                  if (options.formData instanceof kendo.data.ObservableObject) {\n                      that._model = formData;\n                      return;\n                  }\n\n                  var MyModel = kendo.data.Model.define({ fields: that._fields });\n\n                  that._model = new MyModel(formData);\n              },\n\n              _editable: function() {\n                  var that = this,\n                      options = that.options,\n                      validatorOptions = that.options.validatable;\n\n                  that._addEditableMvvmAttributes();\n\n                  that.editable = that.wrapper.kendoEditable({\n                      model: that._model,\n                      fields: that._fields || [],\n                      validateOnBlur: validatorOptions.validateOnBlur,\n                      validationSummary: validatorOptions.validationSummary,\n                      errorTemplate: validatorOptions.errorTemplate || that._errorTemplate,\n                      clearContainer: false,\n                      skipFocus: !options.focusFirst,\n                      target: that,\n                      size: options.size\n                  }).getKendoEditable();\n\n                  that.validator = that.editable.validatable;\n\n                  that._removeEditableMvvmAttributes();\n              },\n\n              _addEditableMvvmAttributes: function() {\n                  // required for two mvvm bindable widgets on one element\n                  this.wrapper.attr(DATA_ROLE, EDITABLE);\n              },\n\n              _removeEditableMvvmAttributes: function() {\n                  // required for two mvvm bindable widgets on one element\n                  this.wrapper\n                      .attr(DATA_STOP, true)\n                      .attr(DATA_ROLE, FORM);\n              },\n\n              _getItemTemplate: function(type) {\n                  var that = this,\n                      template;\n\n                  if (type === GROUP) {\n                      template = that._groupTemplate;\n                  } else {\n                      template = that._fieldTemplate;\n                  }\n\n                  return template;\n              },\n\n              _isHidden: function(editor) {\n                  return typeof editor === \"string\" && editor === \"hidden\";\n              },\n\n              _isAntiForgeryToken: function(field) {\n                  return field === ui.Editable.antiForgeryTokenName;\n\n              },\n\n              _renderField: function(item) {\n                  var that = this,\n                      formStyles = Form.styles,\n                      isHorizontal = that.options.orientation === formOrientation.horizontal,\n                      fieldType = that._model.fields && that._model.fields[item.field] && that._model.fields[item.field].type,\n                      isBoolField = fieldType && fieldType === \"boolean\",\n                      fieldTemplate, renderedField;\n\n                  if (isBoolField && isHorizontal && !item.editor) {\n                      fieldTemplate = that._noLabelfieldTemplate;\n                  } else {\n                      fieldTemplate = that._fieldTemplate;\n                  }\n\n                  renderedField = (kendo.template(fieldTemplate)({\n                      styles: formStyles,\n                      id: item.id || item.field || \"\",\n                      field: item.field || \"\",\n                      label: isBoolField && !item.editor ? null : that._formatLabel(item.field, item.label),\n                      colSpan: item.colSpan || \"\",\n                      optional: that.options.messages.optional,\n                      hidden: that._isHidden(item.editor) || that._isAntiForgeryToken(item.field)\n                  }));\n\n                  return renderedField;\n              },\n\n              _toggleFieldErrorState: function(element, state) {\n                  var field = element.closest(DOT + formStyles.field);\n\n                  if (field.length) {\n                      field.toggleClass(formStyles.fieldError, state);\n                  }\n              },\n\n              _renderBoolLabels: function() {\n                  var that = this,\n                      formStyles = Form.styles,\n                      fields = that._fields,\n                      field, fieldElement;\n\n                  for (var i = 0; i < fields.length; i += 1) {\n                      field = fields[i];\n                      fieldElement = that.wrapper.find(\"[name='\" + field.name + \"']:not([type='hidden'])\");\n\n                      if (!fieldElement || !field.label || field.isHidden || field.type !== \"boolean\" || field.editor) {\n                          continue;\n                      }\n\n                      fieldElement.parent().after(kendo.template(that._boolLabelTemplate)({\n                          styles: formStyles,\n                          id: field.id || field.field || \"\",\n                          optional: that.options.messages.optional,\n                          label: that._formatLabel(field.field, field.label)\n                      }));\n                  }\n              },\n\n              _renderFieldsHints: function() {\n                  var that = this,\n                      fields = that._fields,\n                      field, fieldWidgetInstance, fieldElement, nextLabelElement, hint;\n\n                  for (var i = 0; i < fields.length; i += 1) {\n                      field = fields[i];\n                      fieldElement = that.wrapper.find(`[name='${field.name}'],[id='${field.name}']`);\n\n                      if (!fieldElement || !field.hint || field.isHidden) {\n                          continue;\n                      }\n\n                      hint = $(kendo.template(that._hintTemplate)({ message: field.hint || \"\", id: field.id }));\n\n                      that._associateHintContainer(fieldElement, hint.attr(\"id\"));\n\n                      fieldWidgetInstance = kendo.widgetInstance(fieldElement);\n\n                      if (fieldWidgetInstance) {\n                          nextLabelElement = fieldWidgetInstance.element.next(\"label[for='\" + fieldWidgetInstance.element.attr(\"id\") + \"']\");\n                          fieldElement = nextLabelElement.length ? nextLabelElement : fieldWidgetInstance.wrapper;\n                      }\n\n                      if (that.validator._errorsByName(field.name).length) {\n                          hint.toggleClass(formStyles.hidden);\n                          kendo.removeAttribute(fieldElement, ARIA_DESCRIBEDBY, hint.attr(\"id\"));\n                      }\n\n                      hint.insertAfter(fieldElement);\n                  }\n              },\n\n              _associateHintContainer: function(input, hintId) {\n                  var nextFocusable = kendo.getWidgetFocusableElement(input);\n\n                  if (!nextFocusable || !hintId) {\n                      return;\n                  }\n\n                  kendo.toggleAttribute(nextFocusable, ARIA_DESCRIBEDBY, hintId);\n              },\n\n              _toggleHint: function(element, state) {\n                  var that = this,\n                      field = element.closest(DOT + formStyles.field),\n                      hint;\n\n                  if (field.length) {\n                      hint = field.find(DOT + formStyles.fieldHint);\n\n                      if (hint.length) {\n                          hint.toggleClass(formStyles.hidden, state);\n                          that._associateHintContainer(element, hint.attr(\"id\"));\n                      }\n                  }\n              },\n\n              _renderGroup: function(item) {\n                  var that = this,\n                      type = item.type,\n                      child, renderedGroup, fieldsContainer;\n\n                  fieldsContainer = renderedGroup = $(kendo.template(that._getItemTemplate(type))({\n                      styles: formStyles,\n                      label: item.label || \"\",\n                      colSpan: item.colSpan\n                  }));\n\n                  fieldsContainer = that._setupLayoutContainer(renderedGroup, {\n                      grid: item.grid,\n                      layout: item.layout\n                  }) || renderedGroup;\n\n                  for (var i = 0; i < item.items.length; i += 1) {\n                      child = item.items[i];\n                      fieldsContainer.append(that._renderField(child));\n                  }\n\n                  return renderedGroup;\n              },\n\n              _renderContainers: function() {\n                  var that = this,\n                      defaultFields = that._defaultFields(),\n                      columnsLayout = that.options.layout === \"grid\",\n                      targetContainer = columnsLayout ? that.layoutWrapper : that.wrapper,\n                      item, type, container;\n\n                  for (var i = 0; i < defaultFields.length; i += 1) {\n                      item = defaultFields[i];\n                      type = item.type;\n\n                      if (type === GROUP) {\n                          container = that._renderGroup(item);\n                      } else {\n                          container = that._renderField(item);\n                      }\n\n                      targetContainer.append(container);\n                  }\n              },\n\n              _buttonsTemplate: function() {\n                  var options = this.options,\n                      messages = options.messages,\n                      formStyles = Form.styles,\n                      buttons, submit, clear;\n\n                  if (options.buttonsTemplate !== null) {\n                      buttons = kendo.template(options.buttonsTemplate)({\n                          styles: formStyles,\n                          messages: messages\n                      });\n                  } else {\n                      submit = $(\"<button class='\" + formStyles.submit + \"'>\" + encode(messages.submit) + \"</button>\").kendoButton({\n                          type: \"submit\",\n                          themeColor: \"primary\",\n                          size: options.size\n                      });\n\n                      buttons = submit;\n\n                      if (options.clearButton) {\n                          clear = $(\"<button class='\" + formStyles.clear + \"'>\" + encode(messages.clear) + \"</button>\").kendoButton({\n                              size: options.size\n                          });\n\n                          buttons = submit.add(clear);\n                      }\n                  }\n\n                  return buttons;\n              },\n\n              _renderButtons: function() {\n                  var that = this,\n                      wrapper = that.wrapper,\n                      options = that.options,\n                      formStyles = Form.styles,\n                      isHorizontal = options.orientation === formOrientation.horizontal,\n                      buttonsContainer = wrapper.find(DOT + formStyles.buttonsContainer),\n                      buttons;\n\n                  if (!buttonsContainer.length) {\n                      buttonsContainer = $(\"<div />\")\n                          .addClass(formStyles.buttonsContainer)\n                          .addClass(isHorizontal ? formStyles.buttonsEnd : \"\");\n                  }\n\n                  buttons = that._buttonsTemplate();\n\n                  buttonsContainer.append(buttons);\n\n                  that.element.append(buttonsContainer);\n              },\n\n              _setupLayoutContainer: function(appendTarget, options) {\n                  var layout = options.layout,\n                      grid = options.grid,\n                      layoutClassNames = [],\n                      layoutContainer, rowsGap, colsGap;\n\n                  if (typeof layout === \"string\" && layout !== \"\") {\n                      layoutContainer = $(\"<div></div>\")\n                          .appendTo(appendTarget)\n                          .addClass(formStyles.layout);\n\n                      layoutClassNames.push(\"k-d-\" + layout);\n                  }\n\n                  if (layout === \"grid\" && typeof grid === \"object\") {\n                      if (typeof grid.cols === \"number\") {\n                          layoutClassNames.push(\"k-grid-cols-\" + grid.cols);\n                      } else if (typeof grid.cols === \"string\") {\n                          layoutContainer.css(\"grid-template-columns\", grid.cols);\n                      }\n\n                      layoutClassNames.push(\"k-gap-x-\" + grid.cols);\n                  }\n\n                  if (layoutContainer) {\n                      layoutContainer.addClass(layoutClassNames.join(\" \"));\n                  }\n\n                  return layoutContainer;\n              },\n\n              _setEvents: function() {\n                  var that = this,\n                      validator = that.validator;\n\n                  validator\n                      .bind(VALIDATEINPUT, that._validateField.bind(that))\n                      .bind(VALIDATE, that._validate.bind(that));\n\n                  that.wrapper\n                      .on(SUBMIT + NS, that._submit.bind(that))\n                      .on(CLEAR + NS, that._clear.bind(that))\n                      .on(CLICK + NS, DOT + formStyles.clear, that._clear.bind(that));\n\n                  if (!that._changeHandler) {\n                      that._changeHandler = that._change.bind(that);\n                  }\n\n                  that._model.bind(CHANGE, that._changeHandler);\n              },\n\n              _validateField: function(ev) {\n                  var that = this,\n                      data = {\n                          model: that._model.toJSON(),\n                          valid: ev.valid,\n                          field: ev.field,\n                          error: ev.error,\n                          input: ev.input\n                      };\n\n                  that._toggleFieldErrorState(data.input, !data.valid);\n\n                  that._toggleHint(data.input, !data.valid);\n\n                  if (that.trigger(VALIDATEFIELD, data)) {\n                      ev.preventDefault();\n                  }\n              },\n\n              _validate: function(ev) {\n                  var that = this,\n                      data = {\n                          model: that._model.toJSON(),\n                          valid: ev.valid,\n                          errors: ev.errors\n                      };\n\n                  that.trigger(VALIDATE, data);\n              },\n\n              _change: function(ev) {\n                  var that = this,\n                      field = ev.field,\n                      data = {\n                          field: field,\n                          value: that._model[field]\n                      };\n\n                  that.trigger(CHANGE, data);\n              },\n\n              _submit: function(ev) {\n                  var that = this,\n                      jsonModel = that._model.toJSON();\n\n                  if (that.trigger(SUBMIT, { model: jsonModel })) {\n                      ev.preventDefault();\n                  }\n              },\n\n              _clear: function(ev) {\n                  var that = this;\n\n                  ev.preventDefault();\n\n                  that.clear();\n\n                  that.trigger(CLEAR);\n              },\n\n              validate: function() {\n                  var that = this,\n                      validator = that.validator;\n\n                  if (!validator) {\n                      return;\n                  }\n\n                  return validator.validate();\n              },\n\n              clear: function() {\n                  var that = this,\n                      fields = that._fields,\n                      model = that._model,\n                      editable = that.editable,\n                      validateOnBlur = that.validator.options.validateOnBlur;\n\n                  that.validator.reset();\n\n                  if (validateOnBlur) {\n                      model\n                          .unbind(SET)\n                          .unbind(EQUAL_SET);\n                  }\n\n                  for (var i = 0; i < fields.length; i += 1) {\n                      var field = fields[i].field;\n                      var element = that.wrapper.find(\"[name='\" + field + \"']\");\n                      var widgetInstance = kendo.widgetInstance(element);\n                      var isHiddenInput = element.is(\"input[type=hidden]\");\n\n                      if (!element.is(DATA_ROLE_CHECKBOX_GROUP) && !element.is(DATA_ROLE_RADIO_GROUP) && !isHiddenInput || element.is(DATA_ROLE_OTP_INPUT)) {\n                          element.val(\"\");\n                      }\n\n                      if (!widgetInstance && element.is(DATA_ROLE_OTP_INPUT)) {\n                          widgetInstance = kendo.widgetInstance(element);\n                      }\n\n                      if (!widgetInstance && element.hasClass(\"k-hidden\")) {\n                          widgetInstance = kendo.widgetInstance(element.closest(\".k-signature\"));\n                      }\n\n                      if (widgetInstance) {\n                          if (kendo.ui.Upload && widgetInstance instanceof kendo.ui.Upload) {\n                              widgetInstance.clearAllFiles();\n                          } else if (kendo.ui.OtpInput && widgetInstance instanceof kendo.ui.OtpInput) {\n                              widgetInstance._emptyValues();\n                              widgetInstance.value(null);\n                          } else {\n                              widgetInstance.value(null);\n                          }\n                      }\n\n                      that._toggleHint(element, false);\n\n                      if (typeof model[field] === \"boolean\") {\n                          element.val(\"false\");\n                          model.set(field, false);\n                      } else if (!isHiddenInput) {\n                          model.set(field, null);\n                      }\n                  }\n\n                  that.wrapper.find(DOT + formStyles.fieldError)\n                      .removeClass(formStyles.fieldError);\n\n                  if (validateOnBlur) {\n                      model\n                          .bind(SET, editable._validateProxy)\n                          .bind(EQUAL_SET, editable._validateProxy);\n                  }\n              },\n\n              setOptions: function(newOptions) {\n                  var that = this;\n\n                  that.destroy();\n\n                  that.wrapper\n                      .removeClass(formStyles.horizontal)\n                      .removeAttr(DATA_STOP)\n                      .empty();\n\n                  that.init(that.element, newOptions);\n              },\n\n              destroy: function() {\n                  var that = this;\n\n                  that.wrapper.off(NS);\n\n                  if (that._model) {\n                      that._model.unbind(CHANGE, that._changeHandler);\n                      that._changeHandler = null;\n                  }\n\n                  Widget.fn.destroy.call(that.editable);\n\n                  Widget.fn.destroy.call(that);\n\n                  if (that.editable) {\n                      that.editable.destroy();\n                      that.editable = null;\n                  }\n              }\n          });\n\n          kendo.cssProperties.registerPrefix(\"Form\", \"k-form-\");\n\n          ui.plugin(Form);\n\n          extend(true, Form, { styles: formStyles });\n\n    })(window.kendo.jQuery);\n  var kendo$1 = kendo;\n\n  exports.__meta__ = __meta__;\n  exports.default = kendo$1;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}