{"version":3,"sources":["raw-js/kendo.scheduler.monthview.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendo","_globals","SchedulerMonthview","this","$","window","ui","SchedulerView","NS","extend","encode","htmlEncode","getDate","date","MS_PER_DAY","INVERSE_COLOR_CLASS","DAY_TEMPLATE","template","toString","EVENT_WRAPPER_STRING","task","ns","uid","ariaLabel","resources","attr","color","tail","middle","icon","isException","isRecurring","showDelete","messages","destroy","head","resizable","EVENT_TEMPLATE","title","replace","MORE_BUTTON_TEMPLATE","iconClass","MonthGroupedView","Class","init","view","_view","_verticalRowCountForLevel","level","_rowCountForLevel","_horizontalGroupCountForLevel","_columnCountForLevel","_getCalendarRowsLength","cellsPerRow","cellCount","_createRows","start","startIdx","horizontalGroupCount","verticalGroupIndex","isVerticallyGrouped","_isVerticallyGrouped","html","groupIdx","_createRow","_adjustStartDate","addDays","_getContent","content","startDate","_getTimeSlotByPosition","x","y","groupIndex","groups","daySlotByPosition","_nextSlotStartDate","nextDay","_createRowsLayout","rows","groupHeaderTemplate","_createVerticalColumnsLayout","columns","_createColumnsLayout","_verticalGroupCount","_horizontalGroupCount","_columnOffsetForResource","_positionMobileEvent","event","group","range","rangeCount","end","rangeIndex","endDate","occurrence","clone","Date","_createEventElement","_positionEvent","_addDaySlotCollections","groupCount","tableRows","rowMultiplier","rowIndex","collection","addDaySlotCollection","cells","children","cellMultiplier","cellIndex","cell","addDaySlot","_changePeriodGroupIndex","reverse","length","_createResizeHint","left","startSlot","offsetLeft","top","offsetTop","width","innerWidth","height","clientHeight","hint","fn","call","_appendResizeHint","_createMoveHint","endSlot","css","firstChildHeight","options","eventHeight","index","addClass","inverseColor","_appendMoveHint","MonthGroupedByDateView","dateIdx","verticalStart","_groupCount","isLastRow","NUMBER_OF_COLUMNS","cellIdx","_createDateLayout","resource","configuration","data","dataSource","dataIndex","value","getter","dataValueField","obj","text","dataTextField","dataColorField","field","name","className","slice","push","subColumns","startIndex","endIndex","i","currentSlot","_slots","dateRange","daySlotRanges","dateIndex","currentGroupIndex","_daySlotCollections","vertical","selectionGroupIndex","offsetWidth","offsetHeight","slotIdx","slot","isInDateRange","min","max","msValue","scheduler","MonthView","element","that","eventsPerDay","moreButtonHeight","adaptiveSlotHeight","_groupedView","_getGroupedView","isGroupedByDate","_isGroupedByDate","Error","_templates","_editable","_renderLayout","_groups","_updateDirection","selection","ranges","multiple","isSameSlot","isSameCollection","collectionIndex","backward","_changeDate","previous","collections","_getCollections","daySlotCollectionCount","_getNextHorizontalRange","method","horizontalRange","isVertical","_getNextVerticalRange","verticalRange","_changeViewPeriod","newStart","newEnd","pad","_isInRange","events","_continuousSlot","continuousSlot","_changeGroupContinuously","lastGroupIndex","_normalizeHorizontalSelection","_normalizeVerticalSelection","settings","Template","templateSettings","eventTemplate","dayTemplate","dateForTitle","format","selectedDateFormat","_firstDayOfMonth","_lastDayOfMonth","shortDateForTitle","selectedShortDateFormat","mobileDateForTitle","selectedMobileDateFormat","mobileYearForTitle","split","nextDate","previousDate","previousDay","_startDate","_endDate","firstDayOfMonth","lastDayOfMonth","calendarInfo","firstDay","firstVisibleDay","getFullYear","getMonth","getHours","getMinutes","getSeconds","getMilliseconds","getDay","setTime","firstVisibleMonthDay","createLayout","_layout","_content","_initSlotHeight","_initTimesHeight","refreshLayout","_isVirtualized","_tryRenderContent","on","e","offset","currentTarget","_slotByPosition","preventDefault","trigger","_footer","editable","_isMobile","_touchEditable","_mouseEditable","closest","create","resourceInfo","_resourceBySlot","eventInfo","isAllDay","update","threshold","support","mobileOS","android","_addUserEvents","UserEvents","useClickAsTap","browser","edge","filter","tap","_scrolling","target","selectionByElement","columnLevel","columnLevels","rowLevel","rowLevels","verticalGroupCount","groupedView","groupedResources","verticalGroupIdx","_createCalendar","_cachedGroupIndex","find","_virtualContent","append","_calcSlotHeight","dateHeader","eventSpacing","firstCell","firstChild","Math","round","rowHeight","isMobile","table","_sortEventMeta","eventMeta","sort","first","second","order","_adjustSlotHeight","_canAdjustSlotHeight","forEach","week","_events","eventIndex","slots","firstSlot","weekOffsetTop","weekHeight","actualEventCount","slotIndex","meta","adjSlot","adjMeta","indexOf","dirty","slotHeight","firstChildTop","style","more","parentNode","times","isSetHeight","_isSchedulerHeightSet","contentDiv","weekStartDates","_slotIndices","calendarRowsLength","rowIdx","_weekStartDates","classes","isToday","getTime","names","array","idx","concat","shiftArray","days","namesShort","map","inner","resize","eventResources","_formatEventAriaLabel","applyStylesFromKendoAttributes","_isInDateSlot","slotStart","slotEnd","lastSlot","startTime","toUtcTime","endTime","_slotIndex","slotRange","tableEl","contentEl","collidingEvents","createRows","at","container","_isRtl","clientWidth","scrollWidth","appendChild","addEvent","_continuousEvents","eventCount","rightOffset","rowEvents","eventTop","j","eventLength","parseInt","appendTo","_inverseEventColor","_collectionIndex","_startSlotIndex","_startSlot","outerHeight","scrollTop","scrollLeft","ceil","_resizeHint","add","_updateResizeHint","_removeResizeHint","timezone","toLocalDate","last","_updateMoveHint","distance","duration","_removeMoveHint","_moveHint","getElementsByTagName","_addResourceView","MS_PER_HOUR","render","remove","_cachedEvents","Query","dir","toArray","bind","_renderGroups","_renderEvents","_ongoingEvents","slotRanges","rangeStart","rangeEnd","setDate","parentValue","item","itemParentValue","dataParentValueField","itemIdx","_resourceValue","tmp","operator","groupEqFilter","removeClass","off","ongoingEvents","cssClass","enabled","updateInterval","jQuery","kendo$1","__meta__","id","category","description","depends","hidden","default","Object","defineProperty"],"mappings":"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","file":"kendo.scheduler.monthview.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('kendo.scheduler.view.js'), require('kendo.icons.js')) :\n    typeof define === 'function' && define.amd ? define(['exports', 'kendo.scheduler.view', 'kendo.icons'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.kendo = global.kendo || {}, global.kendo._globals = global.kendo._globals || {}, global.kendo._globals.SchedulerMonthview = {})));\n})(this, (function (exports) {\n    const __meta__ = {\n        id: \"scheduler.monthview\",\n        name: \"Scheduler Month View\",\n        category: \"web\",\n        description: \"The Scheduler Month View\",\n        depends: [ \"scheduler.view\", \"icons\" ],\n        hidden: true\n    };\n\n    (function($) {\n        var kendo = window.kendo,\n            ui = kendo.ui,\n            SchedulerView = ui.SchedulerView,\n            NS = \".kendoMonthView\",\n            extend = $.extend,\n            encode = kendo.htmlEncode,\n            getDate = kendo.date.getDate,\n            MS_PER_DAY = kendo.date.MS_PER_DAY,\n            NUMBER_OF_ROWS = 6,\n            NUMBER_OF_COLUMNS = 7,\n            INVERSE_COLOR_CLASS = \"k-event-inverse\",\n            DAY_TEMPLATE = kendo.template(({ date }) => `<span class=\"k-link k-nav-day\">${encode(kendo.toString(date, \"dd\"))}</span>`),\n            EVENT_WRAPPER_STRING = (task) =>\n                `<div role=\"button\" data-${task.ns}uid=\"${task.uid}\" aria-label=\"${encode(task.ariaLabel)}\" ` +\n                (task.resources[0] ? `${kendo.attr(\"style-background-color\")}=\"${task.resources[0].color}\" ${kendo.attr(\"style-border-color\")}=\"${task.resources[0].color}\" class=\"k-event\">` : 'class=\"k-event\">') +\n                    '<span class=\"k-event-actions\">' +\n                        `${task.tail || task.middle ? kendo.ui.icon(\"caret-alt-left\") : ''}` +\n                        `${task.isException() ? kendo.ui.icon(\"arrows-no-repeat\") :\n                        (task.isRecurring() ? kendo.ui.icon(\"arrow-rotate-cw\") : '')}` +\n                    '</span>' +\n                    `${kendo.template(task.template)(task)}` +\n                    '<span class=\"k-event-actions\">' +\n                        `${task.showDelete ? `<a href=\"#\" class=\"k-link k-event-delete\" title=\"${task.messages.destroy}\" aria-label=\"${task.messages.destroy}\">${kendo.ui.icon(\"x\")}</a>` : ''}` +\n                        `${task.head || task.middle ? kendo.ui.icon(\"caret-alt-right\") : ''}` +\n                    '</span>' +\n                    (task.resizable && !task.tail && !task.middle ? '<span class=\"k-resize-handle k-resize-w\"></span>' : '') +\n                    (task.resizable && !task.head && !task.middle ? '<span class=\"k-resize-handle k-resize-e\"></span>' : '') +\n                '</div>',\n            EVENT_TEMPLATE = kendo.template(({ title }) => `<div title=\"${title.replace(/\"/g,\"&#34;\")}\">` +\n                        `<div class=\"k-event-template\">${encode(title)}</div>` +\n                    '</div>');\n\n        var CELL_INNER_SPACING = 2;\n\n        var MORE_BUTTON_TEMPLATE = kendo.template(() =>\n            `<div role=\"button\" aria-label=\"Show all events in Day view.\" class=\"k-more-events k-button k-button-md k-rounded-md k-button-solid k-button-solid-base\">${kendo.ui.icon({ icon: \"more-horizontal\", iconClass: \"k-button-icon\" })}</div>`\n        );\n\n        var MonthGroupedView = kendo.Class.extend({\n            init: function(view) {\n                this._view = view;\n            },\n\n            _verticalRowCountForLevel: function(level) {\n                var view = this._view;\n\n                return view._rowCountForLevel(level);\n            },\n\n            _horizontalGroupCountForLevel: function(level) {\n                var view = this._view;\n\n                return view._columnCountForLevel(level);\n            },\n\n            _getCalendarRowsLength: function(cellsPerRow, cellCount) {\n                return cellCount / cellsPerRow;\n            },\n\n            _createRows: function(start, startIdx, horizontalGroupCount, verticalGroupIndex) {\n                var view = this._view;\n                var cellsPerRow = NUMBER_OF_COLUMNS;\n                var isVerticallyGrouped = view._isVerticallyGrouped();\n                var html = \"\";\n\n                for (var groupIdx = 0; groupIdx < horizontalGroupCount; groupIdx++) {\n                    html += view._createRow(start, startIdx, cellsPerRow, isVerticallyGrouped ? verticalGroupIndex : groupIdx);\n                }\n\n                return html;\n            },\n\n            _adjustStartDate: function(start) {\n                return kendo.date.addDays(start, NUMBER_OF_COLUMNS);\n            },\n\n            _getContent: function(content, startDate, resources) {\n                return content({ date: startDate, resources: resources });\n            },\n\n            _getTimeSlotByPosition: function(x, y, groupIndex) {\n                var group = this._view.groups[groupIndex];\n\n                return group.daySlotByPosition(x, y);\n            },\n\n            _nextSlotStartDate: function(startDate) {\n                return kendo.date.nextDay(startDate);\n            },\n\n            _createRowsLayout: function(resources, rows, groupHeaderTemplate) {\n                var view = this._view;\n\n                return view._createRowsLayout(resources, rows, groupHeaderTemplate);\n            },\n\n            _createVerticalColumnsLayout: function(resources, rows, groupHeaderTemplate, columns) {\n\n                return columns;\n            },\n\n            _createColumnsLayout: function(resources, columns, groupHeaderTemplate) {\n                var view = this._view;\n\n                return view._createColumnsLayout(resources, columns, groupHeaderTemplate);\n            },\n\n            _verticalGroupCount: function(level) {\n                var view = this._view;\n\n                return view._rowCountForLevel(level);\n            },\n\n            _horizontalGroupCount: function(level) {\n                var view = this._view;\n\n                return view._columnCountForLevel(level) / view._columnOffsetForResource(level);\n            },\n\n            _positionMobileEvent: function(event, group, range, rangeCount, start, end, rangeIndex) {\n                var view = this._view;\n\n                if (rangeCount > 1) {\n                    if (rangeIndex === 0) {\n                        end = range.end.endDate();\n                    } else if (rangeIndex == rangeCount - 1) {\n                        start = range.start.startDate();\n                    } else {\n                        start = range.start.startDate();\n                        end = range.end.endDate();\n                    }\n                }\n\n                var occurrence = event.clone({ start: new Date(start), end: new Date(end), head: range.head, tail: range.tail });\n\n                view._positionMobileEvent(range, view._createEventElement(occurrence), group);\n            },\n\n            _positionEvent: function(event, group, range, rangeCount, start, end, rangeIndex) {\n                var view = this._view;\n\n                if (rangeCount > 1) {\n                    if (rangeIndex === 0) {\n                        end = range.end.endDate();\n                    } else if (rangeIndex == rangeCount - 1) {\n                        start = range.start.startDate();\n                    } else {\n                        start = range.start.startDate();\n                        end = range.end.endDate();\n                    }\n                }\n\n                var occurrence = event.clone({ start: start, end: end, head: range.head, tail: range.tail });\n\n                view._positionEvent(range, view._createEventElement(occurrence), group);\n            },\n\n            _addDaySlotCollections: function(groupCount, tableRows, startDate) {\n                var view = this._view;\n                var columnCount = NUMBER_OF_COLUMNS;\n                var rowCount = NUMBER_OF_ROWS;\n\n                for (var groupIndex = 0; groupIndex < groupCount; groupIndex++) {\n                    var cellCount = 0;\n                    var rowMultiplier = 0;\n\n                    if (view._isVerticallyGrouped()) {\n                        rowMultiplier = groupIndex;\n                    }\n\n                    for (var rowIndex = rowMultiplier * rowCount; rowIndex < (rowMultiplier + 1) * rowCount; rowIndex++) {\n                        var group = view.groups[groupIndex];\n                        var collection = group.addDaySlotCollection(kendo.date.addDays(startDate, cellCount), kendo.date.addDays(startDate, cellCount + columnCount));\n\n                        var tableRow = tableRows[rowIndex];\n                        var cells = tableRow.children;\n                        var cellMultiplier = 0;\n\n                        if (!view._isVerticallyGrouped()) {\n                            cellMultiplier = groupIndex;\n                        }\n\n                        for (var cellIndex = cellMultiplier * columnCount; cellIndex < (cellMultiplier + 1) * columnCount; cellIndex++) {\n                            var cell = cells[cellIndex];\n\n                            view.addDaySlot(collection, cell, startDate, cellCount);\n                            cellCount++;\n                        }\n                    }\n                }\n            },\n\n            _changePeriodGroupIndex: function(reverse) {\n                var view = this._view;\n\n                return reverse ? view.groups.length - 1 : 0;\n            },\n\n            _createResizeHint: function(range) {\n                var view = this._view;\n                var left = range.startSlot().offsetLeft;\n                var top = range.start.offsetTop;\n                var width = range.innerWidth();\n                var height = range.start.clientHeight - 2;\n                var hint = SchedulerView.fn._createResizeHint.call(view, left, top, width, height);\n\n                view._appendResizeHint(hint);\n            },\n\n            _createMoveHint: function(range, event) {\n                var view = this._view;\n                var startSlot = range.startSlot();\n                var endSlot = range.endSlot();\n                var hint = view._createEventElement(event.clone({ head: range.head, tail: range.tail }));\n\n                hint.css({\n                    left: startSlot.offsetLeft + 2,\n                    top: startSlot.offsetTop + startSlot.firstChildHeight,\n                    height: (view.options.eventHeight === \"auto\") ? 25 : view.options.eventHeight,\n                    width: range.innerWidth() - (startSlot.index !== endSlot.index ? 3 : 2)\n                });\n\n                hint.addClass(\"k-event-drag-hint\");\n\n                if (event.inverseColor) {\n                    hint.addClass(INVERSE_COLOR_CLASS);\n                }\n\n                view._appendMoveHint(hint);\n            }\n        });\n\n        var MonthGroupedByDateView = kendo.Class.extend({\n            init: function(view) {\n                this._view = view;\n            },\n\n            _verticalRowCountForLevel: function() {\n                return 1;\n            },\n\n            _horizontalGroupCountForLevel: function(level) {\n                var view = this._view;\n\n                return view._columnCountForLevel(level + 1) / NUMBER_OF_COLUMNS;\n            },\n\n            _createRows: function(start, startIdx, horizontalGroupCount) {\n                var view = this._view;\n                var cellsPerRow = NUMBER_OF_COLUMNS;\n                var isVerticallyGrouped = view._isVerticallyGrouped();\n                var html = \"\";\n                var dateIdx = 0;\n\n                if (isVerticallyGrouped) {\n                    var verticalStart = new Date(start);\n                    var groupCount = view._groupCount();\n                    for (dateIdx; dateIdx < NUMBER_OF_ROWS; dateIdx++) {\n                        html += view._createRow(verticalStart, startIdx, groupCount, dateIdx);\n\n                        verticalStart = kendo.date.addDays(verticalStart, cellsPerRow);\n                    }\n                    start = kendo.date.nextDay(start);\n                } else {\n                    for (dateIdx; dateIdx < cellsPerRow; dateIdx++) {\n                        html += view._createRow(start, startIdx, horizontalGroupCount, dateIdx);\n                        start = kendo.date.nextDay(start);\n                    }\n                    start = kendo.date.addDays(start, cellsPerRow);\n                }\n\n                return html;\n            },\n\n            _adjustStartDate: function(start, isLastRow) {\n                var view = this._view;\n                var isVerticallyGrouped = view._isVerticallyGrouped();\n\n                if (isVerticallyGrouped) {\n                    if (isLastRow) {\n                        return kendo.date.addDays(start, NUMBER_OF_COLUMNS * (NUMBER_OF_ROWS - 1) + 1);\n                    } else {\n                        return kendo.date.nextDay(start);\n                    }\n                }\n\n                return kendo.date.addDays(start, NUMBER_OF_COLUMNS);\n            },\n\n            _getContent: function(content, startDate, resources, cellIdx) {\n                if (cellIdx === 0) {\n                    return content({ date: startDate, resources: resources });\n                }\n                return \"\";\n            },\n\n            _getTimeSlotByPosition: function(x, y, groupIndex) {\n                var group = this._view.groups[groupIndex];\n\n                return group.daySlotByPosition(x, y, true);\n            },\n\n            _nextSlotStartDate: function(startDate) {\n                return startDate;\n            },\n\n            _getCalendarRowsLength: function() {\n                var view = this._view;\n                var isVerticallyGrouped = view._isVerticallyGrouped();\n\n                return isVerticallyGrouped ? NUMBER_OF_COLUMNS : NUMBER_OF_ROWS;\n            },\n\n            _createRowsLayout: function(resources, rows, groupHeaderTemplate, columns) {\n                var view = this._view;\n\n                return view._createDateLayout(columns, null, false);\n            },\n\n            _createVerticalColumnsLayout: function(resources, rows, groupHeaderTemplate) {\n                var view = this._view;\n                var resource = resources[0];\n                var configuration = [];\n                var data = resource.dataSource.view();\n\n                for (var dataIndex = 0; dataIndex < data.length * NUMBER_OF_ROWS; dataIndex++) {\n                    var value = kendo.getter(resource.dataValueField)(data[dataIndex % data.length]);\n                    var obj = {\n                        text: groupHeaderTemplate({\n                            text: kendo.htmlEncode(kendo.getter(resource.dataTextField)(data[dataIndex % data.length])),\n                            color: kendo.getter(resource.dataColorField)(data[dataIndex % data.length]),\n                            field: resource.field,\n                            title: resource.title,\n                            name: resource.name,\n                            value: value\n                        }),\n                        className: \"k-slot-cell\",\n                        value: value\n                    };\n\n                    obj.columns = view._createColumnsLayout(resources.slice(1), null, groupHeaderTemplate, null, null, value);\n\n                    configuration.push(obj);\n                }\n\n                return configuration;\n            },\n\n            _createColumnsLayout: function(resources, columns, groupHeaderTemplate, subColumns) {\n                var view = this._view;\n\n                return view._createColumnsLayout(resources, columns, groupHeaderTemplate, subColumns, true);\n            },\n\n            _verticalGroupCount: function(level) {\n                var view = this._view;\n\n                return view._columnCountForLevel(level) / NUMBER_OF_ROWS;\n            },\n\n            _horizontalGroupCount: function(level) {\n                var view = this._view;\n                return view._columnCountForLevel(level) / NUMBER_OF_COLUMNS;\n            },\n\n            _positionMobileEvent: function(event, group, range, rangeCount, start, end) {\n                var view = this._view;\n                var startIndex = range.start.index;\n                var endIndex = range.end.index;\n\n                for (var i = range.start.index; i <= range.end.index; i++) {\n                    var currentSlot = range.collection._slots[i];\n                    var dateRange = group.daySlotRanges(currentSlot.start, currentSlot.start, true)[0];\n\n                    var occurrence = event.clone({\n                        start: i === startIndex ? start : currentSlot.startDate(),\n                        end: i === endIndex ? end : currentSlot.endDate(),\n                        head: i !== endIndex || range.head,\n                        tail: i !== startIndex || range.tail });\n\n                    view._positionMobileEvent(dateRange, view._createEventElement(occurrence), group);\n                }\n            },\n\n            _positionEvent: function(event, group, range, rangeCount, start, end) {\n                var view = this._view;\n                var startIndex = range.start.index;\n                var endIndex = range.end.index;\n\n                for (var i = range.start.index; i <= range.end.index; i++) {\n                    var currentSlot = range.collection._slots[i];\n                    var dateRange = group.daySlotRanges(currentSlot.start, currentSlot.start, true)[0];\n\n                    var occurrence = event.clone({\n                        start: i === startIndex ? start : currentSlot.startDate(),\n                        end: i === endIndex ? end : currentSlot.endDate(),\n                        head: i !== endIndex || range.head,\n                        tail: i !== startIndex || range.tail });\n\n                    view._positionEvent(dateRange, view._createEventElement(occurrence), group);\n                }\n            },\n\n            _addDaySlotCollections: function(groupCount, tableRows, startDate) {\n                var view = this._view;\n                var columnCount = NUMBER_OF_COLUMNS;\n                var rowCount = NUMBER_OF_ROWS;\n                var isVerticallyGrouped = view._isVerticallyGrouped();\n\n                for (var dateIndex = 0; dateIndex < columnCount; dateIndex++) {\n                    for (var rowIndex = 0; rowIndex < rowCount; rowIndex++) {\n                        var groupIndex = 0;\n                        var currentTableIndex = isVerticallyGrouped ? dateIndex : rowIndex;\n                        var tableRow = tableRows[currentTableIndex];\n                        var cells = tableRow.children;\n                        var cellMultiplier = 0;\n\n                        if (!view._isVerticallyGrouped()) {\n                            cellMultiplier = dateIndex;\n                        }\n\n                        for (var cellIndex = cellMultiplier * groupCount; cellIndex < (cellMultiplier + 1) * groupCount; cellIndex++) {\n                            var cellCount = (rowIndex * columnCount) + dateIndex;\n                            var currentCellIndex = isVerticallyGrouped ? cellIndex + (rowIndex * groupCount) : cellIndex;\n                            var cell = cells[currentCellIndex];\n                            var currentGroupIndex = isVerticallyGrouped ? cellIndex : groupIndex;\n                            var group = view.groups[currentGroupIndex];\n                            var collection;\n                            if (dateIndex === 0) {\n                                collection = group.addDaySlotCollection(kendo.date.addDays(startDate, cellCount), kendo.date.addDays(startDate, cellCount + columnCount));\n                            } else {\n                                collection = group._daySlotCollections[rowIndex];\n                            }\n\n                            view.addDaySlot(collection, cell, startDate, cellCount);\n                            groupIndex++;\n                        }\n                    }\n                }\n            },\n\n            _changePeriodGroupIndex: function(reverse, vertical, selectionGroupIndex) {\n                var view = this._view;\n\n                if (vertical && view._isVerticallyGrouped()) {\n                    return reverse ? view.groups.length - 1 : 0;\n                }\n\n                return selectionGroupIndex;\n            },\n\n            _createResizeHint: function(range) {\n                var view = this._view;\n                var left, top, width, height, hint;\n\n                if (view._isVerticallyGrouped()) {\n                left = range.startSlot().offsetLeft;\n                top = range.start.offsetTop;\n                width = range.startSlot().offsetWidth;\n                height = range.endSlot().offsetTop + range.startSlot().offsetHeight - range.startSlot().offsetTop - 2;\n                hint = SchedulerView.fn._createResizeHint.call(view, left, top, width, height);\n\n                view._appendResizeHint(hint);\n                } else {\n                    for (var slotIdx = range.startSlot().index; slotIdx <= range.endSlot().index; slotIdx++) {\n                        var slot = range.collection._slots[slotIdx];\n                        left = slot.offsetLeft;\n                        top = slot.offsetTop;\n                        width = slot.offsetWidth;\n                        height = slot.offsetHeight - 2;\n                        hint = SchedulerView.fn._createResizeHint.call(view, left, top, width, height);\n\n                        view._appendResizeHint(hint);\n                    }\n                }\n            },\n\n            _createMoveHint: function(range, event) {\n                var view = this._view;\n                var startSlot = range.startSlot();\n                var endSlot = range.endSlot();\n\n                for (var slotIdx = startSlot.index; slotIdx <= endSlot.index; slotIdx++) {\n                    var slot = range.collection._slots[slotIdx];\n                    var hint = view._createEventElement(event.clone({ head: range.head, tail: range.tail }));\n\n                    hint.css({\n                        left: slot.offsetLeft,\n                        top: slot.offsetTop + slot.firstChildHeight,\n                        height: (view.options.eventHeight === \"auto\") ? 25 : view.options.eventHeight,\n                        width: slot.offsetWidth - 2\n                    });\n\n                    hint.addClass(\"k-event-drag-hint\");\n\n                    if (event.inverseColor) {\n                        hint.addClass(INVERSE_COLOR_CLASS);\n                    }\n\n                    view._appendMoveHint(hint);\n                }\n            }\n        });\n\n        kendo.ui.scheduler.MonthGroupedView = MonthGroupedView;\n        kendo.ui.scheduler.MonthGroupedByDateView = MonthGroupedByDateView;\n\n        ui.MonthView = SchedulerView.extend({\n            init: function(element, options) {\n                var that = this;\n\n                // Do not allow less than one event\n                if (options.eventsPerDay === 0) {\n                    options.eventsPerDay = 1;\n                }\n\n                // Do not allow 0 height events\n                if (options.eventHeight === 0) {\n                    options.eventHeight = 1;\n                }\n\n                // Do not allow 0 height more-button\n                if (options.moreButtonHeight === 0) {\n                    options.moreButtonHeight = 1;\n                }\n\n                // Do not allow string values other than auto\n                if (typeof options.eventHeight === \"string\" && options.eventHeight !== \"auto\") {\n                    options.eventHeight = 25;\n                }\n\n                // Set adaptiveSlotHeight to true if eventHeight is auto\n                if (options.eventHeight === \"auto\") {\n                    options.adaptiveSlotHeight = true;\n                }\n\n                SchedulerView.fn.init.call(that, element, options);\n                that._groupedView = that._getGroupedView();\n\n                // Exception handling for invalid combinations\n                var isGroupedByDate = this._isGroupedByDate();\n                var adaptiveSlotHeight = this.options.adaptiveSlotHeight;\n                var eventHeight = this.options.eventHeight;\n\n                if (isGroupedByDate === true && adaptiveSlotHeight === true) {\n                    throw new Error(\"Incompatible options: adaptive slot height and date grouping!\");\n                }\n\n                if (isGroupedByDate === true && eventHeight === \"auto\") {\n                    throw new Error(\"Incompatible options: auto event height and date grouping!\");\n                }\n\n                that.title = that.options.title;\n\n                that._templates();\n\n                that._editable();\n\n                that._renderLayout(that.options.date);\n\n                that._groups();\n            },\n\n            name: \"month\",\n\n            _getGroupedView: function() {\n                if (this._isGroupedByDate()) {\n                    return new kendo.ui.scheduler.MonthGroupedByDateView(this);\n                } else {\n                    return new kendo.ui.scheduler.MonthGroupedView(this);\n                }\n            },\n\n            _updateDirection: function(selection, ranges, multiple, reverse, vertical) {\n                if (multiple) {\n                    var startSlot = ranges[0].start;\n                    var endSlot = ranges[ranges.length - 1].end;\n                    var isSameSlot = startSlot.index === endSlot.index;\n                    var isSameCollection = startSlot.collectionIndex === endSlot.collectionIndex;\n                    var updateDirection;\n\n                    if (vertical) {\n                        updateDirection = (isSameSlot && isSameCollection) || isSameCollection;\n                    } else {\n                        updateDirection = isSameSlot && isSameCollection;\n                    }\n\n                    if (updateDirection) {\n                        selection.backward = reverse;\n                    }\n                }\n            },\n\n            _changeDate: function(selection, slot, previous) {\n                var group = this.groups[selection.groupIndex];\n                var collections, index;\n\n                if (previous) {\n                    collections = group._getCollections(group.daySlotCollectionCount());\n                    index = slot.collectionIndex - 1;\n\n                    if (index >= 0) {\n                        return collections[index]._slots[collections[index]._slots.length - 1];\n                    }\n                } else {\n                    collections = group._getCollections(group.daySlotCollectionCount());\n                    index = slot.collectionIndex + 1;\n                    var slotIndex = 0;\n\n                    if (collections[index] && collections[index]._slots[slotIndex]) {\n                        return collections[index]._slots[slotIndex];\n                    }\n                }\n            },\n\n            _getNextHorizontalRange: function(group, method, horizontalRange) {\n                var isVertical = this._isVerticallyGrouped();\n\n                horizontalRange.startSlot = group[method](horizontalRange.startSlot, isVertical);\n                horizontalRange.endSlot = group[method](horizontalRange.endSlot, isVertical);\n\n                return horizontalRange;\n            },\n\n            _getNextVerticalRange: function(group, method, verticalRange, multiple) {\n                var isVertical = this._isVerticallyGrouped() && this._isGroupedByDate();\n\n                verticalRange.startSlot = group[method](verticalRange.startSlot, multiple, isVertical);\n                verticalRange.endSlot = group[method](verticalRange.endSlot, multiple, isVertical);\n\n                return verticalRange;\n            },\n\n            _changeViewPeriod: function(selection, reverse, vertical) {\n                var pad = vertical ? 7 : 1;\n                var newStart, newEnd;\n\n                if (reverse) {\n                    pad *= -1;\n                }\n\n                newStart = kendo.date.addDays(selection.start, pad);\n                newEnd = kendo.date.addDays(selection.end, pad);\n\n                if (this._isInRange(newStart, newEnd)) {\n                    return false;\n                }\n\n                selection.start = newStart;\n                selection.end = newEnd;\n\n                if (!vertical || (vertical && this._isVerticallyGrouped())) {\n                    selection.groupIndex = this._groupedView._changePeriodGroupIndex(reverse, vertical, selection.groupIndex);\n                }\n\n                selection.events = [];\n\n                return true;\n            },\n\n            _continuousSlot: function(selection, ranges, reverse) {\n                var index = selection.backward ? 0 : ranges.length - 1;\n                var group = this.groups[selection.groupIndex];\n\n                return group.continuousSlot(ranges[index].start, reverse);\n            },\n\n            _changeGroupContinuously: function(selection, continuousSlot, multiple, reverse) {\n                if (!multiple) {\n                    var groupIndex = selection.groupIndex;\n                    var lastGroupIndex = this.groups.length - 1;\n                    var vertical = this._isVerticallyGrouped();\n                    var group = this.groups[groupIndex];\n\n                    if (!continuousSlot && vertical) {\n\n                        continuousSlot = group[reverse ? \"lastSlot\" : \"firstSlot\"]();\n\n                        groupIndex += (reverse ? -1 : 1);\n\n                    } else if (continuousSlot && !vertical) {\n                        groupIndex = reverse ? lastGroupIndex : 0;\n                    }\n\n                    if (groupIndex < 0 || groupIndex > lastGroupIndex) {\n                        groupIndex = reverse ? lastGroupIndex : 0;\n                        continuousSlot = null;\n                    }\n\n                    selection.groupIndex = groupIndex;\n                }\n\n                return continuousSlot;\n            },\n\n            _normalizeHorizontalSelection: function(selection, ranges, reverse) {\n                var slot;\n\n                if (reverse) {\n                    slot = ranges[0].start;\n                } else {\n                    slot = ranges[ranges.length - 1].end;\n                }\n\n                return slot;\n            },\n\n            _normalizeVerticalSelection: function(selection, ranges) {\n                var slot;\n\n                if (selection.backward) {\n                    slot = ranges[0].start;\n                } else {\n                    slot = ranges[ranges.length - 1].end;\n                }\n\n                return slot;\n            },\n\n            _templates: function() {\n                var options = this.options,\n                    settings = extend({}, kendo.Template, options.templateSettings);\n\n                this.eventTemplate = kendo.template(EVENT_WRAPPER_STRING);\n                this.dayTemplate = kendo.template(options.dayTemplate, settings);\n                this.groupHeaderTemplate = kendo.template(options.groupHeaderTemplate, settings);\n            },\n\n            dateForTitle: function() {\n                return kendo.format(this.options.selectedDateFormat, this._firstDayOfMonth, this._lastDayOfMonth);\n            },\n\n            shortDateForTitle: function() {\n                return kendo.format(this.options.selectedShortDateFormat, this._firstDayOfMonth, this._lastDayOfMonth);\n            },\n\n            mobileDateForTitle: function() {\n                return kendo.format(this.options.selectedMobileDateFormat, this._firstDayOfMonth, this._lastDayOfMonth);\n            },\n\n            mobileYearForTitle: function() {\n                return this.dateForTitle().split(', ')[1];\n            },\n\n            nextDate: function() {\n                return kendo.date.nextDay(this._lastDayOfMonth);\n            },\n\n            previousDate: function() {\n                return kendo.date.previousDay(this._firstDayOfMonth);\n            },\n\n            startDate: function() {\n                return this._startDate;\n            },\n\n            endDate: function() {\n                return this._endDate;\n            },\n\n            _renderLayout: function(date) {\n                var that = this;\n\n                this._firstDayOfMonth = kendo.date.firstDayOfMonth(date);\n\n                this._lastDayOfMonth = kendo.date.lastDayOfMonth(date);\n\n                this._startDate = firstVisibleMonthDay(date, this.calendarInfo());\n\n                this.createLayout(this._layout());\n\n                this._content();\n\n                this._initSlotHeight();\n\n                this._initTimesHeight();\n\n                this.refreshLayout();\n\n                if (this._isVirtualized()) {\n                    this._tryRenderContent();\n                }\n\n                this.content.on(\"click\" + NS, \".k-nav-day,.k-more-events\", function(e) {\n                    var offset = $(e.currentTarget).offset();\n                    var slot = that._slotByPosition(offset.left, offset.top);\n\n                    e.preventDefault();\n                    that.trigger(\"navigate\", { view: \"day\", date: slot.startDate() });\n                });\n\n                this._footer();\n            },\n\n            _editable: function() {\n                if (this.options.editable) {\n                    if (this._isMobile()) {\n                        this._touchEditable();\n                    } else {\n                        this._mouseEditable();\n                    }\n\n                }\n            },\n\n            _mouseEditable: function() {\n                var that = this;\n                that.element.on(\"click\" + NS, \".k-scheduler-monthview .k-event a:has(.k-i-x),.k-scheduler-monthview .k-event a:has(.k-svg-i-x)\", function(e) {\n                    that.trigger(\"remove\", { uid: $(this).closest(\".k-event\").attr(kendo.attr(\"uid\")) });\n                    e.preventDefault();\n                });\n\n                if (that.options.editable.create !== false) {\n                    that.element.on(\"dblclick\" + NS, \".k-scheduler-monthview .k-scheduler-content > table td\", function(e) {\n                        var offset = $(e.currentTarget).offset();\n                        var slot = that._slotByPosition(offset.left, offset.top);\n\n                        if (slot) {\n                            var resourceInfo = that._resourceBySlot(slot);\n                            that.trigger(\"add\", { eventInfo: extend({ isAllDay: true, start: slot.startDate(), end: slot.startDate() }, resourceInfo ) });\n                        }\n\n                        e.preventDefault();\n                    });\n                }\n\n                if (that.options.editable.update !== false) {\n                    that.element.on(\"dblclick\" + NS, \".k-scheduler-monthview .k-event\", function(e) {\n                        that.trigger(\"edit\", { uid: $(this).closest(\".k-event\").attr(kendo.attr(\"uid\")) });\n                        e.preventDefault();\n                    });\n                }\n            },\n\n            _touchEditable: function() {\n                var that = this;\n                var threshold = 0;\n\n                if (kendo.support.mobileOS.android) {\n                    threshold = 5;\n                }\n\n                if (that.options.editable.create !== false) {\n                    that._addUserEvents = new kendo.UserEvents(that.element, {\n                        threshold: threshold,\n                        useClickAsTap: !kendo.support.browser.edge,\n                        filter: \".k-scheduler-monthview .k-scheduler-content td\",\n                        tap: function(e) {\n                            if (that._scrolling) {\n                                return;\n                            }\n                            var offset = $(e.target).offset();\n                            var slot = that._slotByPosition(offset.left, offset.top);\n\n                            if (slot) {\n                                var resourceInfo = that._resourceBySlot(slot);\n                                that.trigger(\"add\", { eventInfo: extend({ isAllDay: true, start: slot.startDate(), end: slot.startDate() }, resourceInfo ) });\n                            }\n\n                            e.preventDefault();\n                        }\n                    });\n                }\n            },\n\n            selectionByElement: function(cell) {\n                var offset = $(cell).offset();\n                return this._slotByPosition(offset.left, offset.top);\n            },\n\n            _columnCountForLevel: function(level) {\n                var columnLevel = this.columnLevels[level];\n                return columnLevel ? columnLevel.length : 0;\n            },\n\n            _rowCountForLevel: function(level) {\n                var rowLevel = this.rowLevels[level];\n                return rowLevel ? rowLevel.length : 0;\n            },\n\n            _content: function() {\n                var html = '<tbody>';\n                var verticalGroupCount = 1;\n                var groupedView = this._groupedView;\n                var resources = this.groupedResources;\n\n                if (resources.length) {\n                    if (this._isVerticallyGrouped()) {\n                        verticalGroupCount = groupedView._verticalRowCountForLevel(resources.length - 1);\n                    }\n                }\n\n                for (var verticalGroupIdx = 0; verticalGroupIdx < verticalGroupCount; verticalGroupIdx++) {\n                    html += this._createCalendar(verticalGroupIdx);\n                    this._cachedGroupIndex = verticalGroupIdx;\n                }\n\n                html += \"</tbody>\";\n\n                this.content.find(\"table\").html(html);\n            },\n\n            _virtualContent: function() {\n                var that = this;\n                var html = '';\n\n                html += this._createCalendar(++this._cachedGroupIndex);\n\n                that.content.find(\"table tbody\").append(html);\n\n                that._initSlotHeight();\n            },\n\n            _calcSlotHeight: function(eventsPerDay) {\n                var options = this.options;\n                var eventHeight = options.eventHeight;\n                var eventSpacing = options.eventSpacing;\n                var moreButtonHeight = options.moreButtonHeight;\n                var firstCell = this.content.find(\"table tr td\")[0];\n                var dateHeader;\n\n                if (eventHeight === \"auto\" || !firstCell) {\n                    return undefined;\n                }\n\n                dateHeader = firstCell.firstChild;\n\n                return Math.round(\n                    // border of cell\n                    ( firstCell.offsetHeight - firstCell.clientHeight ) +\n\n                    // top padding\n                    dateHeader.offsetTop +\n\n                    // height of date header\n                    dateHeader.offsetHeight +\n\n                    // cell inner spacing\n                    CELL_INNER_SPACING +\n\n                    // all visible events and spacing\n                    ( eventsPerDay * eventHeight ) + ( ( eventsPerDay - 1 ) * eventSpacing ) +\n\n                    // leading space, more button\n                    ( CELL_INNER_SPACING + moreButtonHeight ) +\n\n                    // traling spacing\n                    CELL_INNER_SPACING\n                );\n            },\n\n            _initSlotHeight: function() {\n                var options = this.options;\n                var eventsPerDay = options.eventsPerDay;\n                var eventHeight = options.eventHeight;\n                var isMobile = this._isMobile();\n                var table = this.content.find(\"table\");\n                var rowHeight;\n\n                if (isMobile) {\n                    return;\n                }\n\n                if (typeof eventHeight === \"number\") {\n                    rowHeight = this._calcSlotHeight(eventsPerDay);\n\n                    table.find(\"tr\").height( rowHeight );\n\n                    // table.addClass(\"k-scheduler-table-auto\");\n                }\n            },\n\n            _sortEventMeta: function(slot) {\n                slot.eventMeta.sort(function(first, second) {\n                    return first.order - second.order;\n                });\n            },\n\n            _adjustSlotHeight: function(group) {\n                var that = this;\n                var options = this.options;\n                var eventHeight = options.eventHeight;\n                var eventSpacing = options.eventSpacing;\n                var moreButtonHeight = options.moreButtonHeight;\n\n                if (this._canAdjustSlotHeight !== true) {\n                    return;\n                }\n\n                var weeks = group._daySlotCollections;\n\n                weeks.forEach(function(week) {\n                    var events = week._events;\n                    var eventIndex = 0;\n                    var slots = week._slots;\n                    var firstSlot = slots[0];\n                    var weekOffsetTop = firstSlot.element.offsetTop;\n                    var weekHeight = 0;\n\n                    // Ensure event meta exists in each slot\n                    slots.forEach(function(slot) {\n                        if (!slot.eventMeta) {\n                            slot.eventMeta = [];\n                            slot.actualEventCount = 0;\n                        } else {\n                            slot.actualEventCount = slot.eventMeta.length;\n                        }\n                    });\n\n                    // Ensure spanning event meta is present in all related slots\n                    slots.forEach(function(slot, slotIndex) {\n\n                        for (let i = 0; i < slot.eventMeta.length; i++) {\n                            let meta = slot.eventMeta[i];\n                            // Skip events not starting in this slot\n                            if (meta.startIndex !== slotIndex) {\n                                return;\n                            }\n\n                            // Skip non-spanning events\n                            if (meta.startIndex === meta.endIndex) {\n                                return;\n                            }\n\n                            // Copy spanning event meta in all related slots\n                            slots.slice(slotIndex, meta.endIndex + 1).forEach(function(adjSlot) {\n\n                                var adjMeta = adjSlot.eventMeta;\n\n                                if (adjMeta.indexOf(meta) > -1) {\n                                    return;\n                                }\n\n                                // adjMeta.push(meta);\n                                adjMeta[adjMeta.length] = slot.eventMeta[i];\n                                adjSlot.actualEventCount = adjMeta.length;\n                                adjSlot.dirty = true;\n                            });\n                        }\n\n                        // Set correct order\n                        if (slot.dirty === true) {\n                            that._sortEventMeta(slot);\n                            delete slot.dirty;\n                        }\n\n                    });\n\n                    if (eventHeight === \"auto\") {\n                        slots.forEach(function(slot, slotIndex) {\n                            let slotHeight = slot.firstChildTop + slot.firstChildHeight + CELL_INNER_SPACING;\n                            for (let i = 0; i < slot.eventMeta.length; i++) {\n                                let meta = slot.eventMeta[i];\n                                meta.top = Math.max(meta.top, weekOffsetTop + slotHeight);\n                                slotHeight = (meta.top - weekOffsetTop) + eventSpacing + meta.height;\n                            }\n                        });\n                    }\n\n                    // Position events\n                    slots.forEach(function(slot, slotIndex) {\n                        var slotHeight = slot.firstChildTop + slot.firstChildHeight + CELL_INNER_SPACING;\n\n                        for (let i = 0; i < slot.eventMeta.length; i++) {\n                            let meta = slot.eventMeta[i];\n                            meta.top = Math.max(meta.top, weekOffsetTop + slotHeight);\n                            slotHeight = (meta.top - weekOffsetTop) + eventSpacing + meta.height;\n\n                            if (meta.startIndex === slotIndex) {\n                                events[eventIndex].element[0].style.top = meta.top + \"px\";\n                                eventIndex++;\n                            }\n                        }\n\n                        if (slot.eventMeta.length > 0) {\n                            slotHeight -= eventSpacing;\n                            slotHeight += CELL_INNER_SPACING;\n                        } else {\n                            slotHeight += (eventHeight === \"auto\" ? 25 : eventHeight);\n                        }\n\n                        if (slot.more) {\n                            slot.more[0].style.top = weekOffsetTop + slotHeight + \"px\";\n                            slotHeight += CELL_INNER_SPACING + moreButtonHeight;\n                        }\n\n                        weekHeight = Math.max(weekHeight, slotHeight + 1);\n\n                    });\n\n                    // Update slot size and meta\n                    firstSlot.element.parentNode.style.height = weekHeight + \"px\";\n                    slots.forEach(function(slot) {\n                        slot.offsetTop = weekOffsetTop;\n                        slot.offsetHeight = weekHeight;\n                        slot.clientHeight = weekHeight - 1;\n                    });\n\n                });\n            },\n\n            _initTimesHeight: function() {\n                var that = this;\n                var times = that.times;\n                var isSetHeight = that._isSchedulerHeightSet();\n                var contentDiv = that.content[0];\n\n                if (times && !isSetHeight) {\n                    times.height(contentDiv.clientHeight);\n                }\n            },\n\n            _createCalendar: function(verticalGroupIndex) {\n                var start = this.startDate();\n                var cellCount = NUMBER_OF_COLUMNS * NUMBER_OF_ROWS;\n                var cellsPerRow = NUMBER_OF_COLUMNS;\n                var weekStartDates = [start];\n                var html = '';\n                var horizontalGroupCount = 1;\n                var isVerticallyGrouped = this._isVerticallyGrouped();\n                var groupedView = this._groupedView;\n\n                var resources = this.groupedResources;\n\n                if (resources.length) {\n                    if (!isVerticallyGrouped) {\n                        horizontalGroupCount = groupedView._horizontalGroupCountForLevel(resources.length - 1);\n                    }\n                }\n\n                this._slotIndices = {};\n\n                var calendarRowsLength = groupedView._getCalendarRowsLength(cellsPerRow, cellCount);\n\n                for (var rowIdx = 0; rowIdx < calendarRowsLength; rowIdx++) {\n                    html += \"<tr>\";\n\n                    weekStartDates.push(start);\n\n                    var startIdx = rowIdx * cellsPerRow;\n\n                    html += groupedView._createRows(start, startIdx, horizontalGroupCount, verticalGroupIndex);\n                    start = groupedView._adjustStartDate(start, rowIdx === calendarRowsLength - 1);\n\n                    html += \"</tr>\";\n                }\n\n                this._weekStartDates = weekStartDates;\n                this._endDate = kendo.date.previousDay(start);\n\n                return html;\n            },\n\n            _createRow: function(startDate, startIdx, cellsPerRow, groupIndex) {\n                var that = this;\n                var min = that._firstDayOfMonth;\n                var max = that._lastDayOfMonth;\n                var content = that.dayTemplate;\n                var classes = \"\";\n                var html = \"\";\n                var groupedView = this._groupedView;\n\n                var resources = function() {\n                    return that._resourceBySlot({ groupIndex: groupIndex });\n                };\n\n                for (var cellIdx = 0; cellIdx < cellsPerRow; cellIdx++) {\n                    classes = \"\";\n\n                    if (kendo.date.isToday(startDate)) {\n                        classes += \"k-today\";\n                    }\n\n                    if (!kendo.date.isInDateRange(startDate, min, max)) {\n                        classes += \" k-other-month\";\n                    }\n\n                    html += \"<td \";\n\n                    if (classes !== \"\") {\n                        html += 'class=\"' + classes + '\"';\n                    }\n\n                    html += \">\";\n                    html += groupedView._getContent(content, startDate, resources, cellIdx);\n                    html += \"</td>\";\n\n                    that._slotIndices[getDate(startDate).getTime()] = startIdx + cellIdx;\n\n                    startDate = groupedView._nextSlotStartDate(startDate);\n                }\n\n                return html;\n            },\n\n            _layout: function() {\n                var calendarInfo = this.calendarInfo();\n\n                var weekDayNames = this._isMobile() ? calendarInfo.days.namesShort.map(function(name) {\n                    return name[0];\n                }) : calendarInfo.days.names;\n\n                var names = shiftArray(weekDayNames, calendarInfo.firstDay);\n                var columns = $.map(names, function(value) { return { text: value }; });\n                var resources = this.groupedResources;\n                var rows;\n                var groupedView = this._groupedView;\n\n                if (resources.length) {\n                    if (this._isVerticallyGrouped()) {\n                        var inner = []; //add hidden cells in order to sync the content rows\n                        for (var idx = 0; idx < 6; idx++) {\n                            inner.push({ text: \"<div>&nbsp;</div>\", className: \"k-hidden k-slot-cell\" });\n                        }\n                        rows = groupedView._createRowsLayout(resources, inner, this.groupHeaderTemplate, columns);\n                        columns = groupedView._createVerticalColumnsLayout(resources, inner, this.groupHeaderTemplate, columns);\n\n                    } else {\n                        columns = groupedView._createColumnsLayout(resources, columns, this.groupHeaderTemplate, columns);\n                    }\n                }\n\n                return {\n                    columns: columns,\n                    rows: rows\n                };\n            },\n\n            _createEventElement: function(event) {\n                var options = this.options;\n                var editable = options.editable;\n\n                var isMobile = this._isMobile();\n\n                event.showDelete = editable && editable.destroy !== false && !isMobile;\n                event.resizable = editable && editable.resize !== false && !isMobile;\n                event.ns = kendo.ns;\n                event.resources = this.eventResources(event);\n                event.inverseColor = false;\n                event.messages = options.messages || { destroy: \"Delete\" };\n\n                var element = $(this.eventTemplate($.extend({}, event, {\n                    ariaLabel: this._formatEventAriaLabel(event.title, event.start, event.end, event.isAllDay),\n                    template: this.options.eventTemplate\n                })));\n\n                kendo.applyStylesFromKendoAttributes(element, [\"background-color\", \"border-color\"]);\n\n                return element;\n            },\n\n            _isInDateSlot: function(event) {\n                if (!this.groups || this.groups.length === 0) {\n                    return false;\n                }\n\n                var groups = this.groups[0];\n                var slotStart = groups.firstSlot().start;\n                var slotEnd = groups.lastSlot().end - 1;\n\n                var startTime = kendo.date.toUtcTime(event.start);\n                var endTime = kendo.date.toUtcTime(event.end);\n\n                return (isInDateRange(startTime, slotStart, slotEnd) ||\n                    isInDateRange(endTime, slotStart, slotEnd) ||\n                    isInDateRange(slotStart, startTime, endTime) ||\n                    isInDateRange(slotEnd, startTime, endTime)) &&\n                    (!isInDateRange(endTime, slotStart, slotStart) || isInDateRange(endTime, startTime, startTime) || event.isAllDay );\n            },\n\n            _slotIndex: function(date) {\n                return this._slotIndices[getDate(date).getTime()];\n            },\n\n            _positionMobileEvent: function(slotRange, element, group) {\n                var startSlot = slotRange.start,\n                    tableEl = this.table.find(\".k-scheduler-content .k-scheduler-table\")[0],\n                    contentEl = this.table.find(\".k-scheduler-content\")[0],\n                    offsetLeft;\n\n                if (slotRange.start.offsetLeft > slotRange.end.offsetLeft) {\n                   startSlot = slotRange.end;\n                }\n\n                var startIndex = slotRange.start.index;\n                var endIndex = startIndex;\n\n                var eventCount = 3;\n                var events = SchedulerView.collidingEvents(slotRange.events(), startIndex, endIndex);\n\n                events.push({ element: element, start: startIndex, end: endIndex });\n\n                var rows = SchedulerView.createRows(events);\n\n                var slot = slotRange.collection.at(startIndex);\n\n                var container = slot.container;\n\n                if (!container) {\n                    if (this._isRtl && contentEl.clientWidth < contentEl.scrollWidth) {\n                        // RTL mobile rendering with horizontal scroll\n                        offsetLeft = startSlot.offsetLeft - (tableEl.clientWidth - contentEl.clientWidth) + \"px\";\n                    } else {\n                        offsetLeft = startSlot.offsetLeft + \"px\";\n                    }\n\n                    container = $('<div class=\"k-events-container\"></div>').css({\n                        top: startSlot.offsetTop + startSlot.firstChildTop + startSlot.firstChildHeight + \"px\",\n                        left: offsetLeft,\n                        width: startSlot.offsetWidth + \"px\"\n                    });\n\n                    slot.container = container;\n\n                    this.content[0].appendChild(container[0]);\n                }\n\n                if (rows.length <= eventCount) {\n                    slotRange.addEvent({ element: element, start: startIndex, end: endIndex, groupIndex: startSlot.groupIndex });\n\n                    group._continuousEvents.push({\n                        element: element,\n                        uid: element.attr(kendo.attr(\"uid\")),\n                        start: slotRange.start,\n                        end: slotRange.end\n                    });\n\n                    container[0].appendChild(element[0]);\n                }\n            },\n\n            _positionEvent: function(slotRange, element, group) {\n                var eventHeight = this.options.eventHeight;\n                var eventSpacing = this.options.eventSpacing;\n                var startSlot = slotRange.start;\n\n                if (slotRange.start.offsetLeft > slotRange.end.offsetLeft) {\n                    startSlot = slotRange.end;\n                }\n\n                var startIndex = slotRange.start.index;\n                var endIndex = slotRange.end.index;\n                var eventCount = startSlot.eventCount;\n                var events = SchedulerView.collidingEvents(slotRange.events(), startIndex, endIndex);\n                var rightOffset = startIndex !== endIndex ? 3 : 2;\n\n                events.push({ element: element, start: startIndex, end: endIndex });\n\n                var rows = SchedulerView.createRows(events);\n\n                for (var idx = 0, length = Math.min(rows.length, eventCount); idx < length; idx++) {\n                    var rowEvents = rows[idx].events;\n                    var eventTop = (eventHeight === \"auto\")\n                        ? \"\"\n                        : (\n                            startSlot.offsetTop +\n                            startSlot.firstChildTop +\n                            startSlot.firstChildHeight +\n                            CELL_INNER_SPACING +\n                            idx * (eventHeight + eventSpacing) +\n                            \"px\"\n                        );\n\n                    for (var j = 0, eventLength = rowEvents.length; j < eventLength; j++) {\n                        rowEvents[j].element[0].style.top = eventTop;\n                        rowEvents[j].element.attr(kendo.attr(\"order\"), idx);\n                    }\n                }\n\n                if (rows.length > eventCount) {\n                    for (var slotIndex = startIndex; slotIndex <= endIndex; slotIndex++) {\n                        var collection = slotRange.collection;\n\n                        var slot = collection.at(slotIndex);\n\n                        if (slot.more) {\n                            continue;\n                        }\n\n                        slot.more = $(MORE_BUTTON_TEMPLATE()).css({\n                            width: slot.clientWidth - 2,\n                            left: slot.offsetLeft + 2,\n                            top: (eventHeight === \"auto\")\n                                ? \"\"\n                                : (\n                                    slot.offsetTop +\n                                    slot.firstChildTop +\n                                    slot.firstChildHeight +\n                                    CELL_INNER_SPACING +\n                                    (eventCount * eventHeight) +\n                                    ( (eventCount - 1) * eventSpacing) +\n                                    CELL_INNER_SPACING\n                                )\n                        });\n\n                        this.content[0].appendChild(slot.more[0]);\n                    }\n                } else {\n                    slotRange.addEvent({ element: element, start: startIndex, end: endIndex, groupIndex: startSlot.groupIndex });\n\n                    element[0].style.width = slotRange.innerWidth() - rightOffset + \"px\";\n                    element[0].style.left = startSlot.offsetLeft + 2 + \"px\";\n                    element[0].style.height = (eventHeight === \"auto\") ? \"\" : eventHeight + \"px\";\n\n                    group._continuousEvents.push({\n                        element: element,\n                        uid: element.attr(kendo.attr(\"uid\")),\n                        start: slotRange.start,\n                        end: slotRange.end,\n                        order: parseInt(element.attr(kendo.attr(\"order\")), 10)\n                    });\n\n                    element.appendTo(this.content);\n\n                    this._inverseEventColor(element);\n\n                    // Add event meta to slot\n                    var _collectionIndex = slotRange.start.collectionIndex;\n                    var _startSlotIndex = slotRange.start.index;\n                    var _startSlot = group._daySlotCollections[_collectionIndex]._slots[_startSlotIndex];\n\n                    if (!_startSlot.eventMeta) {\n                        _startSlot.eventMeta = [];\n                    }\n\n                    _startSlot.eventMeta.push({\n                        height: (eventHeight === \"auto\") ? element.outerHeight() : eventHeight,\n                        top: 0,\n                        startIndex: _startSlotIndex,\n                        endIndex: slotRange.end.index,\n                        uid: element.attr(kendo.attr(\"uid\")),\n                        order: parseInt(element.attr(kendo.attr(\"order\")), 10)\n                    });\n                }\n            },\n\n            _slotByPosition: function(x, y) {\n                var offset = this.content.offset();\n\n                x -= offset.left;\n                y -= offset.top;\n                y += this.content[0].scrollTop;\n                x += this.content[0].scrollLeft;\n\n                x = Math.ceil(x);\n                y = Math.ceil(y);\n\n                for (var groupIndex = 0; groupIndex < this.groups.length; groupIndex++) {\n                    var slot = this._groupedView._getTimeSlotByPosition(x, y, groupIndex);\n\n                    if (slot) {\n                        return slot;\n                    }\n                }\n\n                return null;\n            },\n\n            _appendResizeHint: function(hint) {\n                hint.appendTo(this.content);\n\n                this._resizeHint = this._resizeHint.add(hint);\n            },\n\n            _updateResizeHint: function(event, groupIndex, startTime, endTime) {\n                this._removeResizeHint();\n\n                var group = this.groups[groupIndex];\n\n                var ranges = group.ranges(startTime, endTime, true, event.isAllDay);\n\n                for (var rangeIndex = 0; rangeIndex < ranges.length; rangeIndex++) {\n                    this._groupedView._createResizeHint(ranges[rangeIndex]);\n                }\n\n                this._resizeHint.find(\".k-label-top,.k-label-bottom\").text(\"\");\n\n                this._resizeHint.first().addClass(\"k-first\").find(\".k-label-top\").text(kendo.toString(kendo.timezone.toLocalDate(startTime), \"M/dd\"));\n\n                this._resizeHint.last().addClass(\"k-last\").find(\".k-label-bottom\").text(kendo.toString(kendo.timezone.toLocalDate(endTime), \"M/dd\"));\n            },\n\n            _updateMoveHint: function(event, groupIndex, distance) {\n                var start = kendo.date.toUtcTime(event.start) + distance;\n\n                var end = start + event.duration();\n\n                var group = this.groups[groupIndex];\n\n                var ranges = group.ranges(start, end, true, event.isAllDay);\n\n                this._removeMoveHint(event.uid);\n\n                for (var rangeIndex = 0; rangeIndex < ranges.length; rangeIndex++) {\n                    this._groupedView._createMoveHint(ranges[rangeIndex], event);\n                }\n            },\n\n            _appendMoveHint: function(hint) {\n                hint.appendTo(this.content);\n\n                this._moveHint = this._moveHint.add(hint);\n            },\n\n            _groups: function() {\n                var groupCount = this._groupCount();\n                var tableRows = this.content[0].getElementsByTagName(\"tr\");\n                var startDate = this.startDate();\n                this.groups = [];\n\n                for (var idx = 0; idx < groupCount; idx++) {\n                    this._addResourceView(idx);\n                }\n\n                this._groupedView._addDaySlotCollections(groupCount, tableRows, startDate);\n            },\n\n\n            addDaySlot: function(collection, cell, startDate, cellCount) {\n                var start = kendo.date.addDays(startDate, cellCount);\n                var end = kendo.date.MS_PER_DAY;\n                var eventsPerDay = this.options.eventsPerDay;\n\n                if (startDate.getHours() !== start.getHours()) {\n                    end += (startDate.getHours() - start.getHours()) * kendo.date.MS_PER_HOUR;\n                }\n\n                start = kendo.date.toUtcTime(start);\n                end += start;\n\n                collection.addDaySlot(cell, start, end, eventsPerDay);\n            },\n\n            render: function(events) {\n                this.content.children(\".k-event,.k-more-events,.k-events-container\").remove();\n\n                this._cachedEvents = events;\n\n                this._groups();\n\n                events = new kendo.data.Query(events)\n                    .sort([{ field: \"start\", dir: \"asc\" },{ field: \"end\", dir: \"desc\" }])\n                    .toArray()\n                    .filter(function(event) {\n                        return this._isInDateSlot(event);\n                    }.bind(this));\n\n                var resources = this.groupedResources;\n                var isMobile = this._isMobile();\n                var isGroupedByDate = this._isGroupedByDate();\n                var adaptiveSlotHeight = this.options.adaptiveSlotHeight;\n\n                this._canAdjustSlotHeight = isMobile !== true && isGroupedByDate !== true && resources.length === 0 && adaptiveSlotHeight === true;\n\n                if (resources.length) {\n                    this._renderGroups(events, resources, 0, 1);\n                } else {\n                    this._renderEvents(events, 0);\n                }\n\n                this.refreshLayout();\n                this._ongoingEvents(events);\n\n                this.trigger(\"activate\");\n            },\n\n            _renderEvents: function(events, groupIndex) {\n                var group = this.groups[groupIndex];\n                var view = this._groupedView._view;\n                var isMobile = view._isMobile();\n\n                if (!group) {\n                    return;\n                }\n\n                if (!group._continuousEvents) {\n                    group._continuousEvents = [];\n                }\n\n                if (isMobile) {\n\n                    events.forEach(function(event) {\n                        var ranges = group.slotRanges(event, true);\n                        var range = ranges[0];\n                        var start = range.start.start;\n                        var end = range.end.end;\n                        var rangeStart = new Date(range.start.start);\n                        var rangeEnd = ranges[ranges.length - 1].end.end;\n                        var newStart = new Date(rangeStart);\n                        var newEnd = new Date(end);\n\n                        while (rangeStart.getTime() <= rangeEnd &&\n                            event.end >= kendo.timezone.toLocalDate(rangeStart) &&\n                            event.start <= kendo.timezone.toLocalDate(rangeEnd)) {\n                            var dateRange = group.daySlotRanges(newStart.getTime(), newEnd.getTime(), true)[0];\n                            newEnd.setDate(newEnd.getDate() + 1);\n                            newStart.setDate(newStart.getDate() + 1);\n\n                            if (dateRange) {\n                                dateRange.head = null;\n                                dateRange.middle = null;\n                                dateRange.tail = null;\n                                this._groupedView._positionMobileEvent(event, group, dateRange, 1, start, end, 0);\n                            }\n\n                            rangeStart = kendo.date.addDays(rangeStart, 1);\n                        }\n\n                    }.bind(this));\n\n                } else {\n\n                    events.forEach(function(event) {\n                        var range;\n                        var start = event.start;\n                        var end = event.end;\n                        var ranges = group.slotRanges(event, true);\n                        var rangeCount = ranges.length;\n\n                        for (var rangeIndex = 0; rangeIndex < rangeCount; rangeIndex++) {\n                            range = ranges[rangeIndex];\n\n                            this._groupedView._positionEvent(event, group, range, rangeCount, start, end, rangeIndex);\n                        }\n\n                    }.bind(this));\n\n                    if (this._canAdjustSlotHeight === true) {\n                        this._adjustSlotHeight(group);\n                    }\n\n                }\n            },\n\n            _renderGroups: function(events, resources, offset, columnLevel, parentValue) {\n                var resource = resources[0];\n\n                if (resource) {\n                    var view = resource.dataSource.view();\n\n                    view = view.filter(function(item) {\n                        var itemParentValue = kendo.getter(resource.dataParentValueField)(item);\n\n                        return itemParentValue === null || itemParentValue === undefined || itemParentValue === parentValue;\n                    });\n\n                    for (var itemIdx = 0; itemIdx < view.length; itemIdx++) {\n                        var value = this._resourceValue(resource, view[itemIdx]);\n\n                        var tmp = new kendo.data.Query(events).filter({ field: resource.field, operator: SchedulerView.groupEqFilter(value) }).toArray();\n\n                        if (resources.length > 1) {\n                            offset = this._renderGroups(tmp, resources.slice(1), offset++, columnLevel + 1, value);\n                        } else {\n                            this._renderEvents(tmp, offset++);\n                        }\n                    }\n                }\n                return offset;\n            },\n\n            _groupCount: function() {\n                var resources = this.groupedResources;\n                var groupedView = this._groupedView;\n\n                if (resources.length) {\n                    if (this._isVerticallyGrouped()) {\n                        return groupedView._verticalGroupCount(resources.length - 1);\n                    } else {\n                        return groupedView._horizontalGroupCount(resources.length);\n                    }\n                }\n                return 1;\n            },\n\n            _columnOffsetForResource: function(index) {\n                return this._columnCountForLevel(index) / this._columnCountForLevel(index - 1);\n            },\n\n            destroy: function() {\n                if (this.table) {\n                    this.table.removeClass(\"k-scheduler-monthview\");\n                }\n\n                if (this.content) {\n                    this.content.off(NS);\n                }\n\n                if (this.element) {\n                    this.element.off(NS);\n                }\n\n                SchedulerView.fn.destroy.call(this);\n\n                if (this._isMobile() && this.options.editable) {\n                    if (this.options.editable.create !== false) {\n                        this._addUserEvents.destroy();\n                    }\n                }\n            },\n\n            events: [\"remove\", \"add\", \"edit\", \"navigate\"],\n\n            options: {\n                title: \"Month\",\n                name: \"month\",\n                eventHeight: 25,\n                moreButtonHeight: 13,\n                editable: true,\n                selectedDateFormat: \"{0:y}\",\n                selectedShortDateFormat: \"{0:y}\",\n                selectedMobileDateFormat: \"{0:MMMM}\",\n                groupHeaderTemplate: ({ text }) => text,\n                dayTemplate: DAY_TEMPLATE,\n                eventTemplate: EVENT_TEMPLATE,\n                eventsPerDay: 2,\n                adaptiveSlotHeight: false,\n                eventSpacing: 3,\n                ongoingEvents: {\n                    cssClass: null,\n                    enabled: true,\n                    updateInterval: 60000\n                }\n            }\n        });\n\n\n        function shiftArray(array, idx) {\n            return array.slice(idx).concat(array.slice(0, idx));\n        }\n\n        function firstVisibleMonthDay(date, calendarInfo) {\n            var firstDay = calendarInfo.firstDay,\n                firstVisibleDay = new Date(date.getFullYear(), date.getMonth(), 0, date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n\n            while (firstVisibleDay.getDay() != firstDay) {\n                kendo.date.setTime(firstVisibleDay, -1 * MS_PER_DAY);\n            }\n\n            return firstVisibleDay;\n        }\n\n        function isInDateRange(value, min, max) {\n            var msMin = min,\n                msMax = max,\n                msValue;\n\n            msValue = value;\n\n            return msValue >= msMin && msValue <= msMax;\n        }\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    exports.__meta__ = __meta__;\n    exports.default = kendo$1;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}