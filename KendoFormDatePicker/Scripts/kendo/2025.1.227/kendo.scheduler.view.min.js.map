{"version":3,"sources":["raw-js/kendo.scheduler.view.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendo","_globals","SchedulerView","this","ui","scheduler","$","window","getDate","date","Widget","outerHeight","_outerHeight","keys","ONGOING_CLASS","math","Math","SPACE","levels","values","key","result","collect","depth","level","idx","length","push","table","tableRows","className","trim","join","ResourceView","Class","extend","init","index","isRtl","enforceAllDaySlot","_index","_timeSlotCollections","_daySlotCollections","_isRtl","_enforceAllDaySlot","addTimeSlotCollection","startDate","endDate","_addCollection","addDaySlotCollection","collections","collection","SlotCollection","timeSlotCollectionCount","daySlotCollectionCount","_refreshSlotCollections","slotCollections","slotCollectionIndex","collectionIndex","refresh","daySlotByPosition","x","y","byDate","_slotByPosition","timeSlotByPosition","slotIndex","count","nextSlot","slot","at","width","offsetWidth","height","offsetHeight","horizontalEnd","offsetLeft","verticalEnd","offsetTop","timeSlotRanges","startTime","endTime","firstIndex","lastIndex","start","_startSlot","inRange","end","_endSlot","MS_PER_DAY","first","last","_continuousRange","TimeSlotRange","daySlotRanges","isAllDay","DaySlotRange","range","startSlot","endSlot","startIndex","endIndex","ranges","head","tail","slotRanges","event","isDay","_startTime","toUtcTime","_endTime","undefined","isMultiDay","_startCollection","startInRange","_endCollection","endInRange","_getCollections","continuousSlot","reverse","pad","isDaySlot","firstSlot","lastSlot","upSlot","keepCollection","groupByDateVertically","that","_verticalSlot","downSlot","leftSlot","_horizontalSlot","rightSlot","step","swapCollection","_collection","multiday","time","_start","slotByStartDate","slotByEndDate","getSlotCollection","getTimeSlotCollection","getDaySlotCollection","SlotRange","options","innerHeight","events","addEvent","outerRect","snap","_rect","property","top","bottom","left","right","support","element","startOffset","startSlotDuration","endOffset","endSlotDuration","round","innerRect","innerWidth","groupIndex","_slots","_events","_end","_groupIndex","_collectionIndex","allday","addTimeSlot","isHorizontal","TimeSlot","addDaySlot","eventCount","DaySlot","Slot","clientWidth","clientHeight","timezone","toLocalDate","fn","apply","arguments","offsetX","rtl","offset","difference","duration","floor","children","firstChild","firstChildHeight","firstChildTop","Date","rangeIndex","eventElement","slotIndexEnd","call","_normalizeOptions","_initDefaultTools","_scrollbar","scrollbar","_resizeHint","_moveHint","_cellId","guid","_resourcesForGroups","_selectedSlots","attr","messages","ariaEventLabel","on","to","allDay","prefix","visibleEndDate","_defaultTools","todayMobile","type","fillMode","text","today","click","_footerTodayClickHandler","bind","attributes","class","fulldayDesktop","icon","showWorkHours","showFullDay","showWorkDay","toggleFullDay","noop","fulldayMobile","setMilliseconds","workDayStart","workDayEnd","_isMobile","mobile","mobileOS","_addResourceView","resourceView","groups","_refreshResourceViews","i","dateForTitle","format","selectedDateFormat","shortDateForTitle","selectedShortDateFormat","mobileDateForTitle","selectedMobileDateFormat","_changeGroup","selection","previous","_isGroupedByDate","_changeDate","group","_changeGroupContinuously","_changeViewPeriod","_isInRange","newStart","newEnd","min","max","_horizontalSlots","multiple","method","horizontalRange","isVertical","_isVerticallyGrouped","_normalizeHorizontalSelection","tempSlot","_getNextHorizontalRange","_continuousSlot","_verticalSlots","verticalRange","_normalizeVerticalSelection","_getNextVerticalRange","e","preventDefault","currentDate","timezoneOffset","convert","getTimezoneOffset","trigger","view","name","action","_footerItems","items","_footer","footer","html","appendTo","kendoToolBar","resizable","constrainSelection","move","shift","handled","verticalByDate","slots","DOWN","UP","_updateDirection","LEFT","RIGHT","backward","moveToEventInGroup","selectedEvents","prev","lastSelected","_continuousEvents","uid","inArray","found","moveToEvent","allEvents","_getAllEvents","uniqueAllEvents","_getUniqueEvents","sortedEvents","_getSortedEvents","eventIndex","_getNextEventIndexBySlot","_getStartIdx","_getSelectedSlot","current","candidate","_current","content","has","_scrollTo","select","clearSelection","_selectEvents","_selectSlots","tempIndex","slotStartDate","eventStartDate","getTime","selectedEventIndex","each","concat","exists","j","sort","second","firstStartDate","secondStartDate","cell","replace","selectedStateRegExp","groupEvent","groupEvents","add","indexOf","addClass","addDays","_resourceValue","resource","item","valuePrimitive","getter","dataValueField","_setResourceValue","groupLevelMember","value","setter","field","_resourceBySlot","resources","groupedResources","passedChildren","numberOfChildren","resourceIndex","groupOptions","nestedMember","orientation","rowLevels","columnLevels","dateGroupCompensation","groupLevel","_createResizeHint","css","_removeResizeHint","remove","_removeMoveHint","filter","container","elementOffset","elementOffsetDir","containerScroll","scrollTop","containerOffsetDir","bottomDistance","_inverseEventColor","eventColor","eventColorIsDark","Color","isDark","eventBackground","_eventTmpl","template","wrapper","settings","Template","templateSettings","paramName","state","storage","tmpl","eventResources","data","dataSource","eventResource","dataIndex","get","resourceColor","dataColorField","title","dataTextField","color","createLayout","layout","allDayIndex","rows","allDaySlot","splice","_isVirtualized","_trimRowLevels","rowCount","find","append","_topSection","_bottomSection","_updateDomRowLevels","_groupOrientation","_outerWidth","_scroller","virtual","levelMarker","lastGroup","cachedRowLevels","_hasContentToRender","stopAtLevel","parentLevel","parentValue","rowLevelIndex","stop","createNextLayout","trimmedRowLevels","clone","_height","_times","rowSpan","parseInt","_virtualContent","render","_cachedEvents","_tryRenderContent","bufferHeight","_isSchedulerHeightSet","initialHeight","el","style","groupCells","times","_rowLevelIndices","toArray","map","refreshLayout","toolbar","headerHeight","paddingDirection","eq","datesHeader","timesHeader","datesHeaderRows","contentDiv","scrollbarWidth","kineticScrollNeeded","timesTable","removeClass","thElm","columnLevelCount","_datesHeader","dateGroup","closest","wrap","parent","scrollLeft","touchScroller","avoidScrolling","target","movable","_touchScroller","scrollElement","sender","groupIdx","groupLength","_createDateLayout","dates","inner","createDateLayoutConfiguration","_createColumnsLayout","createLayoutConfiguration","_createRowsLayout","selectionByElement","removeAttr","destroy","_ongoingTimer","clearInterval","getKendoToolBar","calendarInfo","getCulture","calendars","standard","prevGroupSlot","nextGroupSlot","_eventOptionsForMove","_updateEventForResize","_updateEventForSelection","_innerElements","countInner","innerCollection","innerSpan","innerEls","isMobile","rowIndex","Array","split","rowHeaderRows","rowsBefore","currentRow","rowspan","columnIndex","dateTableRows","columnLevelIndex","th","column","colspan","allDayTableRows","lastLevel","td","cellContent","applyStylesFromKendoAttributes","_formatEventAriaLabel","labelText","labelMessages","sameDate","toString","_ongoingEvents","interval","ongoingOptions","ongoingEvents","enabled","_ongoingUpdater","updateInterval","isNaN","setInterval","currentTime","ongoingClass","cssClass","_updateOngoing","useLocalTimezone","forEach","appointment","re","processor","parts","channels","formats","resolveColor","process","exec","r","g","b","normalizeByte","_createColumns","eventElements","columns","eventRange","zeroWidthEventOffset","columnLength","endOverlaps","configuration","obj","minorTicks","itemParentValue","dataParentValueField","htmlEncode","slice","prototype","charAt","substr","toLowerCase","namedColors","percBrightness","sqrt","aqua","azure","beige","black","blue","brown","coral","cyan","darkblue","darkcyan","darkgray","darkgreen","darkorange","darkred","dimgray","fuchsia","gold","goldenrod","gray","green","greenyellow","indigo","ivory","khaki","lightblue","lightgrey","lightgreen","lightpink","lightyellow","lime","limegreen","linen","magenta","maroon","mediumblue","navy","olive","orange","orangered","orchid","pink","plum","purple","red","royalblue","salmon","silver","skyblue","slateblue","slategray","snow","steelblue","tan","teal","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","createColumns","createRows","collidingEvents","elements","slotStart","slotEnd","eventsForSlot","groupEqFilter","isArray","ObservableArray","jQuery","kendo$1","__meta__","id","category","description","depends","hidden","default","Object","defineProperty"],"mappings":"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","file":"kendo.scheduler.view.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('kendo.core.js'), require('kendo.toolbar.js')) :\n    typeof define === 'function' && define.amd ? define(['exports', 'kendo.core', 'kendo.toolbar'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.kendo = global.kendo || {}, global.kendo._globals = global.kendo._globals || {}, global.kendo._globals.SchedulerView = {})));\n})(this, (function (exports) {\n    const __meta__ = {\n        id: \"scheduler.view\",\n        name: \"Scheduler View\",\n        category: \"web\",\n        description: \"The Scheduler Common View\",\n        depends: [ \"core\", \"toolbar\" ],\n        hidden: true\n    };\n        kendo.ui.scheduler = {};\n\n    (function($) {\n        var kendo = window.kendo,\n            ui = kendo.ui,\n            getDate = kendo.date.getDate,\n            Widget = ui.Widget,\n            outerHeight = kendo._outerHeight,\n            keys = kendo.keys,\n            NS = \".kendoSchedulerView\",\n            INVERSE_COLOR_CLASS = \"k-event-inverse\",\n            ONGOING_CLASS = \"k-event-ongoing\",\n            MIN_HORIZONTAL_SCROLL_SIZE = 1024,\n            math = Math,\n            SPACE = \" \",\n            DOT = \".\";\n\n        function levels(values, key) {\n            var result = [];\n\n            function collect(depth, values) {\n                values = values[key];\n\n                if (values) {\n                    var level = result[depth] = result[depth] || [];\n\n                    for (var idx = 0; idx < values.length; idx++) {\n                        level.push(values[idx]);\n                        collect(depth + 1, values[idx]);\n                    }\n                }\n            }\n\n            collect(0, values);\n\n            return result;\n        }\n\n        function table(tableRows, className) {\n            if (!tableRows.length) {\n                return \"\";\n            }\n\n            return '<table role=\"presentation\" class=\"' + kendo.trim('k-scheduler-table ' + (className || \"\")) + '\">' +\n                   '<tr>' +\n                        tableRows.join(\"</tr><tr>\") +\n                   '</tr>' +\n                   '</table>';\n        }\n\n        function allDayTable(tableRows, className) {\n            if (!tableRows.length) {\n                return \"\";\n            }\n\n            return `<div ${kendo.attr(\"style-position\")}=\"relative\">${table(tableRows, className)}</div>`;\n        }\n\n        function timesHeader(columnLevelCount, allDaySlot, rowCount) {\n            var tableRows = [];\n\n            if (rowCount > 0) {\n                for (var idx = 0; idx < columnLevelCount; idx++) {\n                    tableRows.push(\"<th class='k-scheduler-cell'>&#8203;</th>\");\n                }\n            }\n\n            if (allDaySlot) {\n                tableRows.push('<th class=\"k-scheduler-times-all-day k-scheduler-cell\">' + allDaySlot.text + '</th>');\n            }\n\n            if (rowCount < 1) {\n               return $();\n            }\n\n            return $('<div class=\"k-scheduler-times\">' + table(tableRows) + '</div>');\n        }\n\n        function content() {\n            return $(\n                '<div class=\"k-scheduler-content\">' +\n                    '<table role=\"presentation\" class=\"k-scheduler-table\"></table>' +\n                '</div>'\n            );\n        }\n        var HINT = '<div class=\"k-marquee k-scheduler-marquee\">' +\n                        '<div class=\"k-marquee-color\"></div>' +\n                        '<div class=\"k-marquee-text\">' +\n                            '<div class=\"k-label-top\"></div>' +\n                            '<div class=\"k-label-bottom\"></div>' +\n                        '</div>' +\n                    '</div>';\n\n\n        var ResourceView = kendo.Class.extend({\n            init: function(index, isRtl, enforceAllDaySlot) {\n                this._index = index;\n                this._timeSlotCollections = [];\n                this._daySlotCollections = [];\n                this._isRtl = isRtl;\n                this._enforceAllDaySlot = enforceAllDaySlot;\n            },\n\n            addTimeSlotCollection: function(startDate, endDate) {\n                return this._addCollection(startDate, endDate, this._timeSlotCollections);\n            },\n\n            addDaySlotCollection: function(startDate, endDate) {\n                return this._addCollection(startDate, endDate, this._daySlotCollections);\n            },\n\n            _addCollection: function(startDate, endDate, collections) {\n                var collection = new SlotCollection(startDate, endDate, this._index, collections.length);\n\n                collections.push(collection);\n\n                return collection;\n            },\n\n            timeSlotCollectionCount: function() {\n                return this._timeSlotCollections.length;\n            },\n\n            daySlotCollectionCount: function() {\n                return this._daySlotCollections.length;\n            },\n\n            _refreshSlotCollections: function() {\n                var slotCollections = [this._timeSlotCollections || [], this._daySlotCollections || []];\n\n                for (var slotCollectionIndex = 0; slotCollectionIndex < slotCollections.length; slotCollectionIndex++) {\n                    var collections = slotCollections[slotCollectionIndex];\n                    for (var collectionIndex = 0; collectionIndex < collections.length; collectionIndex++) {\n                        var collection = collections[collectionIndex];\n                        collection.refresh();\n                    }\n                }\n            },\n\n            daySlotByPosition: function(x, y, byDate) {\n                return this._slotByPosition(x, y, this._daySlotCollections, byDate);\n            },\n\n            timeSlotByPosition: function(x, y, byDate) {\n                return this._slotByPosition(x, y, this._timeSlotCollections, byDate);\n            },\n\n            _slotByPosition: function(x, y, collections, byDate) {\n                for (var collectionIndex = 0; collectionIndex < collections.length; collectionIndex++) {\n                    var collection = collections[collectionIndex];\n\n                    for (var slotIndex = 0; slotIndex < collection.count(); slotIndex++) {\n                        var slot = collection.at(slotIndex);\n                        var width = slot.offsetWidth;\n                        var height = slot.offsetHeight;\n                        var nextSlot;\n\n                        var horizontalEnd = slot.offsetLeft + width;\n                        var verticalEnd = slot.offsetTop + height;\n\n                        if (!byDate) {\n                             nextSlot = collection.at(slotIndex + 1);\n                        }\n\n                        if (nextSlot) {\n                            if (nextSlot.offsetLeft != slot.offsetLeft) {\n                                if (this._isRtl) {\n                                    horizontalEnd = slot.offsetLeft + (slot.offsetLeft - nextSlot.offsetLeft);\n                                } else {\n                                    horizontalEnd = nextSlot.offsetLeft;\n                                }\n                            } else {\n                                verticalEnd = nextSlot.offsetTop;\n                            }\n                        }\n\n                        if (x >= slot.offsetLeft && x < horizontalEnd &&\n                            y >= slot.offsetTop && y < verticalEnd) {\n                            return slot;\n                        }\n                    }\n                }\n             },\n\n            refresh: function() {\n                var collectionIndex;\n\n                for (collectionIndex = 0; collectionIndex < this._daySlotCollections.length; collectionIndex++) {\n                    this._daySlotCollections[collectionIndex].refresh();\n                }\n\n                for (collectionIndex = 0; collectionIndex < this._timeSlotCollections.length; collectionIndex++) {\n                    this._timeSlotCollections[collectionIndex].refresh();\n                }\n            },\n\n            timeSlotRanges: function(startTime, endTime) {\n                var collections = this._timeSlotCollections;\n                var start = this._startSlot(startTime, collections);\n                var firstIndex, lastIndex;\n\n                if (!start.inRange && startTime >= start.slot.end) {\n                    firstIndex = start.slot.collectionIndex + 1;\n                    start = null;\n                }\n\n                var end = start;\n\n                if (startTime < endTime) {\n                    end = this._endSlot(endTime, collections);\n                }\n\n                if (end && !end.inRange && endTime <= end.slot.start) {\n                    lastIndex = end.slot.collectionIndex;\n\n                    if (endTime === end.slot.start && ((start && lastIndex > start.slot.collectionIndex) || (lastIndex > firstIndex))) {\n                        lastIndex -= 1;\n                    }\n\n                    end = null;\n                }\n\n                if (start === null && end === null) {\n                    if (endTime - startTime < kendo.date.MS_PER_DAY) {\n                        return [];\n                    } else {\n                        start = {\n                            inRange: true,\n                            slot: collections[firstIndex].first()\n                        };\n\n                        end = {\n                            inRange: true,\n                            slot: collections[lastIndex].last()\n                        };\n                    }\n                }\n\n                if (start === null) {\n                    if (end.slot.end <= startTime) {\n                        return [];\n                    }\n\n                    start = {\n                        inRange: true,\n                        slot: (collections[firstIndex] || collections[end.slot.collectionIndex]).first()\n                    };\n                }\n\n                if (end === null) {\n                    if (start.slot.start >= endTime) {\n                        return [];\n                    }\n\n                    end = {\n                        inRange: true,\n                        slot: (collections[lastIndex] || collections[start.slot.collectionIndex]).last()\n                    };\n                }\n\n                return this._continuousRange(TimeSlotRange, collections, start, end);\n            },\n\n            daySlotRanges: function(startTime, endTime, isAllDay) {\n                var collections = this._daySlotCollections;\n\n                var start = this._startSlot(startTime, collections, isAllDay);\n\n                if (!start.inRange && startTime >= start.slot.end) {\n                    start = null;\n                }\n\n                var end = start;\n\n                if (startTime < endTime) {\n                    end = this._endSlot(endTime, collections, isAllDay);\n                }\n\n                if (end && !end.inRange && endTime <= end.slot.start) {\n                    end = null;\n                }\n\n                if (start === null && end === null) {\n                    return [];\n                }\n\n                if (start === null) {\n                    if (end.slot.end <= startTime) {\n                        return [];\n                    }\n\n                    do {\n                        startTime += kendo.date.MS_PER_DAY;\n                        start = this._startSlot(startTime, collections, isAllDay);\n                    } while (!start.inRange && startTime >= start.slot.end);\n                }\n\n                if (end === null) {\n                    if (start.slot.start >= endTime) {\n                        return [];\n                    }\n\n                    do {\n                        endTime -= kendo.date.MS_PER_DAY;\n                        end = this._endSlot(endTime, collections, isAllDay);\n                    } while (!end.inRange && endTime <= end.slot.start);\n                }\n\n                return this._continuousRange(DaySlotRange, collections, start, end);\n            },\n\n            _continuousRange: function(range, collections, start, end) {\n                var startSlot = start.slot;\n                var endSlot = end.slot;\n\n                var startIndex = startSlot.collectionIndex;\n                var endIndex = endSlot.collectionIndex;\n\n                var ranges = [];\n\n                for (var collectionIndex = startIndex; collectionIndex <= endIndex; collectionIndex++) {\n                    var collection = collections[collectionIndex];\n\n                    var first = collection.first();\n                    var last = collection.last();\n                    var head = false;\n                    var tail = false;\n\n                    if (collectionIndex == startIndex) {\n                        tail = !start.inRange;\n                    }\n\n                    if (collectionIndex == endIndex) {\n                        head = !end.inRange;\n                    }\n\n                    if (first.start < startSlot.start) {\n                        first = startSlot;\n                    }\n\n                    if (last.start > endSlot.start) {\n                        last = endSlot;\n                    }\n\n                    if (startIndex < endIndex) {\n                        if (collectionIndex == startIndex) {\n                            head = true;\n                        } else if (collectionIndex == endIndex) {\n                            tail = true;\n                        } else {\n                            head = tail = true;\n                        }\n                    }\n\n                    ranges.push(new range({\n                        start: first,\n                        end: last,\n                        collection: collection,\n                        head: head,\n                        tail: tail\n                    }));\n                }\n\n                return ranges;\n            },\n\n            slotRanges: function(event, isDay) {\n                var startTime = event._startTime || kendo.date.toUtcTime(event.start);\n                var endTime = event._endTime || kendo.date.toUtcTime(event.end);\n\n                if (isDay === undefined) {\n                    if (this._enforceAllDaySlot) {\n                        isDay = event.isMultiDay();\n                    } else {\n                        isDay = event.isAllDay;\n                    }\n                }\n\n                if (isDay) {\n                    return this.daySlotRanges(startTime, endTime, event.isAllDay);\n                }\n\n                return this.timeSlotRanges(startTime, endTime);\n            },\n\n            ranges: function(startTime, endTime, isDay, isAllDay) {\n                if (typeof startTime != \"number\") {\n                    startTime = kendo.date.toUtcTime(startTime);\n                }\n\n                if (typeof endTime != \"number\") {\n                    endTime = kendo.date.toUtcTime(endTime);\n                }\n\n                if (isDay) {\n                    return this.daySlotRanges(startTime, endTime, isAllDay);\n                }\n\n                return this.timeSlotRanges(startTime, endTime);\n            },\n\n            _startCollection: function(date, collections) {\n                for (var collectionIndex = 0; collectionIndex < collections.length; collectionIndex++) {\n                    var collection = collections[collectionIndex];\n\n                    if (collection.startInRange(date)) {\n                        return collection;\n                    }\n                }\n\n                return null;\n            },\n\n            _endCollection: function(date, collections, isAllDay) {\n                for (var collectionIndex = 0; collectionIndex < collections.length; collectionIndex++) {\n                    var collection = collections[collectionIndex];\n\n                    if (collection.endInRange(date, isAllDay)) {\n                        return collection;\n                    }\n                }\n\n                return null;\n            },\n\n            _getCollections: function(isDay) {\n                return isDay ? this._daySlotCollections : this._timeSlotCollections;\n            },\n\n            continuousSlot: function(slot, reverse) {\n                var pad = reverse ? -1 : 1;\n                var collections = this._getCollections(slot.isDaySlot);\n                var collection = collections[slot.collectionIndex + pad];\n\n                return collection ? collection[reverse ? \"last\" : \"first\"]() : undefined;\n            },\n\n            firstSlot: function() {\n                var collections = this._getCollections(this.daySlotCollectionCount());\n\n                return collections[0].first();\n            },\n\n            lastSlot: function() {\n                var collections = this._getCollections(this.daySlotCollectionCount());\n\n                return collections[collections.length - 1].last();\n            },\n\n            upSlot: function(slot, keepCollection, groupByDateVertically) {\n                var that = this;\n                var moveToDaySlot = function(isDaySlot, collectionIndex, index) {\n                    var isFirstCell = index === 0;\n\n                    if (!keepCollection && !isDaySlot && isFirstCell && that.daySlotCollectionCount()) {\n                        return that._daySlotCollections[0].at(collectionIndex);\n                    }\n                };\n\n                if (!this.timeSlotCollectionCount()) {\n                    keepCollection = true;\n                }\n\n                return this._verticalSlot(slot, -1, moveToDaySlot, groupByDateVertically);\n            },\n\n            downSlot: function(slot, keepCollection, groupByDateVertically) {\n                var that = this;\n                var moveToTimeSlot = function(isDaySlot, collectionIndex, index) {\n                    if (!keepCollection && isDaySlot && that.timeSlotCollectionCount()) {\n                        return that._timeSlotCollections[index].at(0);\n                    }\n                };\n\n                if (!this.timeSlotCollectionCount()) {\n                    keepCollection = true;\n                }\n\n                return this._verticalSlot(slot, 1, moveToTimeSlot, groupByDateVertically);\n            },\n\n            leftSlot: function(slot, groupByDateVertically) {\n                return this._horizontalSlot(slot, -1, groupByDateVertically);\n            },\n\n            rightSlot: function(slot, groupByDateVertically) {\n                return this._horizontalSlot(slot, 1, groupByDateVertically);\n            },\n\n            _horizontalSlot: function(slot, step, groupByDateVertically) {\n                var index = slot.index;\n                var isDaySlot = slot.isDaySlot;\n                var collectionIndex = slot.collectionIndex;\n                var collections = this._getCollections(isDaySlot);\n\n                isDaySlot = groupByDateVertically ? false : isDaySlot;\n\n                if (isDaySlot) {\n                    index += step;\n                } else {\n                    collectionIndex += step;\n                }\n\n                var collection = collections[collectionIndex];\n\n                return collection ? collection.at(index) : undefined;\n            },\n\n            _verticalSlot: function(slot, step, swapCollection, groupByDateVertically) {\n                var index = slot.index;\n                var isDaySlot = slot.isDaySlot;\n                var collectionIndex = slot.collectionIndex;\n                var collections = this._getCollections(isDaySlot);\n\n                slot = swapCollection(isDaySlot, collectionIndex, index);\n                if (slot) {\n                    return slot;\n                }\n\n                isDaySlot = groupByDateVertically ? false : isDaySlot;\n\n                if (isDaySlot) {\n                    collectionIndex += step;\n                } else {\n                    index += step;\n                }\n\n                var collection = collections[collectionIndex];\n\n                return collection ? collection.at(index) : undefined;\n            },\n\n            _collection: function(index, multiday) {\n                var collections = multiday ? this._daySlotCollections : this._timeSlotCollections;\n\n                return collections[index];\n            },\n\n            _startSlot: function(time, collections, isAllDay) {\n                var collection = this._startCollection(time, collections);\n                var inRange = true;\n                var index = 0;\n\n                if (!collection) {\n                    collection = collections[index];\n\n                    while (index < collections.length - 1 && collection._start < time) {\n                        index++;\n                        collection = collections[index];\n                    }\n\n                    inRange = false;\n                }\n\n                var slot = collection.slotByStartDate(time, isAllDay);\n\n                if (!slot) {\n                    slot = collection.first();\n                    inRange = false;\n                }\n\n                return {\n                    slot: slot,\n                    inRange: inRange\n                };\n            },\n\n            _endSlot: function(time, collections, isAllDay) {\n                var collection = this._endCollection(time, collections, isAllDay);\n                var inRange = true;\n                var index = collections.length - 1;\n\n                if (!collection) {\n                    collection = collections[index];\n\n                    while (index > 0 && collection._start > time) {\n                        index--;\n                        collection = collections[index];\n                    }\n\n                    inRange = false;\n                }\n\n                var slot = collection.slotByEndDate(time, isAllDay);\n\n                if (!slot) {\n                    if (time <= collection.first().start) {\n                        slot = collection.first();\n                    } else {\n                        slot = collection.last();\n                    }\n\n                    inRange = false;\n                }\n\n                return {\n                    slot: slot,\n                    inRange: inRange\n                };\n            },\n\n            getSlotCollection: function(index, isDay) {\n                return this[isDay ? \"getDaySlotCollection\" : \"getTimeSlotCollection\"](index);\n            },\n\n            getTimeSlotCollection: function(index) {\n                return this._timeSlotCollections[index];\n            },\n\n            getDaySlotCollection: function(index) {\n                return this._daySlotCollections[index];\n            }\n        });\n\n        var SlotRange = kendo.Class.extend({\n            init: function(options) {\n                $.extend(this, options);\n            },\n\n            innerHeight: function() {\n                var collection = this.collection;\n\n                var startIndex = this.start.index;\n\n                var endIndex = this.end.index;\n\n                var result = 0;\n\n                for (var slotIndex = startIndex; slotIndex <= endIndex; slotIndex++) {\n                   result += collection.at(slotIndex).offsetHeight;\n                }\n\n                return result;\n            },\n\n            events: function() {\n                return this.collection.events();\n            },\n\n            addEvent: function(event) {\n                this.events().push(event);\n            },\n\n            startSlot: function() {\n                if (this.start.offsetLeft > this.end.offsetLeft) {\n                    return this.end;\n                }\n                return this.start;\n            },\n\n            endSlot: function() {\n                if (this.start.offsetLeft > this.end.offsetLeft) {\n                    return this.start;\n                }\n                return this.end;\n            }\n        });\n\n        var TimeSlotRange = SlotRange.extend({\n            innerHeight: function() {\n                var collection = this.collection;\n\n                var startIndex = this.start.index;\n\n                var endIndex = this.end.index;\n\n                var result = 0;\n\n                for (var slotIndex = startIndex; slotIndex <= endIndex; slotIndex++) {\n                   result += collection.at(slotIndex).offsetHeight;\n                }\n\n                return result;\n            },\n\n            outerRect: function(start, end, snap) {\n                return this._rect(\"offset\", start, end, snap);\n            },\n\n            _rect: function(property, start, end, snap) {\n                var top;\n                var bottom;\n                var left;\n                var right;\n                var startSlot = this.start;\n                var endSlot = this.end;\n                var isRtl = kendo.support.isRtl(startSlot.element);\n\n                if (typeof start != \"number\") {\n                    start = kendo.date.toUtcTime(start);\n                }\n\n                if (typeof end != \"number\") {\n                    end = kendo.date.toUtcTime(end);\n                }\n\n                if (snap) {\n                    top = startSlot.offsetTop;\n                    bottom = endSlot.offsetTop + endSlot[property + \"Height\"];\n                    if (isRtl) {\n                        left = endSlot.offsetLeft;\n                        right = startSlot.offsetLeft + startSlot[property + \"Width\"];\n                    } else {\n                        left = startSlot.offsetLeft;\n                        right = endSlot.offsetLeft + endSlot[property + \"Width\"];\n                    }\n                } else {\n                    var startOffset = start - startSlot.start;\n\n                    if (startOffset < 0) {\n                        startOffset = 0;\n                    }\n\n                    var startSlotDuration = startSlot.end - startSlot.start;\n\n                    top = startSlot.offsetTop + startSlot[property + \"Height\"] * startOffset / startSlotDuration;\n\n                    var endOffset = endSlot.end - end;\n\n                    if (endOffset < 0) {\n                        endOffset = 0;\n                    }\n\n                    var endSlotDuration = endSlot.end - endSlot.start;\n\n                    bottom = endSlot.offsetTop + endSlot[property + \"Height\"] - endSlot[property + \"Height\"] * endOffset / endSlotDuration;\n\n                    if (isRtl) {\n                        left = Math.round(endSlot.offsetLeft + endSlot[property + \"Width\"] * endOffset / endSlotDuration);\n                        right = Math.round(startSlot.offsetLeft + startSlot[property + \"Width\"] - startSlot[property + \"Width\"] * startOffset / startSlotDuration);\n                    } else {\n                        left = Math.round(startSlot.offsetLeft + startSlot[property + \"Width\"] * startOffset / startSlotDuration);\n                        right = Math.round(endSlot.offsetLeft + endSlot[property + \"Width\"] - endSlot[property + \"Width\"] * endOffset / endSlotDuration);\n                    }\n                }\n\n                return {\n                    top: top,\n                    bottom: bottom,\n                    //first column has no left border\n                    left: left === 0 ? left : left + 1,\n                    right: right\n                };\n            },\n\n            innerRect: function(start, end, snap) {\n                return this._rect(\"client\", start, end, snap);\n            }\n        });\n\n        var DaySlotRange = SlotRange.extend({\n            innerWidth: function() {\n                var collection = this.collection;\n\n                var startIndex = this.start.index;\n\n                var endIndex = this.end.index;\n\n                var result = 0;\n\n                var width = startIndex !== endIndex ? \"offsetWidth\" : \"clientWidth\";\n\n                for (var slotIndex = startIndex; slotIndex <= endIndex; slotIndex++) {\n                   result += collection.at(slotIndex)[width];\n                }\n\n                return result;\n            }\n        });\n\n        var SlotCollection = kendo.Class.extend({\n            init: function(startDate, endDate, groupIndex, collectionIndex) {\n                this._slots = [];\n\n                this._events = [];\n\n                this._start = kendo.date.toUtcTime(startDate);\n\n                this._end = kendo.date.toUtcTime(endDate);\n\n                this._groupIndex = groupIndex;\n\n                this._collectionIndex = collectionIndex;\n            },\n            refresh: function() {\n                for (var slotIndex = 0; slotIndex < this._slots.length; slotIndex++) {\n                    this._slots[slotIndex].refresh();\n                }\n            },\n\n            startInRange: function(date) {\n                return this._start <= date && date < this._end;\n            },\n\n            endInRange: function(date, isAllDay) {\n                var end = isAllDay ? date < this._end : date <= this._end;\n                return this._start <= date && end;\n            },\n\n            slotByStartDate: function(date) {\n                var time = date;\n\n                if (typeof time != \"number\") {\n                    time = kendo.date.toUtcTime(date);\n                }\n\n                for (var slotIndex = 0; slotIndex < this._slots.length; slotIndex++) {\n                    var slot = this._slots[slotIndex];\n\n                    if (slot.startInRange(time)) {\n                        return slot;\n                    }\n                }\n\n                return null;\n            },\n\n            slotByEndDate: function(date, allday) {\n                var time = date;\n\n                if (typeof time != \"number\") {\n                    time = kendo.date.toUtcTime(date);\n                }\n\n                if (allday) {\n                    return this.slotByStartDate(date, false);\n                }\n\n                for (var slotIndex = 0; slotIndex < this._slots.length; slotIndex++) {\n                    var slot = this._slots[slotIndex];\n\n                    if (slot.endInRange(time)) {\n                        return slot;\n                    }\n                }\n\n                return null;\n            },\n\n            count: function() {\n                return this._slots.length;\n            },\n            events: function() {\n                return this._events;\n            },\n            addTimeSlot: function(element, start, end, isHorizontal) {\n                var slot = new TimeSlot(element, start, end, this._groupIndex, this._collectionIndex, this._slots.length, isHorizontal);\n\n                this._slots.push(slot);\n            },\n            addDaySlot: function(element, start, end, eventCount) {\n                var slot = new DaySlot(element, start, end, this._groupIndex, this._collectionIndex, this._slots.length, eventCount);\n\n                this._slots.push(slot);\n            },\n            first: function() {\n                return this._slots[0];\n            },\n            last: function() {\n                return this._slots[this._slots.length - 1];\n            },\n            at: function(index) {\n                return this._slots[index];\n            }\n        });\n\n        var Slot = kendo.Class.extend({\n            init: function(element, start, end, groupIndex, collectionIndex, index) {\n                this.element = element;\n                this.clientWidth = element.clientWidth;\n                this.clientHeight = element.clientHeight;\n                this.offsetWidth = element.offsetWidth;\n                this.offsetHeight = element.offsetHeight;\n                this.offsetTop = element.offsetTop;\n                this.offsetLeft = element.offsetLeft;\n\n                this.start = start;\n                this.end = end;\n                this.element = element;\n                this.groupIndex = groupIndex;\n                this.collectionIndex = collectionIndex;\n                this.index = index;\n                this.isDaySlot = false;\n            },\n\n            refresh: function() {\n                var element = this.element;\n\n                this.clientWidth = element.clientWidth;\n                this.clientHeight = element.clientHeight;\n                this.offsetWidth = element.offsetWidth;\n                this.offsetHeight = element.offsetHeight;\n                this.offsetTop = element.offsetTop;\n                this.offsetLeft = element.offsetLeft;\n            },\n\n            startDate: function() {\n                return kendo.timezone.toLocalDate(this.start);\n            },\n\n            endDate: function() {\n                return kendo.timezone.toLocalDate(this.end);\n            },\n\n            startInRange: function(date) {\n                return this.start <= date && date < this.end;\n            },\n\n            endInRange: function(date) {\n                return this.start < date && date <= this.end;\n            },\n\n            startOffset: function() {\n               return this.start;\n            },\n\n            endOffset: function() {\n                return this.end;\n            }\n        });\n\n        var TimeSlot = Slot.extend({\n            init: function(element, start, end, groupIndex, collectionIndex, index, isHorizontal) {\n                Slot.fn.init.apply(this, arguments);\n\n                this.isHorizontal = isHorizontal ? true : false;\n            },\n\n            offsetX: function(rtl, offset) {\n                if (rtl) {\n                    return this.offsetLeft + offset;\n                } else {\n                    return this.offsetLeft + offset;\n                }\n            },\n\n            startInRange: function(date) {\n                return this.start <= date && date < this.end;\n            },\n\n            endInRange: function(date) {\n                return this.start < date && date <= this.end;\n            },\n\n            startOffset: function(x, y, snap) {\n                if (snap) {\n                    return this.start;\n                }\n\n                var offset = $(this.element).offset();\n\n                var duration = this.end - this.start;\n                var difference;\n                var time;\n\n                if (this.isHorizontal) {\n                    //need update\n                    var isRtl = kendo.support.isRtl(this.element);\n                    difference = x - offset.left;\n                    time = Math.floor(duration * ( difference / this.offsetWidth));\n\n                    if (isRtl) {\n                        return this.start + duration - time;\n                    }\n                } else {\n                    difference = y - offset.top;\n                    time = Math.floor(duration * ( difference / this.offsetHeight));\n                }\n\n                return this.start + time;\n            },\n\n            endOffset: function(x, y, snap) {\n                if (snap) {\n                    return this.end;\n                }\n\n                var offset = $(this.element).offset();\n\n                var duration = this.end - this.start;\n                var difference;\n                var time;\n\n                if (this.isHorizontal) {\n                    //need update\n                    var isRtl = kendo.support.isRtl(this.element);\n                    difference = x - offset.left;\n                    time = Math.floor(duration * ( difference / this.offsetWidth));\n\n                    if (isRtl) {\n                        return this.start + duration - time;\n                    }\n                } else {\n                    difference = y - offset.top;\n                    time = Math.floor(duration * ( difference / this.offsetHeight));\n                }\n\n                return this.start + time;\n            }\n        });\n\n        var DaySlot = Slot.extend({\n            init: function(element, start, end, groupIndex, collectionIndex, index, eventCount) {\n                Slot.fn.init.apply(this, arguments);\n\n                this.eventCount = eventCount;\n                this.isDaySlot = true;\n\n                if (this.element.children.length) {\n                    var firstChild = this.element.children[0];\n\n                    this.firstChildHeight = firstChild.offsetHeight;\n                    this.firstChildTop = firstChild.offsetTop;\n                } else {\n                    this.firstChildHeight = 3;\n                    this.firstChildTop = 0;\n                }\n            },\n\n            startDate: function() {\n                var date = new Date(this.start);\n\n                return kendo.timezone.apply(date, \"Etc/UTC\");\n            },\n\n            endDate: function() {\n                var date = new Date(this.end);\n\n                return kendo.timezone.apply(date, \"Etc/UTC\");\n            },\n\n            startInRange: function(date) {\n                return this.start <= date && date < this.end;\n            },\n\n            endInRange: function(date) {\n                return this.start < date && date <= this.end;\n            }\n        });\n\n        kendo.ui.SchedulerView = Widget.extend({\n            init: function(element, options) {\n                Widget.fn.init.call(this, element, $.extend({}, this.options, options));\n\n                this._normalizeOptions();\n                this._initDefaultTools();\n                this._scrollbar = kendo.support.scrollbar();\n                this._isRtl = kendo.support.isRtl(element);\n                this._resizeHint = $();\n                this._moveHint = $();\n                this._cellId = kendo.guid();\n                this._resourcesForGroups();\n                this._selectedSlots = [];\n                this.element.attr(\"role\", \"application\");\n            },\n\n            options: {\n                messages: {\n                    ariaEventLabel: {\n                        on: \"on\",\n                        at: \"at\",\n                        to: \"to\",\n                        allDay: \"(all day)\",\n                        prefix: \"\"\n                    }\n                }\n            },\n\n            visibleEndDate: function() {\n                return this.endDate();\n            },\n\n            _initDefaultTools: function() {\n                this._defaultTools = {\n                    todayMobile: {\n                        type: \"button\",\n                        fillMode: \"flat\",\n                        text: this.options.messages.today,\n                        click: this._footerTodayClickHandler.bind(this),\n                        attributes: {\n                            class: \"k-scheduler-today\"\n                        }\n                    },\n                    fulldayDesktop: {\n                        type: \"button\",\n                        icon: \"clock\",\n                        text: this.options.showWorkHours ? this.options.messages.showFullDay : this.options.messages.showWorkDay,\n                        click: this.toggleFullDay ? this.toggleFullDay.bind(this) : $.noop,\n                        attributes: {\n                            class: \"k-scheduler-fullday\"\n                        }\n                    },\n                    fulldayMobile: {\n                        type: \"button\",\n                        fillMode: \"flat\",\n                        text: this.options.showWorkHours ? this.options.messages.showFullDay : this.options.messages.showWorkDay,\n                        click: this.toggleFullDay ? this.toggleFullDay.bind(this) : $.noop,\n                        attributes: {\n                            class: \"k-scheduler-fullday\"\n                        }\n                    }\n                };\n            },\n\n            _normalizeOptions: function() {\n                var options = this.options;\n\n                if (options.startTime) {\n                    options.startTime.setMilliseconds(0);\n                }\n\n                if (options.endTime) {\n                    options.endTime.setMilliseconds(0);\n                }\n\n                if (options.workDayStart) {\n                    options.workDayStart.setMilliseconds(0);\n                }\n\n                if (options.workDayEnd) {\n                    options.workDayEnd.setMilliseconds(0);\n                }\n            },\n\n            _isMobile: function() {\n                var options = this.options;\n                return (options.mobile === true && kendo.support.mobileOS) || options.mobile === \"phone\" || options.mobile === \"tablet\";\n            },\n\n            _addResourceView: function() {\n                var resourceView = new ResourceView(this.groups.length, this._isRtl, this.options.enforceAllDaySlot);\n\n                this.groups.push(resourceView);\n\n                return resourceView;\n            },\n\n            _refreshResourceViews: function() {\n                var groups = this.groups;\n\n                if (groups) {\n                    for (var i = 0; i < groups.length; i++) {\n                        groups[i]._refreshSlotCollections();\n                    }\n                }\n            },\n\n            dateForTitle: function() {\n                return kendo.format(this.options.selectedDateFormat, this.startDate(), this.endDate());\n            },\n\n            shortDateForTitle: function() {\n                return kendo.format(this.options.selectedShortDateFormat, this.startDate(), this.endDate());\n            },\n\n            mobileDateForTitle: function() {\n                return kendo.format(this.options.selectedMobileDateFormat || this.options.selectedShortDateFormat, this.startDate(), this.endDate());\n            },\n\n            _changeGroup: function(selection, previous) {\n                var method = previous ? \"prevGroupSlot\" : \"nextGroupSlot\";\n                var slot = this[method](selection.start, selection.groupIndex, selection.isAllDay);\n\n                if (slot) {\n                    selection.groupIndex += previous ? -1 : 1;\n                }\n\n                if (this._isGroupedByDate() && !slot) {\n                   selection.groupIndex = previous ? this.groups.length - 1 : 0;\n                }\n\n                return slot;\n            },\n\n            _changeDate: function(selection, slot, previous) {\n                var group = this.groups[selection.groupIndex];\n                var collections, index;\n\n                if (previous) {\n                      collections = group._getCollections(false);\n                      index = group.daySlotCollectionCount() ? slot.index - 1 : slot.collectionIndex - 1;\n\n                      if (index >= 0) {\n                          return collections[index]._slots[collections[index]._slots.length - 1];\n                      }\n                  } else {\n                      collections = group._getCollections(group.daySlotCollectionCount());\n                      index = group.daySlotCollectionCount() ? 0 : slot.collectionIndex + 1;\n                      var slotIndex = group.daySlotCollectionCount() ? slot.collectionIndex + 1 : 0;\n\n                      if (collections[index] && collections[index]._slots[slotIndex]) {\n                          return collections[index]._slots[slotIndex];\n                      }\n                   }\n            },\n\n            _changeGroupContinuously: function() {\n                return null;\n            },\n\n            _changeViewPeriod: function() {\n                return false;\n            },\n\n            _isInRange: function(newStart, newEnd) {\n                if (!newStart || !newEnd || !this.options.min || !this.options.max) {\n                    return false;\n                }\n                return getDate(newStart) <= getDate(this.options.min) || getDate(newEnd) >= getDate(this.options.max);\n            },\n\n            _horizontalSlots: function(selection, ranges, multiple, reverse) {\n                var method = reverse ? \"leftSlot\" : \"rightSlot\";\n                var horizontalRange = {\n                     startSlot: ranges[0].start,\n                     endSlot: ranges[ranges.length - 1].end\n                 };\n                var group = this.groups[selection.groupIndex];\n                var isVertical = this._isVerticallyGrouped();\n\n                if (!multiple) {\n                    var slot = this._normalizeHorizontalSelection(selection, ranges, reverse);\n                    if (slot) {\n                        horizontalRange.startSlot = horizontalRange.endSlot = slot;\n                    }\n                }\n\n                if (this._isGroupedByDate() && !multiple) {\n                      var tempSlot = this._changeGroup(selection, reverse);\n\n                      if (!tempSlot)\n                      {\n                        horizontalRange = this._getNextHorizontalRange(group, method, horizontalRange);\n                      } else {\n                          horizontalRange.startSlot = horizontalRange.endSlot = tempSlot;\n                      }\n                } else {\n                      horizontalRange.startSlot = group[method](horizontalRange.startSlot);\n                      horizontalRange.endSlot = group[method](horizontalRange.endSlot);\n\n                      if (!multiple && !isVertical && (!horizontalRange.startSlot || !horizontalRange.endSlot)) {\n                            horizontalRange.startSlot = horizontalRange.endSlot = this._changeGroup(selection, reverse);\n                      }\n                }\n\n                var continuousSlot;\n\n                if ((!horizontalRange.startSlot || !horizontalRange.endSlot) && !this._isGroupedByDate()) {\n                    continuousSlot = this._continuousSlot(selection, ranges, reverse);\n                    continuousSlot = this._changeGroupContinuously(selection, continuousSlot, multiple, reverse);\n\n                    if (continuousSlot) {\n                        horizontalRange.startSlot = horizontalRange.endSlot = continuousSlot;\n                    }\n                }\n\n                return horizontalRange;\n            },\n\n             _getNextHorizontalRange: function(group, method, horizontalRange) {\n                if (!this._isVerticallyGrouped()) {\n                    horizontalRange.startSlot = group[method](horizontalRange.startSlot);\n                    horizontalRange.endSlot = group[method](horizontalRange.endSlot);\n                }\n\n                 return horizontalRange;\n            },\n\n            _verticalSlots: function(selection, ranges, multiple, reverse) {\n                var group = this.groups[selection.groupIndex];\n                var slot;\n                var verticalRange = {\n                    startSlot: ranges[0].start,\n                    endSlot: ranges[ranges.length - 1].end\n                };\n\n                if (!multiple) {\n                    slot = this._normalizeVerticalSelection(selection, ranges, reverse);\n                    if (slot) {\n                        verticalRange.startSlot = verticalRange.endSlot = slot;\n                    }\n                }\n\n                var method = reverse ? \"upSlot\" : \"downSlot\";\n\n                verticalRange = this._getNextVerticalRange(group, method, verticalRange, multiple);\n\n                if (!multiple && this._isVerticallyGrouped() && (!verticalRange.startSlot || !verticalRange.endSlot)) {\n                    if (this._isGroupedByDate()) {\n                        verticalRange.startSlot = verticalRange.endSlot = this._changeDate(selection, slot, reverse);\n\n                   } else {\n                        verticalRange.startSlot = verticalRange.endSlot = this._changeGroup(selection, reverse);\n                   }\n                }\n\n                return verticalRange;\n            },\n\n            _getNextVerticalRange: function(group, method, verticalRange, multiple) {\n                 verticalRange.startSlot = group[method](verticalRange.startSlot, multiple);\n                 verticalRange.endSlot = group[method](verticalRange.endSlot, multiple);\n\n                 return verticalRange;\n            },\n\n            _normalizeHorizontalSelection: function() {\n                return null;\n            },\n\n            _normalizeVerticalSelection: function(selection, ranges, reverse) {\n                var slot;\n\n                if (reverse) {\n                    slot = ranges[0].start;\n                } else {\n                    slot = ranges[ranges.length - 1].end;\n                }\n\n                return slot;\n            },\n\n            _continuousSlot: function() {\n                return null;\n            },\n\n            _footerTodayClickHandler: function(e) {\n                e.preventDefault();\n\n                var that = this;\n                var options = that.options;\n                var timezone = that.options.timezone;\n                var action = \"today\";\n                var currentDate = new Date();\n                var date;\n\n                if (timezone) {\n                    var timezoneOffset = kendo.timezone.offset(currentDate, timezone);\n                    date = kendo.timezone.convert(currentDate, currentDate.getTimezoneOffset(), timezoneOffset);\n                } else {\n                    date = currentDate;\n                }\n\n                that.trigger(\"navigate\", { view: that.name || options.name, action: action, date: date });\n            },\n\n            _footerItems: function() {\n                var that = this,\n                    items = [],\n                    options = this.options;\n\n                if (that._isMobile()) {\n                    items.push({\n                        type: \"button\",\n                        fillMode: \"flat\",\n                        text: options.messages.today,\n                        click: that._footerTodayClickHandler.bind(that),\n                        attributes: {\n                            class: \"k-scheduler-today\"\n                        }\n                    });\n                }\n\n                return items;\n            },\n\n            _footer: function() {\n                if (this.options.footer === false) {\n                    return;\n                }\n\n                var that = this,\n                    items = that._footerItems();\n\n                if (items.length > 0) {\n                    var html = $('<div class=\"k-scheduler-footer\">');\n\n                    that.footer = html.appendTo(that.element);\n\n                    that.footer.kendoToolBar({\n                        resizable: false,\n                        items: items\n                    });\n                }\n            },\n\n            constrainSelection: function(selection) {\n                var group = this.groups[0];\n                var slot;\n\n                if (!this.inRange(selection)) {\n                   slot = group.firstSlot();\n\n                   selection.isAllDay = slot.isDaySlot;\n                   selection.start = slot.startDate();\n                   selection.end = slot.endDate();\n                } else {\n                    if (!group.daySlotCollectionCount()) {\n                        selection.isAllDay = false;\n                    } else if (!group.timeSlotCollectionCount()) {\n                        selection.isAllDay = true;\n                    }\n               }\n\n                if (!this.groups[selection.groupIndex]) {\n                    selection.groupIndex = 0;\n                }\n            },\n\n            move: function(selection, key, shift) {\n                var handled = false;\n                var group = this.groups[selection.groupIndex];\n                var verticalByDate = this._isGroupedByDate() && this._isVerticallyGrouped();\n\n                if (!group.timeSlotCollectionCount()) {\n                    selection.isAllDay = true;\n                }\n\n                var ranges = group.ranges(selection.start, selection.end, selection.isAllDay, false);\n                var startSlot, endSlot, reverse, slots;\n\n                if (key === keys.DOWN || key === keys.UP) {\n                    handled = true;\n                    reverse = key === keys.UP;\n\n                    this._updateDirection(selection, ranges, shift, reverse, true);\n\n                    slots = this._verticalSlots(selection, ranges, shift, reverse);\n\n                    if (!slots.startSlot && !shift && this._changeViewPeriod(selection, reverse, !verticalByDate)) {\n                        return handled;\n                    }\n\n                } else if (key === keys.LEFT || key === keys.RIGHT) {\n                    handled = true;\n                    reverse = key === keys.LEFT;\n\n                    this._updateDirection(selection, ranges, shift, reverse, false);\n\n                    slots = this._horizontalSlots(selection, ranges, shift, reverse);\n\n                    if (!slots.startSlot && !shift && this._changeViewPeriod(selection, reverse, verticalByDate)) {\n                        return handled;\n                    }\n                }\n\n                if (handled) {\n                    startSlot = slots.startSlot;\n                    endSlot = slots.endSlot;\n\n                    if (shift) {\n                        var backward = selection.backward;\n                        if (backward && startSlot) {\n                            selection.start = startSlot.startDate();\n                        } else if (!backward && endSlot) {\n                            selection.end = endSlot.endDate();\n                        }\n                    } else if (startSlot && endSlot) {\n                        selection.isAllDay = startSlot.isDaySlot;\n                        selection.start = startSlot.startDate();\n                        selection.end = endSlot.endDate();\n                    }\n\n                    selection.events = [];\n                }\n\n                return handled;\n            },\n\n            moveToEventInGroup: function(group, slot, selectedEvents, prev) {\n                var events = group._continuousEvents || [];\n                var found, event;\n                var pad = prev ? -1 : 1;\n                var length = events.length;\n                var idx = prev ? length - 1 : 0;\n                var i, lastSelected;\n\n                if (selectedEvents.length) {\n                    lastSelected = selectedEvents[selectedEvents.length - 1];\n\n                    if (prev) {\n                        for (i = 0; i < events.length; i++) {\n                            if (events[i].uid === lastSelected) {\n                                idx = i + pad;\n                            }\n                        }\n                    } else {\n                        for (i = events.length - 1; i > -1; i--) {\n                            if (events[i].uid === lastSelected) {\n                                idx = i + pad;\n                            }\n                        }\n                    }\n                }\n\n                while (idx < length && idx > -1) {\n                    event = events[idx];\n\n                    if ( (!prev && event.start.startDate() >= slot.startDate()) ||\n                        (prev && event.start.startDate() <= slot.startDate()) ) {\n\n                        if (event && $.inArray(event.uid, selectedEvents) === -1) {\n                            found = !!event;\n                            break;\n                        }\n                    }\n\n                    idx += pad;\n                }\n\n                return event;\n            },\n\n            moveToEvent: function(selection, prev) {\n                var groupIndex = selection.groupIndex;\n\n                var group = this.groups[groupIndex];\n                var slot = group.ranges(selection.start, selection.end, this.name === \"month\" || selection.isAllDay, false)[0].start;\n\n                var length = this.groups.length;\n                var pad = prev ? -1 : 1;\n                var events = selection.events;\n                var event;\n\n                if (this._isGroupedByDate()) {\n                    var allEvents = this._getAllEvents();\n                    var uniqueAllEvents = this._getUniqueEvents(allEvents);\n                    var sortedEvents = this._getSortedEvents(uniqueAllEvents);\n\n                    if (events.length === 0) {\n                        var eventIndex = this._getNextEventIndexBySlot(slot, sortedEvents, groupIndex);\n\n                        if (prev) {\n                            eventIndex--;\n                        }\n\n                        event = sortedEvents[eventIndex];\n                    } else {\n                         var idx = this._getStartIdx(events, sortedEvents);\n\n                        while (idx < sortedEvents.length && idx > -1) {\n                            if (events.length > 0) {\n                                slot = this._getSelectedSlot(slot, sortedEvents, event, idx, pad, prev);\n                            }\n\n                            if (!slot) {\n                                break;\n                            }\n\n                            if ( (!prev && sortedEvents[idx].start.startDate() >= slot.startDate()) ||\n                                  (prev && sortedEvents[idx].start.startDate() <= slot.startDate())) {\n                                 if (events[0] != sortedEvents[idx].uid) {\n                                     event = sortedEvents[idx];\n                                      break;\n                                 }\n                            }\n                            idx += pad;\n                        }\n                    }\n                } else {\n                      while (groupIndex < length && groupIndex > -1) {\n                        event = this.moveToEventInGroup(group, slot, events, prev);\n\n                        groupIndex += pad;\n                        group = this.groups[groupIndex];\n\n                        if (!group || event) {\n                            break;\n                        }\n\n                        events = [];\n                        if (prev) {\n                            slot = group.lastSlot();\n                        } else {\n                            slot = group.firstSlot(true);\n                        }\n                    }\n                }\n\n                if (event) {\n                    selection.events = [ event.uid ];\n                    selection.start = event.start.startDate();\n                    selection.end = event.end.endDate();\n                    selection.isAllDay = event.start.isDaySlot;\n                    selection.groupIndex = event.start.groupIndex;\n                    selection.eventElement = event.element[0];\n                }\n\n                return !!event;\n            },\n\n            current: function(candidate) {\n                if (candidate !== undefined) {\n                    this._current = candidate;\n                    if (this.content.has(candidate)) {\n                        this._scrollTo(candidate, this.content[0]);\n                    }\n                } else {\n                    return this._current;\n                }\n            },\n\n            select: function(selection) {\n                this.clearSelection();\n\n                if (!this._selectEvents(selection)) {\n                    this._selectSlots(selection);\n                }\n            },\n\n            _getNextEventIndexBySlot: function(slot, sortedEvents, groupIndex) {\n                var tempIndex = 0;\n                var slotStartDate = kendo.date.getDate(slot.startDate());\n\n                for (var i = 0; i < sortedEvents.length; i++) {\n                    var eventStartDate = kendo.date.getDate(sortedEvents[i].start.startDate());\n                    if (slotStartDate > eventStartDate) {\n                        tempIndex++;\n                        continue;\n                    }\n\n                    if (slotStartDate.getTime() === eventStartDate.getTime() && groupIndex > sortedEvents[i].start.groupIndex) {\n                          tempIndex++;\n                          continue;\n                    }\n\n                    if (slotStartDate.getTime() === eventStartDate.getTime() &&\n                        groupIndex >= sortedEvents[i].start.groupIndex &&\n                        slot.startDate() > sortedEvents[i].start.startDate()) {\n                        tempIndex++;\n                        continue;\n                     }\n\n                     break;\n                }\n                return tempIndex;\n            },\n\n            _getSelectedSlot: function(slot, sortedEvents, event, idx, pad, prev) {\n                  if (sortedEvents[idx + pad] &&\n                   sortedEvents[idx].start.groupIndex !== sortedEvents[idx + pad].start.groupIndex) {\n                        var groupIndex = sortedEvents[idx + pad].start.groupIndex;\n                        var group = this.groups[groupIndex];\n\n                        if (!group || event) {\n                           slot = null;\n                        }\n\n                        if (prev) {\n                            slot = group.lastSlot();\n                        } else {\n                            slot = group.firstSlot(true);\n                        }\n                    }\n                 return slot;\n            },\n\n            _getStartIdx: function(events, sortedEvents) {\n                var selectedEventIndex = 0;\n\n                $.each(sortedEvents, function() {\n                    if (this.uid === events[0]) {\n                         return false;\n                    }\n\n                    selectedEventIndex++;\n                });\n\n                return selectedEventIndex;\n            },\n\n            _getAllEvents: function() {\n                var allEvents = [];\n                var groups = this.groups;\n\n                for (var idx = 0; idx < groups.length; idx++) {\n                    if (groups[idx]._continuousEvents) {\n                        allEvents = allEvents.concat(groups[idx]._continuousEvents);\n                    }\n                }\n\n                return allEvents;\n            },\n\n            _getUniqueEvents: function(allEvents) {\n                var uniqueAllEvents = [];\n\n                for (var i = 0; i < allEvents.length; i++) {\n                    var exists = false;\n                    for (var j = 0; j < uniqueAllEvents.length; j++) {\n                        if (allEvents[i].uid === uniqueAllEvents[j].uid) {\n                            exists = true;\n                            break;\n                        }\n                    }\n\n                    if (!exists) {\n                        uniqueAllEvents.push(allEvents[i]);\n                    }\n                }\n\n                return uniqueAllEvents;\n            },\n\n            _getSortedEvents: function(uniqueAllEvents) {\n                 return uniqueAllEvents.sort(function(first, second) {\n                    var firstStartDate = first.start.startDate();\n                    var secondStartDate = second.start.startDate();\n                    var result = kendo.date.getDate(firstStartDate) - kendo.date.getDate(secondStartDate);\n\n                    if (result === 0) {\n                        result = first.start.groupIndex - second.start.groupIndex;\n                    }\n\n                    if (result === 0) {\n                        result = firstStartDate.getTime() - secondStartDate.getTime();\n                    }\n\n                    if (result === 0) {\n                        if (first.start.isDaySlot && !second.start.isDaySlot) {\n                                result = -1;\n                        }\n\n                        if (!first.start.isDaySlot && second.start.isDaySlot) {\n                                result = 1;\n                        }\n                    }\n\n                    if (result === 0) {\n                        result = $(first.element).index() - $(second.element).index();\n                    }\n\n                    return result;\n                });\n            },\n\n            _selectSlots: function(selection) {\n                var isAllDay = selection.isAllDay;\n                var group = this.groups[selection.groupIndex];\n\n                if (!group.timeSlotCollectionCount()) {\n                    isAllDay = true;\n                }\n\n                this._selectedSlots = [];\n\n                var ranges = group.ranges(selection.start, selection.end, isAllDay, false);\n                var element;\n                var slot;\n\n                for (var rangeIndex = 0; rangeIndex < ranges.length; rangeIndex++) {\n                    var range = ranges[rangeIndex];\n                    var collection = range.collection;\n\n                    for (var slotIndex = range.start.index; slotIndex <= range.end.index; slotIndex++) {\n                        slot = collection.at(slotIndex);\n\n                        element = slot.element;\n                        addSelectedState(element);\n\n                        this._selectedSlots.push({\n                            start: slot.startDate(),\n                            end: slot.endDate(),\n                            element: element\n                        });\n                    }\n                }\n\n                if (selection.backward) {\n                    element = ranges[0].start.element;\n                }\n\n                this.current(element);\n            },\n\n            _selectEvents: function(selection) {\n                var found = false;\n                var events = selection.events;\n                var groupEvents = this._getAllEvents();\n                var idx, groupEvent, length = groupEvents.length;\n\n                if (!events[0] || !groupEvents[0]) {\n                    return found;\n                }\n\n                var result = $();\n                selection.events = [];\n                for (idx = 0; idx < length; idx ++) {\n                    if ($.inArray(groupEvents[idx].uid, events) > -1) {\n                        groupEvent = groupEvents[idx];\n                        result = result.add(groupEvent.element);\n                        if (selection.events.indexOf(groupEvent.uid) === -1) {\n                            selection.events.push(groupEvent.uid);\n                        }\n                    }\n                }\n\n                if (result[0]) {\n                    result.addClass(\"k-selected\");\n\n                    if (selection.eventElement) {\n                        this.current(selection.eventElement);\n                    } else {\n                        this.current(result.last()[0]);\n                    }\n\n                    this._selectedSlots = [];\n                    found = true;\n                }\n\n                return found;\n            },\n\n            inRange: function(options) {\n                var startDate = this.startDate();\n                var endDate = kendo.date.addDays(this.endDate(), 1);\n                var start = options.start;\n                var end = options.end;\n\n                return startDate <= start && start < endDate && startDate < end && end <= endDate;\n            },\n\n            _resourceValue: function(resource, item) {\n                if (resource.valuePrimitive) {\n                    item = kendo.getter(resource.dataValueField)(item);\n                }\n                return item;\n            },\n\n            _setResourceValue: function(groupLevelMember, resource, result) {\n                var value = groupLevelMember.value,\n                    setter;\n\n                if (resource.multiple) {\n                    value = [value];\n                }\n\n                setter = kendo.setter(resource.field);\n                setter(result, value);\n            },\n\n            _resourceBySlot: function(slot) {\n                var resources = this.groupedResources;\n                var result = {};\n\n                if (resources.length) {\n                    var resourceIndex = slot.groupIndex,\n                        groupOptions = this.options.group,\n                        nestedMember = groupOptions.date || groupOptions.orientation === \"horizontal\" ? \"columns\" : \"rows\",\n                        levels = nestedMember === \"rows\" ? this.rowLevels : this.columnLevels,\n                        dateGroupCompensation = groupOptions.date && groupOptions.orientation === \"horizontal\" ? 1 : 0,\n                        groupLevel = levels[resources.length - 1 + dateGroupCompensation],\n                        resource = resources[resources.length - 1],\n                        groupLevelMember = groupLevel[resourceIndex],\n                        passedChildren, numberOfChildren, j, i;\n\n                    this._setResourceValue(groupLevelMember, resource, result);\n\n                    for (j = resources.length - 2; j >= 0; j--) {\n                        groupLevel = levels[j + dateGroupCompensation];\n                        resource = resources[j];\n                        passedChildren = 0;\n\n                        for (i = 0; i < groupLevel.length; i++) {\n                            groupLevelMember = groupLevel[i];\n                            numberOfChildren = groupLevelMember[nestedMember].length;\n\n                            if (numberOfChildren > resourceIndex - passedChildren) {\n                                this._setResourceValue(groupLevelMember, resource, result);\n\n                                break;\n                            } else {\n                                passedChildren += numberOfChildren;\n                            }\n                        }\n                    }\n                }\n\n                return result;\n            },\n\n            _createResizeHint: function(left, top, width, height) {\n                return $(HINT).css({\n                    left: left,\n                    top: top,\n                    width: width,\n                    height: height\n                });\n            },\n\n            _removeResizeHint: function() {\n                this._resizeHint.remove();\n                this._resizeHint = $();\n            },\n\n            _removeMoveHint: function(uid) {\n                if (uid) {\n                    this._moveHint.filter(\"[data-uid='\" + uid + \"']\").remove();\n\n                    this._moveHint = this._moveHint.filter(\"[data-uid!='\" + uid + \"']\");\n                } else {\n                    this._moveHint.remove();\n                    this._moveHint = $();\n                }\n            },\n\n            _scrollTo: function(element, container) {\n                var elementOffset = element.offsetTop,\n                    elementOffsetDir = element.offsetHeight,\n                    containerScroll = container.scrollTop,\n                    containerOffsetDir = container.clientHeight,\n                    bottomDistance = elementOffset + elementOffsetDir,\n                    result = 0;\n\n                    if (containerScroll > elementOffset) {\n                        result = elementOffset;\n                    } else if (bottomDistance > (containerScroll + containerOffsetDir)) {\n                        if (elementOffsetDir <= containerOffsetDir) {\n                            result = (bottomDistance - containerOffsetDir);\n                        } else {\n                            result = elementOffset;\n                        }\n                    } else {\n                        result = containerScroll;\n                    }\n                    container.scrollTop = result;\n            },\n\n            _inverseEventColor: function(element) {\n                var eventColor = element.css(\"color\");\n                var eventColorIsDark = new Color(eventColor).isDark();\n                var eventBackground = element.css(\"background-color\");\n                var eventBackgroundIsDark = new Color(eventBackground).isDark();\n\n                if (eventColorIsDark == eventBackgroundIsDark) {\n                    element.addClass(INVERSE_COLOR_CLASS);\n                }\n            },\n\n            // Possibly legacy code. Ensure clients do not use it before removing. Or throw warning.\n            // CSP: leave it as it is (for now).\n           _eventTmpl: function(template, wrapper) {\n               var options = this.options,\n                   settings = $.extend({}, kendo.Template, options.templateSettings),\n                   paramName = settings.paramName,\n                   html = \"\",\n                   type = typeof template,\n                   state = { storage: {}, count: 0 };\n\n                if (type === \"function\") {\n                    state.storage[\"tmpl\" + state.count] = template;\n                    html += \"#=this.tmpl\" + state.count + \"(\" + paramName + \")#\";\n                    state.count ++;\n                } else if (type === \"string\") {\n                    html += template;\n                }\n\n                var tmpl = kendo.template(kendo.format(wrapper, html), settings);\n\n                if (state.count > 0) {\n                    tmpl = tmpl.bind(state.storage);\n                }\n\n                return tmpl;\n           },\n\n            eventResources: function(event) {\n                var resources = [],\n                    options = this.options;\n\n                if (!options.resources) {\n                    return resources;\n                }\n\n                for (var idx = 0; idx < options.resources.length; idx++) {\n                    var resource = options.resources[idx];\n                    var field = resource.field;\n                    var eventResources = kendo.getter(field)(event);\n\n                    if (eventResources == null) {\n                        continue;\n                    }\n\n                    if (!resource.multiple) {\n                        eventResources = [eventResources];\n                    }\n\n                    var data = resource.dataSource.view();\n\n                    for (var resourceIndex = 0; resourceIndex < eventResources.length; resourceIndex++) {\n                        var eventResource = null;\n\n                        var value = eventResources[resourceIndex];\n\n                        if (!resource.valuePrimitive) {\n                            value = kendo.getter(resource.dataValueField)(value);\n                        }\n\n                        for (var dataIndex = 0; dataIndex < data.length; dataIndex++) {\n                            if (data[dataIndex].get(resource.dataValueField) == value) {\n                                eventResource = data[dataIndex];\n                                break;\n                            }\n                        }\n\n                        if (eventResource !== null) {\n                            var resourceColor = kendo.getter(resource.dataColorField)(eventResource);\n                            resources.push({\n                                field: resource.field,\n                                title: resource.title,\n                                name: resource.name,\n                                text: kendo.getter(resource.dataTextField)(eventResource),\n                                value: value,\n                                color: resourceColor\n                            });\n                        }\n                    }\n                }\n                return resources;\n            },\n\n            createLayout: function(layout) {\n                var allDayIndex = -1;\n\n                if (!layout.rows) {\n                    layout.rows = [];\n                }\n\n                for (var idx = 0; idx < layout.rows.length; idx++) {\n                    if (layout.rows[idx].allDay) {\n                        allDayIndex = idx;\n                        break;\n                    }\n                }\n\n                var allDaySlot = layout.rows[allDayIndex];\n\n                if (allDayIndex >= 0) {\n                    layout.rows.splice(allDayIndex, 1);\n                }\n\n                var columnLevels = this.columnLevels = levels(layout, \"columns\");\n                var rowLevels = this.rowLevels = levels(layout, \"rows\");\n\n                if (this._isVirtualized()) {\n                    this._trimRowLevels(rowLevels);\n                }\n\n                this.table = $('<table role=\"presentation\" class=\"k-scheduler-layout k-scheduler-' + this.name + 'view\"><tbody></tbody></table>');\n\n                var rowCount = rowLevels[rowLevels.length - 1].length;\n\n                this.table.find(\"tbody\").first().append(this._topSection(columnLevels, allDaySlot, rowCount));\n                this.table.find(\"tbody\").first().append(this._bottomSection(rowLevels, rowCount));\n                this.element.append(this.table);\n\n                if (this._isVirtualized()) {\n                    this._updateDomRowLevels();\n                }\n\n                // Enable horizontal scrolling when mobile, grouped and less than 1024px width\n                if (this._isMobile() &&\n                        columnLevels.length > 1 &&\n                        this._groupOrientation() === \"horizontal\" &&\n                        kendo._outerWidth($(window)) < MIN_HORIZONTAL_SCROLL_SIZE ) {\n\n                    this.table.find(\".k-scheduler-content .k-scheduler-table\").width((columnLevels[columnLevels.length - 2].length * 100) + \"%\");\n                    this.table.find(\".k-scheduler-header .k-scheduler-table\").width((columnLevels[columnLevels.length - 2].length * 100) + \"%\");\n                }\n\n                this._scroller();\n            },\n\n            _isVirtualized: function() {\n                return this.options.virtual && this.rowLevels.length > 1 && this._isVerticallyGrouped();\n            },\n\n            _trimRowLevels: function(rowLevels) {\n                var lastGroup = rowLevels[rowLevels.length - 2];\n                var cachedRowLevels = this.cachedRowLevels || [];\n                var levelMarker;\n\n                this._hasContentToRender = true;\n\n                var stopAtLevel = function(levels, index) {\n                    var hasParent = levels[index - 1].length > 0,\n                    parentLevel, parentValue;\n\n                    if (hasParent) {\n                        parentLevel = levels[index - 1][0];\n                        parentValue = levels[index][0].parentValue;\n\n                        return parentLevel.value !== parentValue;\n                    } else {\n                        return true;\n                    }\n                };\n\n                for (var rowLevelIndex = rowLevels.length - 2; rowLevelIndex >= 0; rowLevelIndex--) {\n                    var stop = false;\n                    if (rowLevelIndex > 0 && stopAtLevel(rowLevels, rowLevelIndex)) {\n                        stop = true;\n                        levelMarker = rowLevelIndex;\n                    }\n\n                    cachedRowLevels[rowLevelIndex] = rowLevels[rowLevelIndex].splice(1);\n\n                    if (rowLevelIndex < rowLevels.length - 2 && rowLevels[rowLevelIndex][0].rows.length != 1) {\n                        rowLevels[rowLevelIndex][0].rows = rowLevels[rowLevelIndex + 1];\n                    }\n\n                    if (stop) {\n                        break;\n                    }\n                }\n\n                cachedRowLevels[rowLevels.length - 1] = rowLevels[rowLevels.length - 1].splice(lastGroup[0].rows.length);\n\n                this.cachedRowLevels = cachedRowLevels;\n\n                if (!cachedRowLevels[cachedRowLevels.length - 1].length) {\n                    this._hasContentToRender = false;\n                }\n\n                return {\n                    levelMarker: levelMarker || 0,\n                    rowLevels: rowLevels\n                };\n            },\n\n            createNextLayout: function() {\n                var clone = [];\n                var trimmedRowLevels;\n                var rowLevels;\n                var levelMarker;\n                var rowCount;\n\n                for (var rowLevelIndex = 0; rowLevelIndex < this.cachedRowLevels.length; rowLevelIndex++) {\n                    clone[rowLevelIndex] = this.cachedRowLevels[rowLevelIndex];\n                }\n\n                trimmedRowLevels = this._trimRowLevels(clone);\n                rowLevels = trimmedRowLevels.rowLevels.splice(trimmedRowLevels.levelMarker);\n                levelMarker = trimmedRowLevels.levelMarker;\n                rowCount = rowLevels[rowLevels.length - 1].length;\n\n                delete this._height;\n\n                for (var i = levelMarker; i < this.rowLevels.length; i++) {\n                    this.rowLevels[i] = this.rowLevels[i].concat(rowLevels[i - levelMarker]);\n                }\n\n                this.table\n                    .find(\".k-scheduler-times\").last().find(\"tbody\")\n                    .append(this._times(rowLevels, rowCount, this._isMobile()).find(\"tr\"));\n\n                this._updateDomRowLevels();\n\n                if (levelMarker > 0) {\n                    for (i = 0; i < levelMarker; i++) {\n                        var cell = this.table.find(\"[data-row-level=\" + i + \"]\").last();\n                        var rowSpan = parseInt(cell.attr(\"rowspan\"),10) + rowCount;\n                        cell.attr(\"rowspan\", rowSpan);\n                    }\n                }\n\n                this._virtualContent(rowLevels, this.columnLevels);\n                this.render(this._cachedEvents);\n            },\n\n            _tryRenderContent: function() {\n                var that = this;\n                var bufferHeight = that.table.innerHeight();\n                var height = that.content.find(\"table\").innerHeight();\n                var scrollTop = that.content.scrollTop();\n\n                while (that._hasContentToRender && height - bufferHeight < scrollTop) {\n                    that.createNextLayout();\n                    height = that.content.find(\"table\").innerHeight();\n                }\n            },\n\n            _isSchedulerHeightSet: function() {\n                var el = this.element;\n                var initialHeight, newHeight;\n                    if (el[0].style.height) {\n                        return true;\n                    } else {\n                        initialHeight = el.height();\n                    }\n\n                    el.height(\"auto\");\n                    newHeight = el.height();\n\n                    if (initialHeight != newHeight) {\n                        el.height(\"\");\n                        return true;\n                    }\n                    el.height(\"\");\n                    return false;\n            },\n\n            _updateDomRowLevels: function() {\n                var that = this;\n                var groupCells = that.times.find(\".k-group-cell:not([data-row-level])\");\n\n                if (!this._rowLevelIndices) {\n                    this._rowLevelIndices = groupCells.map(function(index, item) {\n                        $(item).attr(\"data-row-level\", index);\n                        return index;\n                    }).toArray().reverse();\n                    return;\n                }\n\n                groupCells = groupCells.toArray().reverse();\n\n                for (var i = 0; i <= groupCells.length; i++) {\n                    $(groupCells[i]).attr(\"data-row-level\", this._rowLevelIndices[i]);\n                }\n            },\n\n            refreshLayout: function() {\n                var that = this,\n                    toolbar = that.element.find(\"> .k-scheduler-toolbar\"),\n                    height = that.element.innerHeight(),\n                    scrollbar = that._scrollbar = kendo.support.scrollbar(true),\n                    headerHeight = 0,\n                    paddingDirection = this._isRtl ? \"left\" : \"right\";\n\n                for (var idx = 0; idx < toolbar.length; idx++) {\n                    height -= outerHeight(toolbar.eq(idx));\n                }\n\n                if (that.datesHeader) {\n                    headerHeight = outerHeight(that.datesHeader);\n                }\n\n                if (that.timesHeader && outerHeight(that.timesHeader) > headerHeight) {\n                    headerHeight = outerHeight(that.timesHeader);\n                }\n\n                if (that.content) {\n                    that.content.find(\".k-scheduler-table td\").addClass(\"k-scheduler-cell\");\n                }\n\n                if (that.datesHeader && that.timesHeader) {\n                    var datesHeaderRows = that.datesHeader.find(\"table\").first().find(\"tr\");\n\n                    that.timesHeader.find(\"tr\").height(function(index) {\n                        $(this).height(datesHeaderRows.eq(index).height());\n                    });\n                }\n\n                if (headerHeight) {\n                    height -= headerHeight;\n                }\n\n                if (that.footer) {\n                    height -= outerHeight(that.footer);\n                }\n\n                var contentDiv = that.content[0],\n                    scrollbarWidth = !kendo.support.kineticScrollNeeded ? scrollbar : 0;\n\n                if (this._isSchedulerHeightSet()) { // set content height only if needed\n\n                    if (height > scrollbar * 2) { // do not set height if proper scrollbar cannot be displayed\n                        that.content.height(height);\n                    } else {\n                        that.content.height(scrollbar * 2 + 1);\n                    }\n\n                    if (that.times) {\n                        that.times.height(contentDiv.clientHeight);\n\n                        var timesTable = that.times.find(\"table\");\n                        if (timesTable.length) {\n                            timesTable.height(that.content.find(\"table\")[0].clientHeight);\n                        }\n                    }\n                }\n\n                if (that.table) {\n                    if (contentDiv.offsetWidth - contentDiv.clientWidth > 0) {\n                        that.table.addClass(\"k-scrollbar-v\");\n                        that.datesHeader.css(\"padding-\" + paddingDirection, scrollbarWidth - parseInt(that.datesHeader.children().css(\"border-\" + paddingDirection + \"-width\"), 10));\n                    } else {\n                        that.datesHeader.css(\"padding-\" + paddingDirection, \"0\");\n                    }\n                    if (contentDiv.offsetHeight - contentDiv.clientHeight > 0 || contentDiv.clientHeight > that.content.children(\".k-scheduler-table\").height()) {\n                        that.table.addClass(\"k-scrollbar-h\");\n                    } else {\n                        that.table.removeClass(\"k-scrollbar-h\");\n                    }\n                }\n\n                that._refreshResourceViews();\n            },\n\n            _topSection: function(columnLevels, allDaySlot, rowCount) {\n                var thElm = $(\"<tr class='k-scheduler-head'>\");\n\n                this.timesHeader = timesHeader(columnLevels.length, allDaySlot, rowCount);\n                this.datesHeader = this._datesHeader(columnLevels, allDaySlot);\n\n                var dateGroup = this.datesHeader.find(\".k-nav-day\");\n\n                if (dateGroup.length) {\n                    dateGroup.closest(\"tr\").addClass(\"k-scheduler-date-group\");\n                }\n\n                if (this._isMobile()) {\n                    thElm.addClass(\"k-mobile-header\");\n                    thElm.addClass(\"k-mobile-\" + this._groupOrientation() + \"-header\");\n                }\n\n                return $(thElm).append(this.timesHeader.add(this.datesHeader).wrap(\"<td>\").parent());\n            },\n\n            _bottomSection: function(rowLevels, rowCount) {\n                this.times = this._times(rowLevels, rowCount, this._isMobile());\n\n                this.content = content();\n\n                return $(\"<tr class='k-scheduler-body'>\").append(this.times.add(this.content).wrap(\"<td>\").parent());\n            },\n\n            _scroller: function() {\n                var that = this;\n\n                this.content.on(\"scroll\" + NS, function() {\n                    kendo.scrollLeft(that.datesHeader.find(\">.k-scheduler-header-wrap\"), this.scrollLeft);\n                    that.times.scrollTop(this.scrollTop);\n                    if (that._isVirtualized()) {\n                        that._tryRenderContent();\n                    }\n                });\n\n                var touchScroller = kendo.touchScroller(this.content, {\n                    avoidScrolling: function(e) {\n                        return $(e.event.target).closest(\".k-event.k-event-active\").length > 0;\n                    }\n                });\n\n                if (touchScroller && touchScroller.movable) {\n\n                    this._touchScroller = touchScroller;\n\n                    this.content = touchScroller.scrollElement;\n\n                    touchScroller.movable.bind(\"change\", function(e) {\n                        kendo.scrollLeft(that.datesHeader.find(\">.k-scheduler-header-wrap\"), -e.sender.x);\n                        that.times.scrollTop(-e.sender.y);\n                        if (that._isVirtualized()) {\n                            that._tryRenderContent();\n                        }\n                    });\n                }\n            },\n\n            _resourcesForGroups: function() {\n                var result = [];\n                var groups = this.options.group;\n                var resources = this.options.resources;\n\n                groups = groups && groups.resources ? groups.resources : [];\n\n                if (resources && groups.length) {\n                    for (var idx = 0, length = resources.length; idx < length; idx++) {\n                        for (var groupIdx = 0, groupLength = groups.length; groupIdx < groupLength; groupIdx++) {\n                            if (resources[idx].name === groups[groupIdx]) {\n                                result.push(resources[idx]);\n                            }\n                        }\n                    }\n                }\n\n                this.groupedResources = result;\n            },\n\n            _createDateLayout: function(dates, inner, times) {\n                return createDateLayoutConfiguration(\"rows\", dates, inner, times);\n            },\n\n            _createColumnsLayout: function(resources, inner, template, dates, times, parentValue) {\n                return createLayoutConfiguration(\"columns\", resources, inner, template, dates, times, parentValue);\n            },\n\n            _groupOrientation: function() {\n                var groups = this.options.group;\n                return groups && groups.resources ? groups.orientation : \"horizontal\";\n            },\n\n            _isGroupedByDate: function() {\n                return this.options.group && this.options.group.date;\n            },\n\n            _isVerticallyGrouped: function() {\n                return this.groupedResources.length && this._groupOrientation() === \"vertical\";\n            },\n\n            _createRowsLayout: function(resources, inner, template, dates) {\n                return createLayoutConfiguration(\"rows\", resources, inner, template, dates);\n            },\n\n            selectionByElement: function() {\n                return null;\n            },\n\n            clearSelection: function() {\n                this.content\n                    .find(\".k-selected\")\n                    .removeAttr(\"id\")\n                    .removeClass(\"k-selected\");\n            },\n\n            destroy: function() {\n                var that = this;\n\n                Widget.fn.destroy.call(this);\n\n                if (that._ongoingTimer) {\n                    clearInterval(that._ongoingTimer);\n                    that._ongoingTimer = null;\n                }\n\n                if (that.table) {\n                    kendo.destroy(that.table);\n                    that.table.remove();\n                }\n\n                if (that.footer) {\n                    that.footer.getKendoToolBar().destroy();\n                    that.footer.remove();\n                }\n\n                that.groups = null;\n                that.table = null;\n                that.content = null;\n                that.times = null;\n                that.datesHeader = null;\n                that.timesHeader = null;\n                that.footer = null;\n                that._resizeHint = null;\n                that._moveHint = null;\n            },\n\n            calendarInfo: function() {\n                return kendo.getCulture().calendars.standard;\n            },\n\n            prevGroupSlot: function(date, groupIndex, isDay) {\n                var collection;\n                var group = this.groups[groupIndex];\n                var slot = group.ranges(date, date, isDay, false)[0].start;\n\n                if (groupIndex <= 0) {\n                    return;\n                }\n\n                if (this._isGroupedByDate()) {\n                   return slot;\n                }\n\n                if (this._isVerticallyGrouped()) {\n                    if (!group.timeSlotCollectionCount()) {\n                        collection = group._collection(group.daySlotCollectionCount() - 1, true);\n                        return collection.at(slot.index);\n                    } else {\n                        collection = group._collection(isDay ? slot.index : slot.collectionIndex, false);\n                        return collection.last();\n                    }\n                } else {\n                    if (!group.timeSlotCollectionCount()) {\n                        collection = group._collection(slot.collectionIndex, true);\n                        return collection.last();\n                    } else {\n                        collection = group._collection(isDay ? 0 : group.timeSlotCollectionCount() - 1, isDay);\n                        return isDay ? collection.last() : collection.at(slot.index);\n                    }\n                }\n            },\n\n            nextGroupSlot: function(date, groupIndex, isDay) {\n                var collection;\n                var group = this.groups[groupIndex];\n                var slot = group.ranges(date, date, isDay, false)[0].start;\n                var daySlotCollectionCount;\n\n                if (groupIndex >= this.groups.length - 1) {\n                    return;\n                }\n\n                if (this._isGroupedByDate()) {\n                   return slot;\n                }\n\n                if (this._isVerticallyGrouped()) {\n                    if (!group.timeSlotCollectionCount()) {\n                        collection = group._collection(0, true);\n                        return collection.at(slot.index);\n                    } else {\n                        daySlotCollectionCount = group.daySlotCollectionCount();\n                        collection = group._collection(daySlotCollectionCount ? 0 : slot.collectionIndex, daySlotCollectionCount);\n\n                        return isDay ? collection.first() : collection.at(slot.collectionIndex);\n                    }\n                } else {\n                    if (!group.timeSlotCollectionCount()) {\n                        collection = group._collection(slot.collectionIndex, true);\n                        return collection.first();\n                    } else {\n                        collection = group._collection(0, isDay);\n                        return isDay ? collection.first() : collection.at(slot.index);\n                    }\n                }\n            },\n\n            _eventOptionsForMove: function() {\n                return {};\n            },\n\n            _updateEventForResize: function() {\n                return;\n            },\n\n            _updateEventForSelection: function(event) {\n                return event;\n            },\n\n            _innerElements: function(element, type, inner) {\n                var count = 0,\n                    countInner = function(el) {\n                        var innerSpan = el[inner],\n                            innerEls = el[type],\n                            current, innerCollection, i;\n\n                        if (innerSpan) {\n                            count += innerSpan;\n                            return;\n                        }\n\n                        if (!innerEls || innerEls.length === 0) {\n                            count += 1;\n                            return;\n                        }\n\n                        for (i = 0; i < innerEls.length; i++) {\n                            current = innerEls[i];\n                            innerCollection = current[type];\n\n                            if (innerCollection && innerCollection[0]) {\n                                if (!innerCollection[0][type] || innerCollection[0][type].length === 0) {\n                                    count += innerCollection.length;\n                                } else {\n                                    countInner(current);\n                                }\n                            } else {\n                                count += 1;\n                            }\n                        }\n                    };\n\n                countInner(element);\n\n                return count;\n            },\n\n            _times: function(rowLevels, rowCount, isMobile) {\n                var that = this;\n                var rows = new Array(rowCount).join().split(\",\");\n                var rowHeaderRows = [];\n                var rowIndex;\n\n                for (var rowLevelIndex = 0; rowLevelIndex < rowLevels.length; rowLevelIndex++) {\n                    var level = rowLevels[rowLevelIndex];\n                    var rowsBefore = 0;\n\n                    for (rowIndex = 0; rowIndex < level.length; rowIndex++) {\n                        var currentRow = level[rowIndex];\n                        var className = currentRow.className || \"\";\n                        var text = currentRow.text;\n                        var rowspan = that._innerElements(currentRow, \"rows\");\n\n                        rowsBefore += rowspan;\n\n                        if (currentRow.allDay) {\n                            className = \"k-scheduler-times-all-day\";\n                        }\n\n                        if (isMobile && className.indexOf(\"k-group-cell\") !== -1) {\n                            text = '<span class=\"k-scheduler-group-text\">' + text + '</span>';\n                        }\n\n                        rows[rowsBefore - rowspan] += '<th class=\"k-scheduler-cell ' + className + '\" rowspan=\"' + rowspan + '\">' + text + \"</th>\";\n                    }\n                }\n\n                for (rowIndex = 0; rowIndex < rowCount; rowIndex++) {\n                    rowHeaderRows.push(rows[rowIndex]);\n                }\n\n                if (rowCount < 1) {\n                    return $();\n                }\n\n                return $('<div class=\"k-scheduler-times\">' + table(rowHeaderRows) + '</div>');\n            },\n\n            _datesHeader: function(columnLevels, allDaySlot) {\n                var that = this;\n                var dateTableRows = [];\n                var columnIndex;\n                var result;\n\n                for (var columnLevelIndex = 0; columnLevelIndex < columnLevels.length; columnLevelIndex++) {\n                    var level = columnLevels[columnLevelIndex];\n                    var th = [];\n\n                    for (columnIndex = 0; columnIndex < level.length; columnIndex ++) {\n                        var column = level[columnIndex];\n                        var colspan = that._innerElements(column, \"columns\", \"colspan\");\n\n                        th.push('<th colspan=\"' + (column.colspan || colspan) + '\" class=\"k-scheduler-cell ' + (column.className || \"\") + '\">' + column.text + \"</th>\");\n                    }\n\n                    dateTableRows.push(th.join(\"\"));\n                }\n\n                var allDayTableRows = [];\n\n                if (allDaySlot) {\n                    var lastLevel = columnLevels[columnLevels.length - 1];\n                    var td = [];\n                    var cellContent = allDaySlot.cellContent;\n\n                    for (columnIndex = 0; columnIndex < lastLevel.length; columnIndex++) {\n                        td.push('<td class=\"k-scheduler-cell ' + (lastLevel[columnIndex].className || \"\") + '\">' + (cellContent ? cellContent(columnIndex) : '&nbsp;') + '</td>');\n                    }\n\n                    allDayTableRows.push(td.join(\"\"));\n                }\n\n                result = $(\n                    '<div class=\"k-scheduler-header\">' +\n                        '<div class=\"k-scheduler-header-wrap\">' +\n                            table(dateTableRows) +\n                            allDayTable(allDayTableRows, \"k-scheduler-header-all-day\") +\n                        '</div>' +\n                    '</div>'\n                );\n\n                kendo.applyStylesFromKendoAttributes(result, [\"position\"]);\n\n                return result;\n            },\n\n            _formatEventAriaLabel: function(title, start, end, isAllDay) {\n                var labelMessages = this.options.messages.ariaEventLabel,\n                    sameDate = kendo.date.getDate(start).getTime() === kendo.date.getDate(end).getTime(),\n                    labelText;\n\n                if (typeof(labelMessages) === \"string\") {\n                    return kendo.format(labelMessages, title, start, start);\n                }\n\n                labelText = (labelMessages.prefix + SPACE + title + SPACE + labelMessages.on + SPACE + kendo.toString(start, \"D\")).trim();\n\n                if (isAllDay && sameDate) {\n                    return labelText + SPACE + labelMessages.allDay;\n                } else if (isAllDay) {\n                    return labelText + SPACE + labelMessages.to + SPACE + kendo.toString(end, \"D\") + SPACE + labelMessages.allDay;\n                } else {\n                    labelText = labelText + SPACE + labelMessages.at + SPACE + kendo.toString(start, \"t\") + SPACE + labelMessages.to + SPACE;\n\n                    if (sameDate) {\n                        return labelText + kendo.toString(end, \"t\");\n                    } else {\n                        return labelText + kendo.toString(end, \"D\") + SPACE + labelMessages.at + SPACE + kendo.toString(end, \"t\");\n                    }\n                }\n            },\n\n            _ongoingEvents: function(data) {\n                var that = this,\n                    ongoingOptions = that.options.ongoingEvents,\n                    shouldMarkOngoing = !!ongoingOptions && (ongoingOptions === true || ongoingOptions.enabled),\n                    interval;\n\n                if (shouldMarkOngoing) {\n                    that._ongoingUpdater(data);\n\n                    interval = ongoingOptions.updateInterval || 60000;\n\n                    if (that._ongoingTimer) {\n                        clearInterval(that._ongoingTimer);\n                        that._ongoingTimer = null;\n                    }\n\n                    if (!isNaN(interval)) {\n                        that._ongoingTimer = setInterval(this._ongoingUpdater.bind(that, data), interval);\n                    }\n                }\n            },\n\n            _ongoingUpdater: function(data) {\n                var currentTime = new Date(),\n                    ongoingClass = this.options.ongoingEvents.cssClass || ONGOING_CLASS;\n\n                this.content.find(DOT + ongoingClass).removeClass(ongoingClass);\n\n                if (this.groups && this.groups.length > 0) {\n                    this._updateOngoing(currentTime, data);\n                }\n            },\n\n            _updateOngoing: function(currentTime, data) {\n                var that = this,\n                    el = that.element,\n                    ongoingOptions = that.options.ongoingEvents,\n                    ongoingClass = ongoingOptions.cssClass || ONGOING_CLASS,\n                    useLocalTimezone = ongoingOptions.useLocalTimezone,\n                    timezone = that.options.timezone,\n                    timezoneOffset, currentTime;\n\n                if (!data) {\n                    return;\n                }\n\n                if (useLocalTimezone === false && !!timezone) {\n                    timezoneOffset = kendo.timezone.offset(currentTime, timezone);\n                    currentTime = kendo.timezone.convert(currentTime, currentTime.getTimezoneOffset(), timezoneOffset);\n                }\n\n                data.forEach((appointment) => {\n                    var uid,\n                        start = appointment.start,\n                        end = appointment.end;\n\n                    if (appointment.isAllDay) {\n                        end = new Date(end.getTime() + 1000 * 60 * 60 * 24 - 1);\n                    }\n\n                    if (start <= currentTime && end >= currentTime) {\n                        uid = appointment.uid;\n\n                        el.find(\"[data-uid=\" + uid + \"]\").addClass(ongoingClass);\n                    }\n                });\n            }\n        });\n\n        function collidingEvents(elements, start, end) {\n            var idx,\n                index,\n                startIndex,\n                overlaps,\n                endIndex;\n\n            for (idx = elements.length - 1; idx >= 0; idx--) {\n                index = rangeIndex(elements[idx]);\n                startIndex = index.start;\n                endIndex = index.end;\n\n                overlaps = startIndex <= start && endIndex >= start;\n\n                if (overlaps || (startIndex >= start && endIndex <= end) || (start <= startIndex && end >= startIndex)) {\n                    if (startIndex < start) {\n                        start = startIndex;\n                    }\n\n                    if (endIndex > end) {\n                        end = endIndex;\n                    }\n                }\n            }\n\n            return eventsForSlot(elements, start, end);\n        }\n\n        function rangeIndex(eventElement) {\n            return {\n                start: eventElement.start,\n                end: eventElement.end,\n                slotIndex: eventElement.slotIndex,\n                slotIndexEnd: eventElement.slotIndexEnd\n            };\n        }\n\n        function eventsForSlot(elements, slotStart, slotEnd) {\n            var events = [];\n\n            for (var idx = 0; idx < elements.length; idx++) {\n                var event = rangeIndex(elements[idx]);\n\n                if ((event.start < slotStart && event.end > slotStart) || (event.start >= slotStart && event.end <= slotEnd)) {\n                    events.push(elements[idx]);\n                }\n            }\n\n            return events;\n        }\n\n        function createColumns(eventElements) {\n            return _createColumns(eventElements);\n        }\n\n        function createRows(eventElements) {\n            return _createColumns(eventElements);\n        }\n\n        var Color = function(value) {\n            var color = this,\n                formats = Color.formats,\n                re,\n                processor,\n                parts,\n                i,\n                channels;\n\n            if (arguments.length === 1) {\n                value = color.resolveColor(value);\n\n                for (i = 0; i < formats.length; i++) {\n                    re = formats[i].re;\n                    processor = formats[i].process;\n                    parts = re.exec(value);\n\n                    if (parts) {\n                        channels = processor(parts);\n                        color.r = channels[0];\n                        color.g = channels[1];\n                        color.b = channels[2];\n                    }\n                }\n            } else {\n                color.r = arguments[0];\n                color.g = arguments[1];\n                color.b = arguments[2];\n            }\n\n            color.r = color.normalizeByte(color.r);\n            color.g = color.normalizeByte(color.g);\n            color.b = color.normalizeByte(color.b);\n        };\n\n        Color.prototype = {\n            resolveColor: function(value) {\n                value = value || \"#000\";\n\n                if (value.charAt(0) == \"#\") {\n                    value = value.substr(1, 6);\n                }\n\n                value = value.replace(/ /g, \"\");\n                value = value.toLowerCase();\n                value = Color.namedColors[value] || value;\n\n                return value;\n            },\n\n            normalizeByte: function(value) {\n                return (value < 0 || isNaN(value)) ? 0 : ((value > 255) ? 255 : value);\n            },\n\n            percBrightness: function() {\n                var color = this;\n                return math.sqrt(0.241 * color.r * color.r + 0.691 * color.g * color.g + 0.068 * color.b * color.b);\n            },\n\n            isDark: function() {\n                var color = this;\n                var brightnessValue = color.percBrightness();\n                return brightnessValue < 180;\n            }\n        };\n\n        Color.formats = [{\n                re: /^rgb\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3})\\)$/,\n                process: function(parts) {\n                    return [\n                        parseInt(parts[1], 10), parseInt(parts[2], 10), parseInt(parts[3], 10)\n                    ];\n                }\n            }, {\n                re: /^(\\w{2})(\\w{2})(\\w{2})$/,\n                process: function(parts) {\n                    return [\n                        parseInt(parts[1], 16), parseInt(parts[2], 16), parseInt(parts[3], 16)\n                    ];\n                }\n            }, {\n                re: /^(\\w{1})(\\w{1})(\\w{1})$/,\n                process: function(parts) {\n                    return [\n                        parseInt(parts[1] + parts[1], 16),\n                        parseInt(parts[2] + parts[2], 16),\n                        parseInt(parts[3] + parts[3], 16)\n                    ];\n                }\n            }\n        ];\n\n        Color.namedColors = {\n            aqua: \"00ffff\", azure: \"f0ffff\", beige: \"f5f5dc\",\n            black: \"000000\", blue: \"0000ff\", brown: \"a52a2a\",\n            coral: \"ff7f50\", cyan: \"00ffff\", darkblue: \"00008b\",\n            darkcyan: \"008b8b\", darkgray: \"a9a9a9\", darkgreen: \"006400\",\n            darkorange: \"ff8c00\", darkred: \"8b0000\", dimgray: \"696969\",\n            fuchsia: \"ff00ff\", gold: \"ffd700\", goldenrod: \"daa520\",\n            gray: \"808080\", green: \"008000\", greenyellow: \"adff2f\",\n            indigo: \"4b0082\", ivory: \"fffff0\", khaki: \"f0e68c\",\n            lightblue: \"add8e6\", lightgrey: \"d3d3d3\", lightgreen: \"90ee90\",\n            lightpink: \"ffb6c1\", lightyellow: \"ffffe0\", lime: \"00ff00\",\n            limegreen: \"32cd32\", linen: \"faf0e6\", magenta: \"ff00ff\",\n            maroon: \"800000\", mediumblue: \"0000cd\", navy: \"000080\",\n            olive: \"808000\", orange: \"ffa500\", orangered: \"ff4500\",\n            orchid: \"da70d6\", pink: \"ffc0cb\", plum: \"dda0dd\",\n            purple: \"800080\", red: \"ff0000\", royalblue: \"4169e1\",\n            salmon: \"fa8072\", silver: \"c0c0c0\", skyblue: \"87ceeb\",\n            slateblue: \"6a5acd\", slategray: \"708090\", snow: \"fffafa\",\n            steelblue: \"4682b4\", tan: \"d2b48c\", teal: \"008080\",\n            tomato: \"ff6347\", turquoise: \"40e0d0\", violet: \"ee82ee\",\n            wheat: \"f5deb3\", white: \"ffffff\", whitesmoke: \"f5f5f5\",\n            yellow: \"ffff00\", yellowgreen: \"9acd32\"\n        };\n\n        function _createColumns(eventElements) {\n            var columns = [];\n\n            for (var idx = 0; idx < eventElements.length; idx++) {\n                var event = eventElements[idx];\n                var eventRange = rangeIndex(event);\n                var column = null;\n\n                if (event.zeroWidthEventOffset && eventRange.end - eventRange.start < event.zeroWidthEventOffset) {\n                    eventRange.end = eventRange.start + event.zeroWidthEventOffset;\n                }\n\n                for (var j = 0, columnLength = columns.length; j < columnLength; j++) {\n                    var endOverlaps = (eventRange.start > columns[j].end) || (eventRange.slotIndex > columns[j].slotIndexEnd);\n\n                    if (eventRange.start < columns[j].start || eventRange.slotIndex < columns[j].slotIndex || endOverlaps) {\n\n                        column = columns[j];\n\n                        if (column.end < eventRange.end) {\n                            column.end = eventRange.end;\n                        }\n\n                        if (column.slotIndexEnd < eventRange.slotIndexEnd) {\n                            column.slotIndexEnd = eventRange.slotIndexEnd;\n                        }\n\n                        break;\n                    }\n                }\n\n                if (!column) {\n                    column = { slotIndex: eventRange.slotIndex, slotIndexEnd: eventRange.slotIndexEnd, start: eventRange.start, end: eventRange.end, events: [] };\n                    columns.push(column);\n                }\n\n                column.events.push(event);\n            }\n\n            return columns;\n        }\n\n        function createDateLayoutConfiguration(name, dates, inner, times) {\n             var configuration = [];\n\n             $.each(dates, function(index, item) {\n                var className = item.className ? \"k-slot-cell \" + item.className : \"k-slot-cell\";\n\n                var obj = {\n                    text: item.text,\n                    className: className\n                };\n\n                if (times && !item.minorTicks) {\n                    obj[name] = createDateLayoutConfiguration(name, item.columns, inner, times);\n                } else {\n                    obj[name] = inner;\n                }\n                configuration.push(obj);\n            });\n\n            return configuration;\n        }\n\n        function createLayoutConfiguration(name, resources, inner, template, dates, times, parentValue) {\n            var resource = resources[0];\n            var configuration = [];\n\n            if (resource) {\n                if (dates && inner) {\n                    $.each(dates, function(index, item) {\n                        if (times && !item.minorTicks) {\n                            item[name] = createLayoutConfiguration(name, resources, item.columns, template, item.columns, times, parentValue);\n                        } else {\n                            item[name] = createLayoutConfiguration(name, resources, null, template, null, null, parentValue);\n                        }\n                    });\n                    configuration = dates;\n                } else {\n                    var data = resource.dataSource.view();\n\n                    data = data.filter(function(item) {\n                        var itemParentValue = kendo.getter(resource.dataParentValueField)(item);\n\n                        return itemParentValue === null || itemParentValue === undefined || itemParentValue === parentValue;\n                    });\n\n                    for (var dataIndex = 0; dataIndex < data.length; dataIndex++) {\n                        var value = kendo.getter(resource.dataValueField)(data[dataIndex]);\n                        var obj = {\n                            text: template({\n                                text: kendo.htmlEncode(kendo.getter(resource.dataTextField)(data[dataIndex])),\n                                color: kendo.getter(resource.dataColorField)(data[dataIndex]),\n                                field: resource.field,\n                                title: resource.title,\n                                name: resource.name,\n                                value: value\n                            }),\n                            className: \"k-slot-cell k-group-cell\",\n                            parentValue: parentValue,\n                            value: value\n                        };\n\n                        // filter-out those inner resources that are not relevant\n                        obj[name] = createLayoutConfiguration(name, resources.slice(1), inner, template, dates, times, value);\n\n                        configuration.push(obj);\n                    }\n                }\n                return configuration;\n            }\n            return inner;\n        }\n\n        function groupEqFilter(value) {\n            return function(item) {\n                if (Array.isArray(item) || item instanceof kendo.data.ObservableArray) {\n                    for (var idx = 0; idx < item.length; idx++) {\n                        if (item[idx] == value) {\n                            return true;\n                        }\n                    }\n                    return false;\n                }\n                return item == value;\n            };\n        }\n\n        var selectedStateRegExp = /\\s*k-selected/;\n        function addSelectedState(cell) {\n            cell.className = cell.className.replace(selectedStateRegExp, \"\") + \" k-selected\";\n        }\n\n        $.extend(ui.SchedulerView, {\n            createColumns: createColumns,\n            createRows: createRows,\n            rangeIndex: rangeIndex,\n            collidingEvents: collidingEvents,\n            groupEqFilter: groupEqFilter\n        });\n\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    exports.__meta__ = __meta__;\n    exports.default = kendo$1;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}