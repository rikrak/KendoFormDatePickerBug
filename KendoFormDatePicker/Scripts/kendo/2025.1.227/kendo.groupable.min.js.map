{"version":3,"sources":["raw-js/kendo.groupable.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendo","_globals","Groupable","this","$","window","Widget","ui","outerWidth","_outerWidth","kendoAttr","attr","extend","each","isRtl","ASCENDING","GROUP_SORT","DROP_CONTAINER","hint","target","title","htmlEncode","html","prepend","icon","iconClass","dropCue","removeText","element","contents","filter","nodeType","remove","init","options","draggable","horizontalCuePosition","that","group","guid","intializePositions","_intializePositions","bind","_dropCuePositions","fn","call","support","Draggable","draggableElements","groupContainer","kendoDropTarget","dragenter","e","_canDrag","currentTarget","find","css","appendTo","dragleave","drop","position","targetElement","field","colID","sourceIndicator","indicator","dropCuePositions","lastCuePosition","length","method","parentLeft","parent","left","sortOptions","sort","data","dir","hasClass","_dropCuePosition","getOffset","parseInt","_canDrop","before","buildIndicator","wrapper","_setIndicatorSortOptions","_change","_messageContainer","_list","show","add","kendoDraggable","dragcancel","_dragCancel","dragstart","marginLeft","elementPosition","dragend","_dragEnd","drag","_drag","allowDrag","preventDefault","dataSource","addClass","_createList","_refreshHandler","unbind","refresh","groups","fieldAttr","titleAttr","items","hide","index","compare","_invalidateGroupContainer","destroy","off","events","name","messages","empty","enableContextMenu","indicators","grep","item","removeHandler","_removeIndicator","sender","clickHandler","dirIcon","newDir","originalEvent","closest","id","kendoChip","label","removable","size","click","actions","first","ns","aggregates","names","idx","map","cell","aggregate","member","split","push","toArray","descriptors","indicatorSortOptions","trigger","removeData","is","Math","ceil","right","marginRight","event","x","location","_requestInProgress","source","next","dropped","list","text","kendoChipList","selectable","insertBefore","plugin","jQuery","kendo$1","__meta__","category","depends","advanced","default","Object","defineProperty","value"],"mappings":"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","file":"kendo.groupable.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('kendo.core.js'), require('kendo.draganddrop.js'), require('kendo.chip.js'), require('kendo.chiplist.js'), require('kendo.icons.js')) :\n    typeof define === 'function' && define.amd ? define(['exports', 'kendo.core', 'kendo.draganddrop', 'kendo.chip', 'kendo.chiplist', 'kendo.icons'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.kendo = global.kendo || {}, global.kendo._globals = global.kendo._globals || {}, global.kendo._globals.Groupable = {})));\n})(this, (function (exports) {\n    const __meta__ = {\n        id: \"groupable\",\n        name: \"Groupable\",\n        category: \"framework\",\n        depends: [ \"core\", \"draganddrop\", \"icons\", \"chip\", \"chiplist\" ],\n        advanced: true\n    };\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            Widget = kendo.ui.Widget,\n            outerWidth = kendo._outerWidth,\n            kendoAttr = kendo.attr,\n            extend = $.extend,\n            each = $.each,\n            isRtl = false,\n\n            DIR = \"dir\",\n            FIELD = \"field\",\n            TITLE = \"title\",\n            ASCENDING = \"asc\",\n            DESCENDING = \"desc\",\n            REMOVEGROUP = \"removeGroup\",\n            GROUP_SORT = \"group-sort\",\n            DROP_CONTAINER = \"k-grouping-drop-container\",\n            NS = \".kendoGroupable\",\n            CHANGE = \"change\",\n            hint = function(target) {\n                var title = target.attr(kendo.attr(\"title\"));\n                if (title) {\n                    title = kendo.htmlEncode(title);\n                }\n\n                return $('<div class=\"k-group-clue k-drag-clue\" />')\n                    .html(title || kendo.htmlEncode(target.attr(kendo.attr(\"field\"))))\n                    .prepend(kendo.ui.icon({ icon: \"cancel\", iconClass: \"k-drag-status\" }));\n            },\n            dropCue = $('<div class=\"k-grouping-dropclue\"/>');\n\n\n        function removeText(element) {\n            element.contents().filter(function() {\n                return this.nodeType === 3;\n            }).remove();\n        }\n\n        var Groupable = Widget.extend({\n            init: function(element, options) {\n                var that = this,\n                    group = kendo.guid(),\n                    intializePositions = that._intializePositions.bind(that),\n                    draggable,\n                    horizontalCuePosition,\n                    dropCuePositions = that._dropCuePositions = [];\n\n                Widget.fn.init.call(that, element, options);\n\n                isRtl = kendo.support.isRtl(element);\n                horizontalCuePosition = isRtl ? \"right\" : \"left\";\n\n                that.draggable = draggable = that.options.draggable || new kendo.ui.Draggable(that.element, {\n                    filter: that.options.draggableElements,\n                    hint: hint,\n                    group: group\n                });\n\n                that.groupContainer = $(that.options.groupContainer, that.element)\n                    .kendoDropTarget({\n                        group: draggable.options.group,\n                        dragenter: function(e) {\n                            if (that._canDrag(e.draggable.currentTarget)) {\n                                kendo.ui.icon(e.draggable.hint.find(\".k-drag-status\"), { icon: \"plus\" });\n                                dropCue.css(horizontalCuePosition, 0).appendTo(that.groupContainer);\n                            }\n                        },\n                        dragleave: function(e) {\n                            kendo.ui.icon(e.draggable.hint.find(\".k-drag-status\"), { icon: \"cancel\" });\n\n                            dropCue.remove();\n                        },\n                        drop: function(e) {\n                            var targetElement = e.draggable.currentTarget,\n                                field = targetElement.attr(kendo.attr(\"field\")),\n                                title = targetElement.attr(kendo.attr(\"title\")),\n                                colID = targetElement.attr(\"id\"),\n                                sourceIndicator = that.indicator(field),\n                                dropCuePositions = that._dropCuePositions,\n                                lastCuePosition = dropCuePositions[dropCuePositions.length - 1],\n                                position,\n                                method = \"after\",\n                                parentLeft = isRtl || !lastCuePosition ? 0 : lastCuePosition.element.parent().position().left;\n                            var sortOptions = extend({}, that.options.sort, targetElement.data(GROUP_SORT));\n                            var dir = sortOptions.dir;\n\n                            if (!targetElement.hasClass(\"k-chip\") && !that._canDrag(targetElement)) {\n                                return;\n                            }\n                            if (lastCuePosition) {\n                                position = that._dropCuePosition(kendo.getOffset(dropCue).left + parentLeft + parseInt(lastCuePosition.element.css(\"marginLeft\"), 10) * (isRtl ? -1 : 1) + parseInt(lastCuePosition.element.css(\"marginRight\"), 10));\n                                if (position && that._canDrop($(sourceIndicator), position.element, position.left)) {\n                                    if (position.before) {\n                                        method = \"before\";\n                                    }\n\n                                    position.element[method](sourceIndicator || that.buildIndicator(field, title, dir, colID).wrapper);\n                                    that._setIndicatorSortOptions(field, sortOptions);\n                                    that._change();\n                                }\n                            } else {\n                                removeText(that._messageContainer);\n                                that._list.element.show();\n                                that._list.add(that.buildIndicator(field, title, dir, colID).element);\n                                that._setIndicatorSortOptions(field, sortOptions);\n                                that._change();\n                            }\n                        }\n                    })\n                    .kendoDraggable({\n                        filter: \"div.k-chip\",\n                        hint: hint,\n                        group: draggable.options.group,\n                        dragcancel: that._dragCancel.bind(that),\n                        dragstart: function(e) {\n                            var element = e.currentTarget,\n                                marginLeft = parseInt(element.css(\"marginLeft\"), 10),\n                                elementPosition = element.position(),\n                                left = isRtl ? elementPosition.left - marginLeft : elementPosition.left + outerWidth(element);\n\n                            intializePositions();\n                            dropCue.css(\"left\", left).appendTo(that.groupContainer);\n                            kendo.ui.icon(this.hint.find(\".k-drag-status\"), { icon: \"plus\" });\n                        },\n                        dragend: function() {\n                            that._dragEnd(this);\n                        },\n                        drag: that._drag.bind(that)\n                    });\n\n                draggable.bind([ \"dragend\", \"dragcancel\", \"dragstart\", \"drag\" ],\n                {\n                    dragend: function() {\n                        that._dragEnd(this);\n                    },\n                    dragcancel: that._dragCancel.bind(that),\n                    dragstart: function(e) {\n\n                        if (!that.options.allowDrag && !that._canDrag(e.currentTarget)) {\n                            e.preventDefault();\n                            return;\n                        }\n\n                        intializePositions();\n                    },\n                    drag: that._drag.bind(that)\n                });\n\n                that.dataSource = that.options.dataSource;\n                that._messageContainer = that.groupContainer.find(\".\" + DROP_CONTAINER);\n\n                if (!that._messageContainer.length) {\n                    that._messageContainer = $('<div/>').addClass(DROP_CONTAINER).appendTo(that.groupContainer);\n                }\n\n                that._createList();\n\n                if (that.dataSource && that._refreshHandler) {\n                    that.dataSource.unbind(CHANGE, that._refreshHandler);\n                } else {\n                    that._refreshHandler = that.refresh.bind(that);\n                }\n\n                if (that.dataSource) {\n                    that.dataSource.bind(\"change\", that._refreshHandler);\n                    that.refresh();\n                }\n            },\n\n            refresh: function() {\n                var that = this,\n                    dataSource = that.dataSource;\n                var groups = dataSource.group() || [];\n                var fieldAttr = kendoAttr(FIELD);\n                var titleAttr = kendoAttr(TITLE);\n\n                if (that.groupContainer) {\n                    if (that._list) {\n                        that._list.remove(that._list.items());\n                        that._list.element.hide();\n                    }\n\n                    if (groups.length) {\n                        removeText(that._messageContainer);\n                    }\n\n                    each(groups, function(index, group) {\n                        var field = group.field;\n                        var dir = group.dir;\n                        var element = that.element\n                            .find(that.options.filter)\n                            .filter(function() {\n                                return $(this).attr(fieldAttr) === field;\n                            });\n                        var indicator = that.buildIndicator(field, element.attr(titleAttr), dir, element.attr(\"id\"));\n\n                        that._list.add(indicator.element);\n                        that._list.element.show();\n                        that._setIndicatorSortOptions(field, extend({}, that.options.sort, { dir: dir, compare: group.compare }));\n                    });\n                }\n\n                that._invalidateGroupContainer();\n            },\n\n            destroy: function() {\n                var that = this;\n\n                Widget.fn.destroy.call(that);\n\n                that.groupContainer.off(NS);\n\n                if (that.groupContainer.data(\"kendoDropTarget\")) {\n                    that.groupContainer.data(\"kendoDropTarget\").destroy();\n                }\n\n                if (that.groupContainer.data(\"kendoDraggable\")) {\n                    that.groupContainer.data(\"kendoDraggable\").destroy();\n                }\n\n                if (!that.options.draggable) {\n                    that.draggable.destroy();\n                }\n\n                if (that.dataSource && that._refreshHandler) {\n                    that.dataSource.unbind(\"change\", that._refreshHandler);\n                    that._refreshHandler = null;\n                }\n\n                if (that._list) {\n                    that._list.destroy();\n                }\n\n                that.groupContainer = that.element = that.draggable = null;\n            },\n\n            events: [\"change\", \"removeGroup\"],\n\n            options: {\n                name: \"Groupable\",\n                filter: \"th\",\n                draggableElements: \"th\",\n                messages: {\n                    empty: \"Drag a column header and drop it here to group by that column\"\n                },\n                sort: {\n                    dir: ASCENDING,\n                    compare: null\n                },\n                enableContextMenu: false\n            },\n\n            indicator: function(field) {\n                var indicators = $(\".k-chip\", this.groupContainer);\n                return $.grep(indicators, function(item)\n                    {\n                        return $(item).attr(kendo.attr(\"field\")) === field;\n                    })[0];\n            },\n\n            removeHandler: function(e) {\n                var that = this;\n\n                that._removeIndicator(e.sender.wrapper);\n            },\n\n            clickHandler: function(e) {\n                var that = this;\n                var indicator = e.sender.wrapper;\n                var dirIcon = indicator.find(\".k-chip-icon\");\n                var newDir = dirIcon.attr(kendoAttr(DIR)) === ASCENDING ? DESCENDING : ASCENDING;\n\n                if ($(e.originalEvent.target).closest('.k-groupable-context-menu').length) {\n                    return;\n                }\n\n                dirIcon.attr(kendoAttr(DIR), newDir);\n                that._change();\n            },\n\n            buildIndicator: function(field, title, dir, id) {\n                var that = this;\n                var indicator;\n                var icon;\n                var wrapper;\n\n                dir = dir || (that.options.sort || {}).dir || ASCENDING;\n                indicator = $(`<div/>`)\n                                .kendoChip({\n                                    icon: `sort-${(dir || \"asc\") == \"asc\" ? \"asc-small\" : \"desc-small\"}`,\n                                    iconClass: 'k-chip-icon',\n                                    label: `${kendo.htmlEncode(title || field)}`,\n                                    removable: true,\n                                    size: that.options.size || \"medium\",\n                                    remove: that.removeHandler.bind(that),\n                                    click: that.clickHandler.bind(that),\n                                    actions: that.options.enableContextMenu ? [\n                                        { icon: \"more-vertical\", iconClass: \"k-groupable-context-menu\" }\n                                    ] : null\n                                }).data(\"kendoChip\");\n                wrapper = indicator.wrapper;\n                icon = wrapper.find(\".k-chip-icon\").first();\n                wrapper.attr(`data-${kendo.ns}field`, field);\n                wrapper.attr(`data-${kendo.ns}title`, title || \"\");\n\n                if (id) {\n                    wrapper.attr(`data-${kendo.ns}id`, id);\n                }\n\n                icon.attr(\"title\", `(sorted ${dir == \"asc\" ? \"ascending\" : \"descending\"})`);\n                icon.attr(`data-${kendo.ns}dir`, dir);\n\n                return indicator;\n            },\n\n            _setIndicatorSortOptions: function(field, options) {\n                var indicator = $(this.indicator(field));\n                indicator.data(GROUP_SORT, options);\n            },\n\n            aggregates: function() {\n                var that = this;\n                var names;\n                var idx;\n                var length;\n\n                return that.element.find(that.options.filter).map(function() {\n                    var cell = $(this),\n                        aggregate = cell.attr(kendo.attr(\"aggregates\")),\n                        member = cell.attr(kendo.attr(\"field\"));\n\n                    if (aggregate && aggregate !== \"\") {\n                        names = aggregate.split(\",\");\n                        aggregate = [];\n                        for (idx = 0, length = names.length; idx < length; idx++) {\n                            aggregate.push({ field: member, aggregate: names[idx] });\n                        }\n                    }\n                    return aggregate;\n                }).toArray();\n            },\n\n            descriptors: function() {\n                var that = this,\n                    indicators = $(\".k-chip\", that.groupContainer),\n                    field,\n                    aggregates = that.aggregates();\n\n                return $.map(indicators, function(item) {\n                    item = $(item);\n                    field = item.attr(kendo.attr(\"field\"));\n                    var sortOptions = that.options.sort || {};\n                    var indicatorSortOptions = item.data(GROUP_SORT) || {};\n                    var dirIcon = item.find(\".k-chip-icon\");\n\n                    return {\n                        field: field,\n                        dir: dirIcon.attr(kendo.attr(\"dir\")),\n                        aggregates: aggregates || [],\n                        colID: item.attr(kendo.attr(\"id\")),\n                        compare: indicatorSortOptions.compare || sortOptions.compare\n                    };\n                });\n            },\n\n            _removeIndicator: function(indicator) {\n                var that = this;\n\n                that.trigger(REMOVEGROUP, {\n                    field: indicator.attr(kendo.attr(\"field\")),\n                    colID: indicator.attr(kendo.attr(\"id\")),\n                });\n                that._list.remove(indicator);\n                indicator.off();\n                indicator.removeData();\n                that._invalidateGroupContainer();\n                that._change();\n            },\n\n            _change: function() {\n                var that = this;\n                if (that.dataSource) {\n                    var descriptors = that.descriptors();\n                    if (that.trigger(\"change\", { groups: descriptors })) {\n                        that.refresh();\n                        return;\n                    }\n                    that.dataSource.group(descriptors);\n                }\n            },\n\n            _dropCuePosition: function(position) {\n                var that = this;\n                var dropCuePositions = this._dropCuePositions;\n                if (!dropCue.is(\":visible\") || dropCuePositions.length === 0) {\n                    return;\n                }\n\n                position = Math.ceil(position);\n\n                var lastCuePosition = dropCuePositions[dropCuePositions.length - 1],\n                    left = lastCuePosition.left,\n                    right = lastCuePosition.right,\n                    marginLeft = parseInt(lastCuePosition.element.css(\"marginLeft\"), 10),\n                    marginRight = parseInt(lastCuePosition.element.css(\"marginRight\"), 10),\n                    parentLeft = lastCuePosition.element.parent().position().left - parseInt(that.groupContainer.css(\"paddingLeft\"), 10);\n\n                if (position >= right && !isRtl || position < left && isRtl) {\n                    position = {\n                        left: lastCuePosition.element.position().left + (!isRtl ? outerWidth(lastCuePosition.element) + marginRight : parentLeft - marginLeft),\n                        element: lastCuePosition.element,\n                        before: false\n                    };\n                } else {\n                    position = $.grep(dropCuePositions, function(item) {\n                        return (item.left <= position && position <= item.right) || (isRtl && position > item.right);\n                    })[0];\n\n                    if (position) {\n                        position = {\n                            left: isRtl ? position.element.position().left + outerWidth(position.element) + marginRight + parentLeft : position.element.position().left - marginLeft,\n                            element: position.element,\n                            before: true\n                        };\n                    }\n                }\n\n                return position;\n            },\n            _drag: function(event) {\n                var position = this._dropCuePosition(event.x.location);\n\n                if (position) {\n                    dropCue.css({ left: position.left, right: \"auto\" });\n                }\n            },\n            _canDrag: function(element) {\n                var field = element.attr(kendo.attr(\"field\"));\n\n                return element.attr(kendo.attr(\"groupable\")) != \"false\" &&\n                    field &&\n                    (element.hasClass(\"k-chip\") ||\n                        !this.indicator(field))\n                    && !this.dataSource?._requestInProgress;\n            },\n            _canDrop: function(source, target, position) {\n                var next = source.next(),\n                    result = source[0] !== target[0] && (!next[0] || target[0] !== next[0] || (!isRtl && position > next.position().left || isRtl && position < next.position().left));\n                return result;\n            },\n            _dragEnd: function(draggable) {\n                var that = this,\n                    field = draggable.currentTarget.attr(kendo.attr(\"field\")),\n                    sourceIndicator = that.indicator(field);\n\n                if (draggable !== that.options.draggable && !draggable.dropped && sourceIndicator) {\n                    that._removeIndicator($(sourceIndicator));\n                }\n\n                that._dragCancel();\n            },\n            _dragCancel: function() {\n                dropCue.remove();\n                this._dropCuePositions = [];\n            },\n            _intializePositions: function() {\n                var that = this,\n                    indicators = $(\".k-chip\", that.groupContainer),\n                    left;\n\n                that._dropCuePositions = $.map(indicators, function(item) {\n                    item = $(item);\n                    left = kendo.getOffset(item).left;\n                    return {\n                        left: parseInt(left, 10),\n                        right: parseInt(left + outerWidth(item), 10),\n                        element: item\n                    };\n                });\n            },\n            _invalidateGroupContainer: function() {\n                var that = this;\n                var groupContainer = that.groupContainer;\n                var list = that._list;\n\n                if (groupContainer && list && list.element.is(\":empty\")) {\n                    this._messageContainer.text(this.options.messages.empty);\n                }\n            },\n\n            _createList: function() {\n                var that = this;\n\n                that.groupContainer.find(\".k-chip-list\").remove();\n                that._list = $(\"<div/>\").kendoChipList({ selectable: \"none\", size: that.options.size || \"medium\" }).data(\"kendoChipList\");\n                that._list.element.insertBefore(that._messageContainer);\n            }\n        });\n\n        kendo.ui.plugin(Groupable);\n\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    exports.__meta__ = __meta__;\n    exports.default = kendo$1;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}