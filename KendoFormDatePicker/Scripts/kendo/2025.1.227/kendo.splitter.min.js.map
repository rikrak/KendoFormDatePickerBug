{"version":3,"sources":["raw-js/kendo.splitter.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendo","_globals","Splitter","this","$","window","ui","keys","extend","Widget","pxUnitsRegex","percentageUnitsRegex","NS","EXPAND","COLLAPSE","CONTENTLOAD","ERROR","RESIZING","LAYOUTCHANGE","PANE","FOCUSED","PANECLASS","KPANE","KSCROLLABLE","KSTATIC_PANE","SPLITTER","KSPLITBAR","PANE_SIZING_PROP","HORIZONTAL","VERTICAL","MAX_NUMBER_VALUE","Number","MAX_SAFE_INTEGER","CLICK","RESIZE","PX","isPercentageSize","size","test","isPixelSize","isFluid","calculateSize","total","output","parseInt","Math","floor","panePropertyAccessor","propertyName","triggersResize","pane","value","paneConfig","element","find","data","arguments","length","options","panes","p","uid","name","resize","init","isHorizontal","that","fn","call","wrapper","orientation","toLowerCase","_dimension","_keys","decrease","LEFT","UP","increase","RIGHT","DOWN","_resizeStep","_marker","guid","substring","addClass","closest","removeClass","_initPanes","resizing","PaneResizing","triggerHandler","events","_addOverlays","_panes","append","_removeOverlays","children","remove","_attachEvents","on","_keydown","bind","e","currentTarget","focus","preventScroll","end","_togglePane","_arrowClick","document","_detachEvents","off","clickMoveClick","destroy","key","keyCode","target","navigationKeys","ctrlKey","isResizing","_triggerAction","move","preventDefault","HOME","prev","collapse","END","expand","ENTER","panesConfig","each","i","nodeName","_getDefaultPaneConfig","order","style","_initPane","scrollable","resizable","_updatePaneOrderStyles","parentElement","config","fixedSize","attr","isStaticPane","collapsible","css","toggleClass","Boolean","ajaxRequest","url","contentUrl","isLocalUrl","jQuery","ajax","type","dataType","success","html","trigger","error","xhr","status","shouldExecute","collapsed","stop","arrow","is","next","arrowType","parent","_updatePaneOrders","_getPaneElements","forEach","index","_updateSplitBar","splitbar","previousPane","nextPane","previousPaneEl","catIconIf","actionType","iconType","condition","icon","draggable","prevCollapsible","prevCollapsed","nextCollapsible","nextCollapsed","previousPaneId","isRtl","support","leftIcon","rightIcon","labelId","label","removeAttr","_updateSplitBars","prevAll","first","nextAll","_removeSplitBars","_resetAriaValueNow","splitBars","panesSizes","valueNow","joinDimension","round","setAttribute","_resize","splitBarsCount","sizingProperty","totalSize","_suppressResize","slice","after","sizedPanesWidth","freeSizedPanes","collapsedSize","add","push","freeSizePanesCount","freeSizePaneWidth","eq","sizingDomProperty","lastNonCollapsedPane","filter","last","toggle","_addPane","idx","paneElement","splice","appendTo","insertBefore","referencePane","insertAfter","min","max","_getPaneElement","paneIndex","Array","from","x","hasClass","_dragSplitterBar","splitterBarIndex","delta","leftPane","rightPane","_getAdjacentPanes","leftPaneNewSize","computedSize","isLeftPaneSizeInBounds","panesWithoutSize","canResizeBothPanes","_resizePane","leftPaneIndex","rightPaneIndex","leftPaneELement","rightPaneELement","_getPane","leftPaneSize","_getPaneOffsetSize","rightPaneSize","totalPaneSize","splitterSize","_getElementClientSize","getPixelSize","paneSize","_calculatePixelSize","leftPaneMaxSize","rightPaneMaxSize","_getAdjacentPanesMaxSize","rightMaxPixelSize","leftMaxPixelSize","constrainedSize","newSize","toPercentages","parseFloat","toPixel","_setPaneSize","_allExpandedPanesHaveSize","expandedPanes","_getPaneSizes","containerSize","numericSize","_getElementOffsetSize","rect","getBoundingClientRect","width","height","_getElementSize","sizeType","_getPaneIndex","indexOf","leftPaneMinSize","leftPaneMaxPixelSize","rightPaneMinSize","rightPaneMaxPixelSize","_getElementIndex","childrenSelector","matches","plugin","verticalDefaults","alternateSizingProperty","positioningProperty","mousePositioningProperty","horizontalDefaults","splitter","handle","owner","_element","_resizable","Resizable","hint","_createHint","start","_start","_max","_min","invalidClass","resizeend","_stop","prototype","press","pressed","offsetBoundaryProp","initialTarget","previousPaneConfig","nextPaneConfig","prevBoundary","nextBoundary","toPx","val","sender","cancel","prevMinSize","prevMaxSize","nextMinSize","nextMaxSize","_maxPosition","_minPosition","splitterBar","rtlModifier","y","splitbarPosition","position","left","top","ghostPosition","abs","ESC","initialDelta","kendo$1","__meta__","id","category","description","depends","default","Object","defineProperty"],"mappings":"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","file":"kendo.splitter.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('kendo.resizable.js'), require('kendo.icons.js')) :\n    typeof define === 'function' && define.amd ? define(['exports', 'kendo.resizable', 'kendo.icons'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.kendo = global.kendo || {}, global.kendo._globals = global.kendo._globals || {}, global.kendo._globals.Splitter = {})));\n})(this, (function (exports) {\n    const __meta__ = {\n        id: \"splitter\",\n        name: \"Splitter\",\n        category: \"web\",\n        description: \"The Splitter widget provides an easy way to create a dynamic layout of resizable and collapsible panes.\",\n        depends: [\"resizable\", \"icons\"]\n    };\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            ui = kendo.ui,\n            keys = kendo.keys,\n            extend = $.extend,\n            Widget = ui.Widget,\n            pxUnitsRegex = /^\\d+(\\.\\d+)?px$/i,\n            percentageUnitsRegex = /^\\d+(\\.\\d+)?%$/i,\n            NS = \".kendoSplitter\",\n            EXPAND = \"expand\",\n            COLLAPSE = \"collapse\",\n            CONTENTLOAD = \"contentLoad\",\n            ERROR = \"error\",\n            RESIZE = \"resize\",\n            RESIZING = \"resizing\",\n            LAYOUTCHANGE = \"layoutChange\",\n            HORIZONTAL = \"horizontal\",\n            VERTICAL = \"vertical\",\n            MOUSEENTER = \"mouseenter\",\n            CLICK = \"click\",\n            PANE = \"pane\",\n            MOUSELEAVE = \"mouseleave\",\n            FOCUSED = \"k-focus\",\n            KPANE = \"k-\" + PANE,\n            PANECLASS = \".\" + KPANE,\n            KSCROLLABLE = \"k-scrollable\",\n            TABINDEX = \"tabindex\",\n            ARIA_VALUEMIN = \"aria-valuemin\",\n            ARIA_VALUEMAX = \"aria-valuemax\",\n            ARIA_VALUENOW = \"aria-valuenow\",\n            ARIA_CONTROLS = \"aria-controls\",\n            ARIA_LABEL = \"aria-label\",\n            ARIA_LABELLEDBY = \"aria-labelledby\",\n            ARIA_ORIENTATION = \"aria-orientation\",\n            KSTATIC_PANE = \"k-pane-static\",\n            SPLITTER = \"k-splitter\",\n            KSPLITBAR = \"k-splitbar\",\n            SPLITTER_FLEX = \"k-splitter-flex\",\n            PANE_SIZING_PROP = \"flex-basis\",\n            HORIZONTAL = \"horizontal\",\n            VERTICAL = \"vertical\",\n            KHIDDEN = \"k-hidden\",\n            MAX_NUMBER_VALUE = Number.MAX_SAFE_INTEGER,\n            KPANE = \"k-pane\",\n            KPANE_FLEX = \"k-pane-flex\",\n            CLICK = \"click\",\n            RESIZE = \"resize\",\n            PX = \"px\";\n\n        function isPercentageSize(size) {\n            return percentageUnitsRegex.test(size);\n        }\n\n        function isPixelSize(size) {\n            return pxUnitsRegex.test(size) || /^\\d+$/.test(size);\n        }\n\n        function isFluid(size) {\n            return !isPercentageSize(size) && !isPixelSize(size);\n        }\n\n        function calculateSize(size, total) {\n            var output = parseInt(size, 10);\n\n            if (isPercentageSize(size)) {\n                output = Math.floor(output * total / 100);\n            }\n\n            return output;\n        }\n\n        function panePropertyAccessor(propertyName, triggersResize) {\n            return function(pane, value) {\n                var paneConfig = this.element.find(pane).data(PANE);\n\n                if (arguments.length == 1) {\n                    return paneConfig[propertyName];\n                }\n\n                ((this.options.panes || []).find(p => p.uid == paneConfig.uid) || {})[propertyName] = value;\n                paneConfig[propertyName] = value;\n                paneConfig.isFluid = isFluid(paneConfig.size);\n\n                if (triggersResize) {\n                    var splitter = this.element.data(\"kendo\" + this.options.name);\n                    splitter.resize(true);\n                }\n            };\n        }\n\n        var Splitter = Widget.extend({\n            init: function(element, options) {\n                var that = this,\n                    isHorizontal;\n\n                Widget.fn.init.call(that, element, options);\n\n                that.wrapper = that.element;\n\n                if (that.options.orientation) {\n                    isHorizontal = that.options.orientation.toLowerCase() != VERTICAL;\n                }\n\n                that.orientation = isHorizontal ? HORIZONTAL : VERTICAL;\n                that._dimension = isHorizontal ? \"width\" : \"height\";\n                that._keys = {\n                    decrease: isHorizontal ? keys.LEFT : keys.UP,\n                    increase: isHorizontal ? keys.RIGHT : keys.DOWN\n                };\n\n                that._resizeStep = 10;\n\n                that._marker = kendo.guid().substring(0, 8);\n\n                that.element.addClass(`${SPLITTER} ${SPLITTER_FLEX} ${SPLITTER}-${that.orientation}`);\n                that.element.closest(KPANE).removeClass(KSTATIC_PANE).addClass(KPANE_FLEX);\n                that._initPanes();\n\n                that.resizing = new PaneResizing(that);\n\n                that.element.triggerHandler(\"init\" + NS);\n            },\n            events: [\n                EXPAND,\n                COLLAPSE,\n                CONTENTLOAD,\n                ERROR,\n                RESIZE,\n                RESIZING,\n                LAYOUTCHANGE\n            ],\n\n            _addOverlays: function() {\n                this._panes().append(\"<div class='k-splitter-overlay k-overlay' />\");\n            },\n\n            _removeOverlays: function() {\n                this._panes().children(\".k-splitter-overlay\").remove();\n            },\n\n            _attachEvents: function() {\n                var that = this,\n                    orientation = that.options.orientation;\n\n                // do not use delegated events to increase performance of nested elements\n                that.element\n                    .children(\".k-splitbar-draggable-\" + orientation)\n                    .on(\"keydown\" + NS, that._keydown.bind(that))\n                    .on(\"mousedown\" + NS, function(e) { e.currentTarget.focus({ preventScroll: true }); })\n                    .on(\"focus\" + NS, function(e) { $(e.currentTarget).addClass(FOCUSED); })\n                    .on(\"blur\" + NS, function(e) {\n                        $(e.currentTarget).removeClass(FOCUSED);\n                        if (that.resizing) {\n                            that.resizing.end();\n                        }\n                    })\n                    .on(MOUSEENTER + NS, function() { $(this).addClass(\"k-splitbar-\" + that.orientation + \"-hover\"); })\n                    .on(MOUSELEAVE + NS, function() { $(this).removeClass(\"k-splitbar-\" + that.orientation + \"-hover\"); })\n                    .on(\"mousedown\" + NS, that._addOverlays.bind(that))\n                    .end()\n                    .children(\".k-splitbar\")\n                    .on(\"dblclick\" + NS, that._togglePane.bind(that))\n                    .children(\".k-collapse-next, .k-collapse-prev\").on(CLICK + NS, that._arrowClick(COLLAPSE)).end()\n                    .children(\".k-expand-next, .k-expand-prev\").on(CLICK + NS, that._arrowClick(EXPAND)).end()\n                    .end();\n\n                $(window).on(\"resize\" + NS + that._marker, that.resize.bind(that, false));\n                $(document).on(\"mouseup\" + NS + that._marker, that._removeOverlays.bind(that));\n            },\n\n            _detachEvents: function() {\n                var that = this;\n\n                that.element\n                    .children(\".k-splitbar-draggable-\" + that.orientation).off(NS).end()\n                    .children(\".k-splitbar\").off(\"dblclick\" + NS)\n                    .children(\".k-collapse-next, .k-collapse-prev, .k-expand-next, .k-expand-prev\").off(NS);\n\n                $(window).off(NS + that._marker);\n                $(document).off(NS + that._marker);\n            },\n\n            options: {\n                name: \"Splitter\",\n                clickMoveClick: true,\n                orientation: HORIZONTAL,\n                panes: []\n            },\n\n            destroy: function() {\n                Widget.fn.destroy.call(this);\n\n                this._detachEvents();\n\n                if (this.resizing) {\n                    this.resizing.destroy();\n                }\n\n                kendo.destroy(this.element);\n\n                this.wrapper = this.element = null;\n            },\n\n            _keydown: function(e) {\n                var that = this,\n                    key = e.keyCode,\n                    resizing = that.resizing,\n                    target = $(e.currentTarget),\n                    navigationKeys = that._keys,\n                    increase = key === navigationKeys.increase,\n                    decrease = key === navigationKeys.decrease,\n                    pane;\n\n                if (increase || decrease) {\n                    if (e.ctrlKey) {\n                        pane = target[decrease ? \"next\" : \"prev\"]();\n\n                        if (resizing && resizing.isResizing()) {\n                            resizing.end();\n                        }\n\n                        if (!pane[that._dimension]()) {\n                            that._triggerAction(EXPAND, pane);\n                        } else {\n                            that._triggerAction(COLLAPSE, target[decrease ? \"prev\" : \"next\"]());\n                        }\n                    } else if (resizing) {\n                        resizing.move((decrease ? -1 : 1) * that._resizeStep, target);\n                    }\n                    e.preventDefault();\n                } else if (key === keys.HOME) {\n                    pane = target.prev();\n                    that.collapse(pane);\n                    e.preventDefault();\n                } else if (key === keys.END) {\n                    pane = target.prev();\n                    that.expand(pane);\n                    e.preventDefault();\n                } else if (key === keys.ENTER && resizing) {\n                    resizing.end();\n                    e.preventDefault();\n\n                    that._togglePane(e);\n                }\n            },\n\n            _initPanes: function() {\n                var panesConfig = this.options.panes || [];\n                var that = this;\n\n                this.element\n                    .children()\n                    .each(function(i, pane) {\n                        if (pane.nodeName.toLowerCase() != \"script\") {\n                            panesConfig[i] = $.extend(that._getDefaultPaneConfig(), panesConfig[i], { order: i * 2 });\n                            panesConfig[i].isFluid = isFluid(panesConfig[i].size);\n                            pane.style.order = i * 2;\n\n                            that._initPane(pane, panesConfig[i]);\n                        }\n                    });\n\n                this.resize();\n            },\n            _getDefaultPaneConfig: function() {\n                return { scrollable: true, resizable: true, size: \"auto\", uid: kendo.guid() };\n            },\n            _updatePaneOrderStyles: function(parentElement) {\n                $(parentElement || this.element).children().each(function(i, pane) {\n                    if (pane.nodeName.toLowerCase() != \"script\") {\n                        let paneConfig = pane.data(PANE);\n\n                        paneConfig.order = i * 2;\n                        pane.style.order = i * 2;\n                    }\n                });\n            },\n            _initPane: function(pane, config) {\n                config = $.extend({}, this._getDefaultPaneConfig(), config);\n                config.fixedSize = config.size && config.size !== \"auto\";\n                pane = $(pane)\n                    .attr(\"role\", \"group\")\n                    .attr(\"data-uid\", config.uid)\n                    .addClass(KPANE);\n\n                let isStaticPane = !config.resizable && !config.collapsible || config.fixedSize;\n\n                pane.css(PANE_SIZING_PROP, config.size)\n                    .data(PANE, config)\n                    .toggleClass(KSTATIC_PANE, Boolean(isStaticPane))\n                    .toggleClass(KSCROLLABLE, Boolean(config.scrollable));\n\n                this.ajaxRequest(pane);\n            },\n\n            ajaxRequest: function(pane, url, data) {\n                var that = this,\n                    paneConfig;\n\n                pane = that.element.find(pane);\n                paneConfig = pane.data(PANE);\n\n                url = url || paneConfig.contentUrl;\n\n                if (url) {\n                    pane.append(\"<span class='k-icon k-i-loading k-pane-loading' />\");\n\n                    if (kendo.isLocalUrl(url)) {\n                        jQuery.ajax({\n                            url: url,\n                            data: data || {},\n                            type: \"GET\",\n                            dataType: \"html\",\n                            success: function(data) {\n                                pane.html(data);\n\n                                that.trigger(CONTENTLOAD, { pane: pane[0] });\n                            },\n                            error: function(xhr, status) {\n                                that.trigger(ERROR, {\n                                    pane: pane[0],\n                                    status: status,\n                                    xhr: xhr\n                                });\n                            }\n                        });\n                    } else {\n                        pane.removeClass(KSCROLLABLE)\n                            .html(\"<iframe src='\" + url + \"' frameborder='0' class='k-content-frame'>\" +\n                                \"This page requires frames in order to show content\" +\n                                \"</iframe>\");\n                    }\n                }\n            },\n\n            _triggerAction: function(type, pane) {\n                var paneConfig = pane.data(PANE);\n                var shouldExecute = (paneConfig.collapsed && type == EXPAND) || (!paneConfig.collapsed && type == COLLAPSE);\n\n                if (!paneConfig.collapsible) {\n                    return;\n                }\n\n                if (shouldExecute && !this.trigger(type, { pane: pane[0] })) {\n                    this[type](pane[0]);\n                }\n\n                this.resizing.stop();\n                this.resizing.end();\n            },\n\n            _togglePane: function(e) {\n                var that = this,\n                    target = $(e.target),\n                    arrow;\n\n                if (target.closest(\".k-splitter\")[0] != that.element[0]) {\n                    return;\n                }\n\n                arrow = target.children(\"span:not(.k-resize-handle)\");\n\n                if (arrow.length !== 1) {\n                    return;\n                }\n\n                if (arrow.is(\".k-collapse-prev\")) {\n                    that._triggerAction(COLLAPSE, target.prev());\n                } else if (arrow.is(\".k-collapse-next\")) {\n                    that._triggerAction(COLLAPSE, target.next());\n                } else if (arrow.is(\".k-expand-prev\")) {\n                    that._triggerAction(EXPAND, target.prev());\n                } else if (arrow.is(\".k-expand-next\")) {\n                    that._triggerAction(EXPAND, target.next());\n                }\n\n                that.resizing?.end();\n            },\n            _arrowClick: function(arrowType) {\n                var that = this;\n\n                return function(e) {\n                    var target = $(e.currentTarget),\n                        pane;\n\n                    if (target.closest(\".k-splitter\")[0] != that.element[0]) {\n                        return;\n                    }\n\n                    if (target.is(\".k-\" + arrowType + \"-prev\")) {\n                        pane = target.parent().prev();\n                    } else {\n                        pane = target.parent().next();\n                    }\n                    that._triggerAction(arrowType, pane);\n                };\n            },\n            _updatePaneOrders: function()\n            {\n                var that = this;\n                var panes = that._getPaneElements();\n\n                panes.forEach((pane, index) => {\n                    var paneConfig = $(pane).data(PANE);\n                    if (paneConfig) {\n                        paneConfig.order = index * 2;\n                        pane.style.order = index * 2;\n                    }\n                });\n            },\n            _updateSplitBar: function(splitbar, previousPane, nextPane, previousPaneEl) {\n                var catIconIf = function(actionType, iconType, condition) {\n                    var icon = iconType ? ui.icon({ icon: iconType, size: \"xsmall\" }) : \"\";\n                    return condition ? \"<span class='k-\" + actionType + \"'>\" + icon + \"</span>\" : \"\";\n                },\n                    orientation = this.orientation,\n                    draggable = (previousPane.resizable !== false) && (nextPane.resizable !== false),\n                    prevCollapsible = previousPane.collapsible,\n                    prevCollapsed = previousPane.collapsed,\n                    nextCollapsible = nextPane.collapsible,\n                    nextCollapsed = nextPane.collapsed,\n                    previousPaneId = previousPaneEl.attr(\"id\");\n\n                if (!previousPaneId) {\n                    previousPaneId = kendo.guid();\n                    previousPaneEl.attr(\"id\", previousPaneId);\n                }\n\n                const isRtl = kendo.support.isRtl(splitbar);\n                const leftIcon = isRtl ? \"caret-alt-right\" : \"caret-alt-left\";\n                const rightIcon = isRtl ? \"caret-alt-left\" : \"caret-alt-right\";\n\n                splitbar.addClass(\"k-splitbar k-splitbar-\" + orientation)\n                    .attr(\"role\", \"separator\")\n                    .attr(ARIA_VALUEMIN, \"0\")\n                    .attr(ARIA_VALUEMAX, \"100\")\n                    .attr(ARIA_CONTROLS, previousPaneId)\n                    .removeClass(\"k-splitbar-\" + orientation + \"-hover\")\n                    .toggleClass(\"k-splitbar-draggable-\" + orientation,\n                        draggable && !prevCollapsed && !nextCollapsed)\n                    .toggleClass(\"k-splitbar-static-\" + orientation,\n                        !draggable && !prevCollapsible && !nextCollapsible)\n                    .html(\n                        catIconIf(\"collapse-prev\", \"caret-alt-up\", prevCollapsible && !prevCollapsed && !nextCollapsed && orientation == VERTICAL) +\n                        catIconIf(\"collapse-prev\", leftIcon, prevCollapsible && !prevCollapsed && !nextCollapsed && orientation == HORIZONTAL) +\n                        catIconIf(\"expand-prev\", \"caret-alt-down\", prevCollapsible && prevCollapsed && !nextCollapsed && orientation == VERTICAL) +\n                        catIconIf(\"expand-prev\", rightIcon, prevCollapsible && prevCollapsed && !nextCollapsed && orientation == HORIZONTAL) +\n                        catIconIf(\"resize-handle\", null, draggable && orientation == VERTICAL) +\n                        catIconIf(\"resize-handle\", null, draggable && orientation == HORIZONTAL) +\n                        catIconIf(\"collapse-next\", \"caret-alt-down\", nextCollapsible && !nextCollapsed && !prevCollapsed && orientation == VERTICAL) +\n                        catIconIf(\"collapse-next\", rightIcon, nextCollapsible && !nextCollapsed && !prevCollapsed && orientation == HORIZONTAL) +\n                        catIconIf(\"expand-next\", \"caret-alt-up\", nextCollapsible && nextCollapsed && !prevCollapsed && orientation == VERTICAL) +\n                        catIconIf(\"expand-next\", leftIcon, nextCollapsible && nextCollapsed && !prevCollapsed && orientation == HORIZONTAL)\n                    );\n\n                if (previousPane.labelId) {\n                    splitbar.attr(ARIA_LABELLEDBY, previousPane.labelId);\n                } else if (previousPane.label) {\n                    splitbar.attr(ARIA_LABEL, previousPane.label);\n                }\n\n                if (orientation == HORIZONTAL) {\n                    splitbar.attr(ARIA_ORIENTATION, VERTICAL);\n                }\n\n                if (!draggable && !prevCollapsible && !nextCollapsible) {\n                    splitbar.removeAttr(TABINDEX);\n                }\n            },\n            _updateSplitBars: function() {\n                var that = this;\n                this.element.children(\".k-splitbar\").each(function() {\n                    var splitbar = $(this),\n                        previousPaneEl = splitbar.prevAll(PANECLASS).first(),\n                        previousPane = previousPaneEl.data(PANE),\n                        nextPane = splitbar.nextAll(PANECLASS).first().data(PANE);\n\n                    // TODO: check if the proper place to set order\n                    splitbar.css(\"order\", previousPane.order + 1);\n\n                    if (!nextPane) {\n                        return;\n                    }\n\n                    that._updateSplitBar(splitbar, previousPane, nextPane, previousPaneEl);\n                });\n            },\n            _removeSplitBars: function() {\n                this.element.children(\".k-splitbar\").remove();\n            },\n            _panes: function() {\n                if (!this.element) {\n                    return $();\n                }\n                return this.element.children(PANECLASS);\n            },\n\n            _resetAriaValueNow: function(splitBars, panesSizes) {\n                var i, splitbar, valueNow, joinDimension;\n\n                for (i = 0; i < splitBars.length; i++) {\n                    joinDimension = (panesSizes[i] + panesSizes[i + 1]) || 1;\n                    valueNow = Math.round(panesSizes[i] / joinDimension * 100);\n                    splitbar = splitBars[i];\n                    splitbar.setAttribute(ARIA_VALUENOW, valueNow);\n                }\n            },\n\n            _resize: function() {\n                var that = this,\n                    element = that.element,\n                    panes = element.children(PANECLASS),\n                    isHorizontal = that.orientation == HORIZONTAL,\n                    splitBars = element.children(\".k-splitbar\"),\n                    splitBarsCount = splitBars.length,\n                    sizingProperty = isHorizontal ? \"width\" : \"height\",\n                    totalSize = element[sizingProperty](),\n                    panesSizes = [];\n\n                that.wrapper.addClass(\"k-splitter-resizing\");\n\n                if (that._suppressResize) {\n                    return;\n                }\n\n                if (splitBarsCount === 0) {\n                    splitBarsCount = panes.length - 1;\n                    panes.slice(0, splitBarsCount)\n                        .after(\"<div tabindex='0' class='k-splitbar' data-marker='\" + that._marker + \"' />\");\n\n                    that._updateSplitBars();\n                    splitBars = element.children(\".k-splitbar\");\n                } else {\n                    that._updateSplitBars();\n                }\n\n                // discard splitbar sizes from total size\n                splitBars.each(function() {\n                    totalSize -= this[isHorizontal ? \"offsetWidth\" : \"offsetHeight\"];\n                });\n\n                var sizedPanesWidth = 0,\n                    sizedPanesCount = 0,\n                    freeSizedPanes = $();\n\n                panes\n                    .each(function() {\n                        var element = $(this),\n                            config = element.data(PANE) || {}, size;\n\n                        element.removeClass(\"k-collapsed\");\n                        if (config.collapsed) {\n                            size = config.collapsedSize ? calculateSize(config.collapsedSize, totalSize) : 0;\n                            element.css(\"overflow\", \"hidden\").addClass(\"k-collapsed\");\n                        } else if (config.isFluid || isFluid(config.size)) {\n                            freeSizedPanes = freeSizedPanes.add(this);\n                            panesSizes.push(false);\n                            return;\n                        } else { // sized in px/%, not collapsed\n                            size = calculateSize(config.size, totalSize);\n                        }\n\n                        sizedPanesCount++;\n                        sizedPanesWidth += size;\n                        panesSizes.push(size);\n                        element.css(PANE_SIZING_PROP, size + PX);\n                        return size;\n                    });\n\n                totalSize -= sizedPanesWidth;\n\n                var freeSizePanesCount = freeSizedPanes.length,\n                    freeSizePaneWidth = Math.floor(totalSize / freeSizePanesCount);\n\n                freeSizedPanes\n                    .slice(0, freeSizePanesCount - 1)\n                    .css(PANE_SIZING_PROP, freeSizePaneWidth + PX)\n                    .end()\n                    .eq(freeSizePanesCount - 1)\n                    .css(PANE_SIZING_PROP, (totalSize - (freeSizePanesCount - 1) * freeSizePaneWidth) + PX);\n\n                panesSizes.forEach(function(size, i) {\n                    if (size === false) {\n                        panesSizes[i] = freeSizePaneWidth;\n                    }\n                });\n\n                that._resetAriaValueNow(splitBars, panesSizes);\n\n                // arrange panes\n                var sizingDomProperty = isHorizontal ? \"offsetWidth\" : \"offsetHeight\";\n\n                if (freeSizePanesCount === 0) {\n                    var lastNonCollapsedPane = panes.filter(function() {\n                        return !(($(this).data(PANE) || {}).collapsed);\n                    }).last();\n\n                    if (lastNonCollapsedPane.length) {\n                        lastNonCollapsedPane[sizingProperty](totalSize + lastNonCollapsedPane[0][sizingDomProperty]);\n                    }\n                }\n\n                that._detachEvents();\n                that._attachEvents();\n\n                that.wrapper.removeClass(\"k-splitter-resizing\");\n\n                kendo.resize(panes);\n                that.trigger(LAYOUTCHANGE);\n            },\n            toggle: function(pane, expand) {\n                var that = this,\n                    paneConfig;\n\n                pane = that.element.find(pane);\n                paneConfig = pane.data(PANE);\n\n                if (!expand && paneConfig?.collapsible !== true) {\n                    return;\n                }\n\n                if (arguments.length == 1) {\n                    expand = paneConfig.collapsed === undefined$1 ? false : paneConfig.collapsed;\n                }\n\n                paneConfig.collapsed = !expand;\n\n                pane.toggleClass(KHIDDEN, paneConfig.collapsed && !paneConfig.collapsedSize);\n                pane.css(\"overflow\", paneConfig.collapsed && !paneConfig.collapsedSize ? \"hidden\" : \"auto\");\n                that.resize(true);\n            },\n\n            collapse: function(pane) {\n                this.toggle(pane, false);\n            },\n\n            expand: function(pane) {\n                this.toggle(pane, true);\n            },\n\n            _addPane: function(config, idx, paneElement) {\n                const that = this;\n\n                if (paneElement.length) {\n                    that.options.panes.splice(idx, 0, config);\n                    that._initPane(paneElement, config);\n\n                    that._removeSplitBars();\n                    that._updatePaneOrders();\n                    that.resize(true);\n                }\n\n                return paneElement;\n            },\n\n            append: function(config) {\n                config = config || {};\n\n                var that = this,\n                    paneElement = $(\"<div />\").appendTo(that.element);\n\n                return that._addPane(config, that.options.panes.length, paneElement);\n            },\n\n            insertBefore: function(config, referencePane) {\n                referencePane = $(referencePane);\n                config = config || {};\n\n                var that = this,\n                    idx = that.wrapper.children(\".k-pane\").index(referencePane),\n                    paneElement = $(\"<div />\").insertBefore($(referencePane));\n\n                return that._addPane(config, idx, paneElement);\n            },\n\n            insertAfter: function(config, referencePane) {\n                referencePane = $(referencePane);\n                config = config || {};\n\n                var that = this,\n                    idx = that.wrapper.children(\".k-pane\").index(referencePane),\n                    paneElement = $(\"<div />\").insertAfter($(referencePane));\n\n                return that._addPane(config, idx + 1, paneElement);\n            },\n\n            remove: function(pane) {\n                var that = this;\n                pane = that.wrapper.find(pane);\n\n                if (pane.length) {\n                    kendo.destroy(pane);\n                    pane.each(function(idx, element) {\n                        that.options.panes.splice(that.wrapper.children(\".k-pane\").index(element), 1);\n                        $(element).remove();\n                    });\n\n                    that._removeSplitBars();\n\n                    if (that.options.panes.length) {\n                        that.resize(true);\n                    }\n                }\n\n                return that;\n            },\n\n            size: panePropertyAccessor(\"size\", true),\n\n            min: panePropertyAccessor(\"min\"),\n\n            max: panePropertyAccessor(\"max\"),\n\n            _getPaneElement: function(paneIndex) {\n                const that = this;\n                const panes = that._getPaneElements();\n                return panes[paneIndex];\n            },\n\n            _getPaneElements: function() {\n                const that = this;\n                const panes = Array.from(that.element.children() || []).filter(x => $(x).hasClass(\"k-pane\") || $(x).hasClass(\"k-splitter\"));\n                return panes;\n            },\n            _dragSplitterBar: function(splitterBarIndex, delta) {\n                const that = this;\n                const { leftPane, rightPane } = that._getAdjacentPanes(splitterBarIndex);\n\n                const leftPaneNewSize = leftPane.computedSize + delta;\n                const isLeftPaneSizeInBounds = leftPaneNewSize > leftPane.min && leftPaneNewSize < leftPane.max;\n\n                const panesWithoutSize = that._getPaneElements().filter(x => !x.style[PANE_SIZING_PROP]);\n                const canResizeBothPanes = (leftPane.size || rightPane.size) && panesWithoutSize.length > 1;\n\n                if ((leftPane.size && rightPane.size) || canResizeBothPanes) {\n                    if (isLeftPaneSizeInBounds) {\n                        that._resizePane(leftPane, delta);\n                        that._resizePane(rightPane, -delta);\n                    }\n                } else if (rightPane.size) {\n                    that._resizePane(rightPane, -delta);\n                } else {\n                    that._resizePane(leftPane, delta);\n                }\n                return { leftPane, rightPane };\n            },\n            _getAdjacentPanes: function(splitterBarIndex) {\n                const that = this;\n                const leftPaneIndex = splitterBarIndex;\n                const rightPaneIndex = splitterBarIndex + 1;\n\n                const leftPaneELement = that._getPaneElement(leftPaneIndex);\n                const rightPaneELement = that._getPaneElement(rightPaneIndex);\n\n                const leftPane = that._getPane(leftPaneIndex);\n                const rightPane = that._getPane(rightPaneIndex);\n\n                const leftPaneSize = that._getPaneOffsetSize(leftPaneIndex);\n                const rightPaneSize = that._getPaneOffsetSize(rightPaneIndex);\n\n                const totalPaneSize = leftPaneSize + rightPaneSize;\n                const splitterSize = that._getElementClientSize(that.element, that.options.orientation);\n                const getPixelSize = paneSize => that._calculatePixelSize(paneSize, splitterSize);\n\n                const { leftPaneMaxSize, rightPaneMaxSize } = that._getAdjacentPanesMaxSize(leftPaneIndex, rightPaneIndex);\n                const rightMaxPixelSize = getPixelSize(rightPane && rightPane.max);\n                const leftMaxPixelSize = getPixelSize(leftPane && leftPane.max);\n\n                return {\n                    leftPane: {\n                        index: leftPaneIndex,\n                        computedSize: leftPaneSize,\n                        min: getPixelSize(leftPane && leftPane.min) || (rightMaxPixelSize ? totalPaneSize - rightMaxPixelSize : 0) || 0,\n                        max: leftPaneMaxSize,\n                        size: leftPaneELement.style[PANE_SIZING_PROP],\n                        collapsible: leftPane && leftPane.collapsible,\n                        uid: leftPane.uid\n                    },\n                    rightPane: {\n                        index: rightPaneIndex,\n                        computedSize: rightPaneSize,\n                        min: getPixelSize(rightPane && rightPane.min) || (leftMaxPixelSize ? totalPaneSize - leftMaxPixelSize : 0) || 0,\n                        max: rightPaneMaxSize,\n                        size: rightPaneELement.style[PANE_SIZING_PROP],\n                        collapsible: rightPane && rightPane.collapsible,\n                        uid: rightPane.uid\n                    }\n                };\n            },\n\n            _resizePane: function(pane, delta) {\n                const that = this;\n                const constrainedSize = clamp(pane.computedSize + delta, pane.min, pane.max);\n                let newSize = \"\";\n\n                if (isPercentageSize(pane.size)) {\n                    const splitterSize = that._getElementClientSize(that.element, that.options.orientation);\n                    newSize = toPercentages(100 * constrainedSize / splitterSize);\n                } else {\n                    newSize = toPixel(constrainedSize);\n                }\n                pane.size = newSize;\n                pane.isFluid = isFluid(newSize);\n                that._setPaneSize(pane.index, newSize);\n            },\n\n            _allExpandedPanesHaveSize: function() {\n                const that = this;\n                const expandedPanes = that.options.panes.filter(x => !x.collapsed);\n\n                if (expandedPanes.length) {\n                    return expandedPanes.filter(x => x.size).length;\n                }\n\n                return false;\n            },\n\n            _setPaneSize: function(paneIndex, size) {\n                const that = this;\n                const paneElement = that._getPaneElement(paneIndex);\n\n                if (!paneElement) {\n                    return;\n                }\n\n                if (!that._allExpandedPanesHaveSize()) {\n                    $(paneElement).addClass(KSTATIC_PANE);\n                }\n\n                paneElement.style[PANE_SIZING_PROP] = size;\n                let paneConfig = $(paneElement).data(\"pane\");\n                paneConfig.size = size;\n                paneConfig.isFluid = isFluid(size);\n\n                that.trigger(RESIZING, { pane: paneElement });\n            },\n\n            _getPaneSizes: function(paneIndex) {\n                const that = this;\n                const splitterSize = that._getElementClientSize(that.element, that.options.orientation);\n                const pane = that._getPane(paneIndex);\n                const paneSize = that._getPaneOffsetSize(paneIndex);\n                const paneMinSize = pane && pane.min ? that._calculatePixelSize(pane.min, splitterSize) : 0;\n                const paneMaxSize = pane && pane.max ? that._calculatePixelSize(pane.max, splitterSize) : MAX_NUMBER_VALUE;\n\n                return {\n                    size: paneSize,\n                    min: paneMinSize,\n                    max: paneMaxSize\n                };\n            },\n\n            _calculatePixelSize: function(size, containerSize) {\n                let numericSize = kendo.parseFloat(size);\n\n                if (isPercentageSize(size)) {\n                    numericSize = (containerSize * numericSize / 100);\n                }\n\n                return numericSize;\n            },\n\n            _getPaneOffsetSize: function(paneIndex) {\n                const that = this;\n                const paneElement = that._getPaneElement(paneIndex);\n                const size = that._getElementOffsetSize(paneElement, that.options.orientation);\n                return size;\n            },\n\n\n            _getElementOffsetSize: function(element, orientation) {\n                if (!element) {\n                    return 0;\n                }\n\n                const rect = element.getBoundingClientRect();\n\n                if (orientation === HORIZONTAL) {\n                    return rect.width;\n                } else {\n                    return rect.height;\n                }\n            },\n\n            _getElementClientSize: function(element, orientation) {\n                const that = this;\n\n                return that._getElementSize(element, orientation, \"client\");\n            },\n\n            _getElementSize: function(element, orientation, sizeType) {\n                if (!element) {\n                    return 0;\n                }\n\n                element = element[0];\n\n                if (orientation === HORIZONTAL) {\n                    return element[`${sizeType}Width`];\n                } else {\n                    return element[`${sizeType}Height`];\n                }\n            },\n\n            _getPane: function(paneIndex) {\n                const that = this;\n\n                return (that.options.panes || [])[paneIndex];\n            },\n\n            _getPaneIndex: function(pane) {\n                const that = this;\n\n                return that.options.panes.indexOf(pane);\n            },\n\n            _getAdjacentPanesMaxSize: function(leftPaneIndex, rightPaneIndex) {\n                const that = this;\n                const {\n                    size: leftPaneSize,\n                    min: leftPaneMinSize,\n                    max: leftPaneMaxPixelSize\n                } = that._getPaneSizes(leftPaneIndex);\n\n                const {\n                    size: rightPaneSize,\n                    min: rightPaneMinSize,\n                    max: rightPaneMaxPixelSize\n                } = that._getPaneSizes(rightPaneIndex);\n\n                const totalPaneSize = leftPaneSize + rightPaneSize;\n\n                const leftPaneMaxSize = Math.min(leftPaneMaxPixelSize, totalPaneSize - rightPaneMinSize);\n                const rightPaneMaxSize = Math.min(rightPaneMaxPixelSize, totalPaneSize - leftPaneMinSize);\n\n                return {\n                    leftPaneMaxSize,\n                    rightPaneMaxSize\n                };\n            },\n            _getElementIndex: function(element, childrenSelector) {\n                if (!element) {\n                    return [].indexOf(element);\n                }\n\n                let children = Array.from(element.parent().children());\n\n                if (childrenSelector) {\n                    children = children.filter(x => x.matches(childrenSelector));\n                }\n\n                return Array.from(children).indexOf(element[0]);\n            },\n        });\n\n        ui.plugin(Splitter);\n\n        function toPercentages(value) {\n            return `${value}%`;\n        }\n\n        function toPixel(value) {\n            return kendo.parseFloat(value) + \"px\";\n        }\n\n        function percentage(partialValue, totalValue) {\n            return (100 * partialValue) / totalValue;\n        }\n\n        function clamp(value, min, max) {\n            return Math.min(max, Math.max(min, value));\n        }\n\n        var verticalDefaults = {\n            sizingProperty: \"height\",\n            sizingDomProperty: \"offsetHeight\",\n            alternateSizingProperty: \"width\",\n            positioningProperty: \"top\",\n            mousePositioningProperty: \"pageY\"\n        };\n\n        var horizontalDefaults = {\n            sizingProperty: \"width\",\n            sizingDomProperty: \"offsetWidth\",\n            alternateSizingProperty: \"height\",\n            positioningProperty: \"left\",\n            mousePositioningProperty: \"pageX\"\n        };\n\n        function PaneResizing(splitter) {\n            var that = this,\n                orientation = splitter.orientation,\n                handle = \".k-splitbar-draggable-\" + orientation + \"[data-marker=\" + splitter._marker + \"]\";\n\n            if (splitter.options.clickMoveClick) {\n                handle += \",.k-ghost-splitbar\";\n            }\n\n            that.owner = splitter;\n            that._element = splitter.element;\n            that.orientation = orientation;\n\n            extend(that, orientation === HORIZONTAL ? horizontalDefaults : verticalDefaults);\n\n            that._resizable = new kendo.ui.Resizable(splitter.element, {\n                orientation: orientation,\n                handle: handle,\n                clickMoveClick: splitter.options.clickMoveClick,\n                hint: that._createHint.bind(that),\n                start: that._start.bind(that),\n                max: that._max.bind(that),\n                min: that._min.bind(that),\n                invalidClass: \"k-restricted-size-\" + orientation,\n                resize: that._resize.bind(that),\n                resizeend: that._stop.bind(that)\n            });\n        }\n\n        PaneResizing.prototype = {\n            stop: function() {\n                this._resizable._stop();\n            },\n\n            press: function(target) {\n                this._resizable.press(target);\n                this.pressed = true;\n            },\n\n            move: function(delta, target) {\n                if (!target.hasClass(\"k-splitbar-draggable-horizontal\") && !target.hasClass(\"k-splitbar-draggable-vertical\")) {\n                    return;\n                }\n\n                const splitterBarIndex = this.owner._getElementIndex(target, `.${KSPLITBAR}`);\n                const { leftPane, rightPane } = this.owner._dragSplitterBar(splitterBarIndex, delta);\n                this.owner.trigger(RESIZE, { leftPane: leftPane, rightPane: rightPane });\n            },\n\n            end: function() {\n                this._resizable.end();\n                this.pressed = false;\n            },\n\n            destroy: function() {\n                this._resizable.destroy();\n                this._resizable = this._element = this.owner = null;\n            },\n\n            isResizing: function() {\n                return this._resizable.resizing;\n            },\n\n            _createHint: function(handle) {\n                var that = this;\n                return $(\"<div class='k-ghost-splitbar k-ghost-splitbar-\" + that.orientation + \"' />\")\n                    .css(\"z-index\", 99)\n                    .css(that.alternateSizingProperty, handle[that.alternateSizingProperty]());\n            },\n\n            _start: function(e) {\n                var that = this,\n                    splitbar = $(e.currentTarget);\n\n                const isRtl = kendo.support.isRtl(that._element);\n                let offsetBoundaryProp = that.orientation === HORIZONTAL ? \"offsetLeft\" : \"offsetTop\";\n                const splitterBarIndex = that.owner._getElementIndex(splitbar, `.${KSPLITBAR}`);\n\n                const leftPaneELement = that.owner._getPaneElement(splitterBarIndex);\n                const rightPaneELement = that.owner._getPaneElement(splitterBarIndex + 1);\n                let previousPane = $((that.orientation === HORIZONTAL && isRtl) ? rightPaneELement : leftPaneELement);\n                let nextPane = $((that.orientation === HORIZONTAL && isRtl) ? leftPaneELement : rightPaneELement);\n\n                if ($(e.initialTarget).closest(\".k-expand-next, .k-expand-prev, .k-collapse-next, .k-collapse-prev\").length > 0 ||\n                    !nextPane.length ||\n                    !previousPane.length) {\n                    e.preventDefault();\n                    return;\n                }\n\n                var previousPaneConfig = previousPane.data(PANE),\n                    nextPaneConfig = nextPane.data(PANE),\n                    prevBoundary = parseInt(previousPane[0][offsetBoundaryProp], 10),\n                    nextBoundary = parseInt(nextPane[0][offsetBoundaryProp], 10) + nextPane[0][that.sizingDomProperty] - splitbar[0][that.sizingDomProperty],\n                    totalSize = parseInt(that._element.css(that.sizingProperty), 10),\n                    toPx = function(value) {\n                        var val = parseInt(value, 10);\n                        return (isPixelSize(value) ? val : (totalSize * val) / 100) || 0;\n                    };\n\n                if (!previousPaneConfig || !nextPaneConfig) {\n                    e.preventDefault();\n                    e.sender.draggable.clickMoveClick.cancel();\n                    that.owner.element.find(\".k-ghost-splitbar\").remove();\n                    return;\n                }\n\n                var prevMinSize = toPx(previousPaneConfig.min),\n                    prevMaxSize = toPx(previousPaneConfig.max) || nextBoundary - prevBoundary,\n                    nextMinSize = toPx(nextPaneConfig.min),\n                    nextMaxSize = toPx(nextPaneConfig.max) || nextBoundary - prevBoundary;\n\n                that.previousPane = previousPane;\n                that.nextPane = nextPane;\n                that._maxPosition = Math.min(nextBoundary - nextMinSize, prevBoundary + prevMaxSize);\n                that._minPosition = Math.max(prevBoundary + prevMinSize, nextBoundary - nextMaxSize);\n            },\n            _max: function() {\n                return this._maxPosition;\n            },\n            _min: function() {\n                return this._minPosition;\n            },\n            _resize: function(e) {\n                let that = this;\n                let splitter = that.owner;\n                let orientation = splitter.orientation;\n                let delta;\n                let owner = this.owner;\n                const splitterBar = e.currentTarget || e.target;\n\n                if (!splitterBar) {\n                    return;\n                }\n\n                const splitterBarIndex = splitter._getElementIndex(splitterBar, `.${KSPLITBAR}`);\n                const rtlModifier = kendo.support.isRtl(that._element) ? -1 : 1;\n                if (orientation === HORIZONTAL) {\n                    delta = e.x.delta * rtlModifier;\n                } else {\n                    delta = e.y.delta;\n                }\n\n                let splitbarPosition = orientation === HORIZONTAL ? splitterBar.position().left : splitterBar.position().top;\n                let ghostPosition = e.position;\n\n                if (Math.abs(splitbarPosition - ghostPosition) > 2) {\n                    owner._dragSplitterBar(splitterBarIndex, delta);\n                }\n            },\n            _stop: function(e) {\n                var that = this,\n                    splitbar = $(e.currentTarget),\n                    owner = that.owner;\n                let isRtl = kendo.support.isRtl(that._element);\n                owner._panes().children(\".k-splitter-overlay\").remove();\n\n                if (e.keyCode !== kendo.keys.ESC) {\n                    let delta = owner.orientation === HORIZONTAL ? e.x.initialDelta : e.y.initialDelta;\n                    let splitbarPosition = owner.orientation === HORIZONTAL ? splitbar.position().left : splitbar.position().top;\n                    let ghostPosition = e.position;\n                    let rtlModifier = (owner.orientation === HORIZONTAL && isRtl) ? -1 : 1;\n\n                    const splitterBarIndex = this.owner._getElementIndex(e.currentTarget, `.${KSPLITBAR}`);\n                    if (Math.abs(splitbarPosition - ghostPosition) > 2) {\n                        owner._dragSplitterBar(splitterBarIndex, delta * rtlModifier);\n                    }\n\n                    const { leftPane, rightPane } = owner._getAdjacentPanes(splitterBarIndex);\n                    owner.trigger(RESIZE, { leftPane: leftPane, rightPane: rightPane });\n                }\n\n                return false;\n            }\n        };\n\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    exports.__meta__ = __meta__;\n    exports.default = kendo$1;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}