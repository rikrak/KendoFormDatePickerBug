{"version":3,"sources":["raw-js/kendo.window.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendo","_globals","Window","this","$","undefined$1","templates","window","Widget","ui","TabKeyTrap","Popup","Draggable","isPlainObject","activeElement","_activeElement","outerWidth","_outerWidth","outerHeight","_outerHeight","extend","each","template","BODY","NS","MODAL_NS","KWINDOW","KWINDOWTITLE","KWINDOWTITLEBAR","KWINDOWCONTENT","KWINDOWRESIZEHANDLES","KOVERLAY","KWINDOWMINIMIZED","KCONTENTFRAME","LOADINGICONCLASS","KHOVERSTATE","KFOCUSEDSTATE","MAXIMIZEDSTATE","INLINE_FLEX","VISIBLE","KHIDDEN","HIDDEN","CURSOR","OPEN","ACTIVATE","DEACTIVATE","CLOSE","REFRESH","RESIZESTART","RESIZEEND","DRAGSTART","DRAGEND","RESTORE","ERROR","OVERFLOW","DATADOCOVERFLOWRULE","ZINDEX","MINIMIZE_MAXIMIZEICONSELECTORS","KPINICONCLASSSELECTOR","KUNPINICONCLASSSELECTOR","PIN_UNPINICONCLASSSELECTOR","TITLEBAR_BUTTONSSELECTOR","REFRESHICONSELECTOR","WINDOWEVENTSHANDLED","zero","isLocalUrl","SIZE","small","medium","large","defined","x","toInt","element","property","parseInt","css","constrain","value","low","high","isNaN","toString","indexOf","Math","max","min","Infinity","executableScript","type","toLowerCase","getPosition","elem","result","top","offsetTop","left","offsetLeft","parent","offsetParent","parentOverflowX","parentOverflowY","scrollTop","scrollLeft","init","options","wrapper","visibility","display","position","content","windowContent","globalWindow","id","that","offset","suppressActions","actions","length","fn","call","appendTo","containment","draggable","first","url","find","filter","remove","is","document","body","contains","visible","closest","addClass","attr","_createWindow","title","_dimensions","_footerTemplate","append","_footerMessages","themeColor","getValidCssClass","minTop","minLeft","maxTop","maxLeft","_position","refresh","toFront","modal","children","_overlay","opacity","on","_buttonEnter","bind","_buttonLeave","_windowActionHandler","_keydown","_focus","_blur","_keydownContent","data","widgetInstance","not","i","_resizable","_draggable","pinned","pin","role","add","support","mousedown","touchScroller","_resizeHandler","_onDocumentResize","_marker","guid","substring","trigger","notify","_tabKeyTrap","trap","shouldTrap","_showWatermarkOverlay","e","currentTarget","removeClass","width","height","maxHeight","sizeClass","size","dimensions","contentBoxSizing","lrBorderWidth","tbBorderWidth","paddingTop","_isPinned","_updateBoundaries","maxWidth","minWidth","minHeight","hide","containmentTop","containmentLeft","parseFloat","Number","replace","innerWidth","innerHeight","clientWidth","scrollbar","clientHeight","_animationOptions","animation","open","effects","close","_resize","resize","resizable","resizing","off","destroy","target","toggleMaximization","split","index","handler","resizeHandle","WindowResizing","dragging","WindowDragging","dragHandle","clickMoveClick","_actions","icon","container","windowSpecificCommands","icons","maximize","custom","map","action","name","html","render","setOptions","doc","cachedOptions","JSON","parse","stringify","_containerScrollTop","_containerScrollLeft","scrollable","restore","_enableDocumentScrolling","events","zoom","direction","fade","duration","properties","scale","autoFocus","isMaximized","isMinimized","_closable","inArray","keys","keyCode","ESC","stopPropagation","_close","handled","newWidth","newHeight","w","h","distance","_closing","altKey","unpin","UP","DOWN","minimize","getOffset","ctrlKey","LEFT","RIGHT","preventDefault","overlay","zIndex","insertBefore","preventScroll","_stopDocumentScrolling","_actionForIcon","exec","className","_modals","windowInstance","windowElements","modals","_object","push","sort","a","b","style","widget","getKendoWindow","center","newTop","newLeft","documentWindow","_scrollIsAppended","encoded","titleBar","titleElement","arguments","text","htmlEncode","prepend","titlebar","scrollContainer","empty","otherModalsVisible","showOptions","contentElement","kendoStop","Fade","overlayFx","fx","fadeIn","endValue","play","show","kendoAnimate","complete","_activate","_removeOverlay","suppressAnimation","hideOverlay","hideOptions","fadeOut","startValue","last","systemTriggered","defaultPrevented","userTriggered","reverse","_deactivate","iframe","lastModal","_actionable","_shouldFocus","active","avoidFocus","currentWindow","containmentContext","openAnimation","originalZIndex","windowObject","zIndexNew","setTimeout","windowTop","restoreOptions","end","removeAttr","_sizingAction","actionId","callback","eq","before","toggle","_storeOverflowRule","$body","$html","_restoreOverflowRule","$element","_isOverflowStored","overflowRule","get","overflow","removeData","win","pinIcon","wnd","zoomLevel","showIframe","initOptions","src","contentFrame","_triggerRefresh","_ajaxRequest","toggleClass","_ajaxComplete","clearTimeout","_loadingIconTimeout","_ajaxError","xhr","status","_ajaxSuccess","contentTemplate","prop","_showLoading","ajax","dataType","cache","error","success","_destroy","unbind","iframeSrcAttributes","contentHtml","isRtl","getAttribute","hasClass","editor","owner","_preventDragging","group","dragstart","drag","dragend","userEvents","addOverlay","removeOverlay","dragcancel","iconName","renderButton","fillMode","prototype","elementPadding","initialPosition","resizeDirection","initialSize","containerOffset","marginTop","marginLeft","test","wrapperPosition","relativeElMarginLeft","relativeElMarginTop","_relativeElMarginLeft","_relativeElMarginTop","windowBottom","windowRight","rtl","leftRtlOffset","scrollOffset","location","y","newWindowTop","reset","initialWindowPosition","initialPointerPosition","startPosition","client","axis","_finishDrag","plugin","jQuery","kendo$1","__meta__","category","description","depends","features","default","Object","defineProperty"],"mappings":"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","file":"kendo.window.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('kendo.draganddrop.js'), require('kendo.popup.js'), require('kendo.icons.js'), require('kendo.html.button.js')) :\n    typeof define === 'function' && define.amd ? define(['exports', 'kendo.draganddrop', 'kendo.popup', 'kendo.icons', 'kendo.html.button'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.kendo = global.kendo || {}, global.kendo._globals = global.kendo._globals || {}, global.kendo._globals.Window = {})));\n})(this, (function (exports) {\n    const __meta__ = {\n            id: \"window\",\n            name: \"Window\",\n            category: \"web\",\n            description: \"The Window widget displays content in a modal or non-modal HTML window.\",\n            depends: [ \"draganddrop\", \"popup\", \"icons\" ],\n            features: [ {\n                id: \"window-fx\",\n                name: \"Animation\",\n                description: \"Support for animation\",\n                depends: [ \"fx\" ]\n            } ]\n        };\n\n        (function($, undefined$1) {\n            var kendo = window.kendo,\n                Widget = kendo.ui.Widget,\n                TabKeyTrap = kendo.ui.Popup.TabKeyTrap,\n                Draggable = kendo.ui.Draggable,\n                isPlainObject = $.isPlainObject,\n                activeElement = kendo._activeElement,\n                outerWidth = kendo._outerWidth,\n                outerHeight = kendo._outerHeight,\n                extend = $.extend,\n                each = $.each,\n                template = kendo.template,\n                BODY = \"body\",\n                templates,\n                NS = \".kendoWindow\",\n                MODAL_NS = \".kendoWindowModal\",\n                // classNames\n                KWINDOW = \".k-window\",\n                KWINDOWTITLE = \".k-window-title\",\n                KWINDOWTITLEBAR = KWINDOWTITLE + \"bar\",\n                KWINDOWCONTENT = \".k-window-content\",\n                KDIALOGCONTENT = \".k-dialog-content\",\n                KWINDOWRESIZEHANDLES = \".k-resize-handle\",\n                KOVERLAY = \".k-overlay\",\n                KWINDOWMINIMIZED = \"k-window-minimized\",\n                KCONTENTFRAME = \"k-content-frame\",\n                LOADINGICONCLASS = \"k-i-loading\",\n                KHOVERSTATE = \"k-hover\",\n                KFOCUSEDSTATE = \"k-focus\",\n                MAXIMIZEDSTATE = \"k-window-maximized\",\n                INLINE_FLEX = \"k-display-inline-flex\",\n                // constants\n                VISIBLE = \":visible\",\n                KHIDDEN = \"k-hidden\",\n                HIDDEN = \"hidden\",\n                CURSOR = \"cursor\",\n                // events\n                OPEN = \"open\",\n                ACTIVATE = \"activate\",\n                DEACTIVATE = \"deactivate\",\n                CLOSE = \"close\",\n                REFRESH = \"refresh\",\n                MINIMIZE = \"minimize\",\n                MAXIMIZE = \"maximize\",\n                RESIZESTART = \"resizeStart\",\n                RESIZE = \"resize\",\n                RESIZEEND = \"resizeEnd\",\n                DRAGSTART = \"dragstart\",\n                DRAGEND = \"dragend\",\n                RESTORE = \"restore\",\n                KENDOKEYDOWN = \"kendoKeydown\",\n                ERROR = \"error\",\n                OVERFLOW = \"overflow\",\n                DATADOCOVERFLOWRULE = \"original-overflow-rule\",\n                ZINDEX = \"zIndex\",\n                MINIMIZE_MAXIMIZEICONSELECTORS = \".k-window-titlebar-actions .k-i-window-minimize,.k-window-titlebar-actions .k-i-window,.k-window-titlebar-actions .k-svg-i-window-minimize,.k-window-titlebar-actions .k-svg-i-window\",\n                KPINICONCLASSSELECTOR = \".k-i-pin,.k-svg-i-pin\",\n                KUNPINICONCLASSSELECTOR = \".k-i-unpin,.k-svg-i-unpin\",\n                PIN_UNPINICONCLASSSELECTOR = KPINICONCLASSSELECTOR + \",\" + KUNPINICONCLASSSELECTOR,\n                TITLEBAR_BUTTONSSELECTOR = \".k-window-titlebar .k-window-titlebar-action\",\n                REFRESHICONSELECTOR = \".k-window-titlebar .k-i-arrow-rotate-cw,.k-window-titlebar .k-svg-i-arrow-rotate-cw\",\n                WINDOWEVENTSHANDLED = \"WindowEventsHandled\",\n                zero = /^0[a-z]*$/i,\n                isLocalUrl = kendo.isLocalUrl,\n                SIZE = {\n                    small: \"k-window-sm\",\n                    medium: \"k-window-md\",\n                    large: \"k-window-lg\"\n                };\n\n            function defined(x) {\n                return (typeof x != \"undefined\");\n            }\n\n            function toInt(element, property) {\n                return parseInt(element.css(property), 10) || 0;\n            }\n\n            function constrain(value, low, high) {\n                var normalizedValue;\n\n                if (value && isNaN(value) && value.toString().indexOf(\"px\") < 0) {\n                    normalizedValue = value;\n                } else {\n                    normalizedValue = Math.max(\n                        Math.min(parseInt(value, 10), high === Infinity ? high : parseInt(high, 10)),\n                        low === -Infinity ? low : parseInt(low, 10)\n                    );\n                }\n\n                return normalizedValue;\n            }\n\n            function executableScript() {\n                return !this.type || this.type.toLowerCase().indexOf(\"script\") >= 0;\n            }\n\n\n            function getPosition(elem) {\n                var result = { top: elem.offsetTop, left: elem.offsetLeft },\n                    parent = elem.offsetParent;\n\n                while (parent) {\n                    result.top += parent.offsetTop;\n                    result.left += parent.offsetLeft;\n\n                    var parentOverflowX = $(parent).css(\"overflowX\");\n                    var parentOverflowY = $(parent).css(\"overflowY\");\n\n                    if (parentOverflowY === \"auto\" || parentOverflowY === \"scroll\") {\n                        result.top -= parent.scrollTop;\n                    }\n\n                    if (parentOverflowX === \"auto\" || parentOverflowX === \"scroll\") {\n                        result.left -= parent.scrollLeft;\n                    }\n\n                    parent = parent.offsetParent;\n                }\n\n                return result;\n            }\n\n            var Window = Widget.extend({\n                init: function(element, options) {\n                    var that = this,\n                        wrapper,\n                        offset = {},\n                        visibility, display, position,\n                        isVisible = false,\n                        content,\n                        windowContent,\n                        windowFrame,\n                        globalWindow,\n                        suppressActions = options && options.actions && !options.actions.length,\n                        id;\n\n                    Widget.fn.init.call(that, element, options);\n                    options = that.options;\n                    position = options.position;\n                    element = that.element;\n                    content = options.content;\n                    globalWindow = $(window);\n\n                    if (suppressActions) {\n                        options.actions = [];\n                    }\n\n                    that.appendTo = $(options.appendTo);\n\n                    that.containment = options.draggable.containment ? $(options.draggable.containment).first() : null;\n\n                    if (content && !isPlainObject(content)) {\n                        content = options.content = { url: content };\n                    }\n\n                    // remove script blocks to prevent double-execution\n                    element.find(\"script\").filter(executableScript).remove();\n\n                    if (!element.parent().is(that.appendTo) && !that.containment && (position.top === undefined$1 || position.left === undefined$1)) {\n                        if (element.is(VISIBLE)) {\n                            offset = element.offset();\n                            isVisible = true;\n                        } else {\n                            visibility = element.css(\"visibility\");\n                            display = element.css(\"display\");\n\n                            element.css({ visibility: HIDDEN, display: \"\" });\n\n                            if (document.body.contains(element[0])) {\n                                offset = element.offset();\n                            } else {\n                                offset = { top: 0, left: 0 };\n                            }\n\n                            element.css({ visibility: visibility, display: display });\n                        }\n\n                        if (position.top === undefined$1) {\n                            position.top = offset.top;\n                        }\n                        if (position.left === undefined$1) {\n                            position.left = offset.left;\n                        }\n                    }\n\n                    if (!defined(options.visible) || options.visible === null) {\n                        options.visible = element.is(VISIBLE);\n                    }\n\n                    wrapper = that.wrapper = element.closest(KWINDOW);\n\n                    if (!element.is(\".k-window-content\") || !wrapper[0]) {\n                        element.addClass(\"k-window-content\");\n                        element.attr(\"tabindex\", 0);\n                        that._createWindow(element, options);\n                        wrapper = that.wrapper = element.closest(KWINDOW);\n\n                        that.title(that.options.title);\n                        that._dimensions();\n\n                        if (options._footerTemplate) {\n                            that.wrapper.append(kendo.template(options._footerTemplate)(options._footerMessages));\n                        }\n                    }\n\n                    if (options.themeColor && options.themeColor !== \"none\") {\n                        wrapper.addClass(kendo.getValidCssClass(\"k-window-\", \"themeColor\", options.themeColor));\n                    }\n\n                    that.minTop = that.minLeft = -Infinity;\n                    that.maxTop = that.maxLeft = Infinity;\n                    that._position();\n\n                    if (content) {\n                        that.refresh(content);\n                    }\n\n                    if (options.visible) {\n                        that.toFront(null, !options.modal);\n                    }\n\n                    windowContent = wrapper.children(KWINDOWCONTENT);\n\n                    if (options.visible && options.modal) {\n                        that._overlay(wrapper.is(VISIBLE)).css({ opacity: 0.5 });\n                    }\n\n                    wrapper\n                        .on(\"mouseenter\" + NS, TITLEBAR_BUTTONSSELECTOR, that._buttonEnter.bind(that))\n                        .on(\"mouseleave\" + NS, TITLEBAR_BUTTONSSELECTOR, that._buttonLeave.bind(that))\n                        .on(\"click\" + NS, \"> \" + TITLEBAR_BUTTONSSELECTOR, that._windowActionHandler.bind(that))\n                        .on(\"keydown\" + NS, that, that._keydown.bind(that))\n                        .on(\"focus\" + NS, that._focus.bind(that))\n                        .on(\"blur\" + NS, that._blur.bind(that));\n\n                    windowContent\n                        .on(\"keydown\" + NS, that, that._keydownContent.bind(that));\n\n                    windowFrame = windowContent.find(\".\" + KCONTENTFRAME)[0];\n\n                    if (windowFrame && !globalWindow.data(WINDOWEVENTSHANDLED)) {\n\n                        globalWindow.on(\"blur\" + NS, function() {\n                            var element = $(document.activeElement).parent(KWINDOWCONTENT);\n                            if (element.length) {\n                                var windowInstance = kendo.widgetInstance(element);\n                                windowInstance._focus();\n                            }\n                        });\n\n                        globalWindow.on(\"focus\" + NS, function() {\n                            $(KWINDOWCONTENT).not(KDIALOGCONTENT).each(function(i, element) {\n                                kendo.widgetInstance($(element))._blur();\n                            });\n                        });\n\n                        globalWindow.data(WINDOWEVENTSHANDLED, true);\n                    }\n\n                    this._resizable();\n\n                    this._draggable();\n\n                    if (options.pinned && this.wrapper.is(\":visible\")) {\n                        that.pin();\n                    }\n\n                    id = element.attr(\"id\");\n                    if (id) {\n                        id = id + \"_wnd_title\";\n                        wrapper.attr({\n                                \"role\": \"dialog\",\n                                \"aria-labelledby\": id\n                            }).children(KWINDOWTITLEBAR)\n                            .children(KWINDOWTITLE)\n                            .attr(\"id\", id);\n                    }\n\n                    wrapper.add(wrapper.children(\".k-resize-handle,\" + KWINDOWTITLEBAR))\n                        .on(kendo.support.mousedown + NS, that.toFront.bind(that));\n\n                    that.touchScroller = kendo.touchScroller(element);\n\n                    that._resizeHandler = that._onDocumentResize.bind(that);\n\n                    that._marker = kendo.guid().substring(0, 8);\n\n                    $(window).on(\"resize\" + NS + that._marker, that._resizeHandler);\n\n                    if (options.visible) {\n                        that.trigger(OPEN);\n                        that.trigger(ACTIVATE);\n                    }\n\n                    kendo.notify(that);\n\n                    if (this.options.modal) {\n                        this._tabKeyTrap = new TabKeyTrap(wrapper);\n                        this._tabKeyTrap.trap();\n                        this._tabKeyTrap.shouldTrap = function() {\n                            return wrapper.data(\"isFront\");\n                        };\n                    }\n\n                    if (that._showWatermarkOverlay) {\n                        that._showWatermarkOverlay(that.wrapper[0]);\n                    }\n                },\n\n                _buttonEnter: function(e) {\n                    $(e.currentTarget).addClass(KHOVERSTATE);\n                },\n\n                _buttonLeave: function(e) {\n                    $(e.currentTarget).removeClass(KHOVERSTATE);\n                },\n\n                _focus: function() {\n                    this.wrapper.addClass(KFOCUSEDSTATE);\n                },\n\n                _blur: function() {\n                    this.wrapper.removeClass(KFOCUSEDSTATE);\n                },\n\n                _dimensions: function() {\n                    var wrapper = this.wrapper;\n                    var options = this.options;\n                    var width = options.width;\n                    var height = options.height;\n                    var maxHeight = options.maxHeight;\n                    var sizeClass = options.size;\n                    var dimensions = [\"minWidth\",\"minHeight\",\"maxWidth\",\"maxHeight\"];\n                    var contentBoxSizing = wrapper.css(\"box-sizing\") == \"content-box\";\n\n                    var lrBorderWidth = contentBoxSizing ? toInt(wrapper, \"border-left-width\") + toInt(wrapper, \"border-right-width\") : 0;\n                    var tbBorderWidth = contentBoxSizing ? toInt(wrapper, \"border-top-width\") + toInt(wrapper, \"border-bottom-width\") : 0;\n                    var paddingTop = contentBoxSizing ? toInt(wrapper, \"padding-top\") : 0;\n\n                    if (this.containment && !this._isPinned) {\n                        this._updateBoundaries();\n                        options.maxHeight = Math.min(this.containment.height - (tbBorderWidth + paddingTop), maxHeight);\n                        options.maxWidth = Math.min(this.containment.width - lrBorderWidth, options.maxWidth);\n                    }\n\n                    for (var i = 0; i < dimensions.length; i++) {\n                        var value = options[dimensions[i]] || \"\";\n                        if (value != Infinity) {\n                            wrapper.css(dimensions[i], value);\n                        }\n                    }\n\n                    if (maxHeight != Infinity) {\n                        this.element.css(\"maxHeight\", maxHeight);\n                    }\n\n                    if (width) {\n                        wrapper.outerWidth(constrain(width, options.minWidth, options.maxWidth));\n                    }\n                    else {\n                        wrapper.outerWidth(\"\");\n                    }\n\n                    if (height) {\n                        wrapper.outerHeight(constrain(height, options.minHeight, options.maxHeight));\n                    }\n                    else {\n                        wrapper.outerHeight(\"\");\n                    }\n\n                    if (!options.visible) {\n                        wrapper.removeClass(INLINE_FLEX).hide();\n                    }\n\n                    if (sizeClass && SIZE[sizeClass]) {\n                        wrapper.addClass(SIZE[sizeClass]);\n                    }\n                },\n\n                _position: function() {\n                    var wrapper = this.wrapper,\n                        position = this.options.position,\n                        containmentTop, containmentLeft;\n\n                    this._updateBoundaries();\n\n                    if (this.containment) {\n                        position.top = position.top || 0;\n                        position.left = position.left || 0;\n\n                        containmentTop = position.top.toString().indexOf(\"%\") > 0 ?\n                            parseInt(this.containment.height * (parseFloat(position.top) / 100), 10) :\n                            position.top;\n\n                        containmentLeft = position.left.toString().indexOf(\"%\") > 0 ?\n                            parseInt(this.containment.width * (parseFloat(position.left) / 100), 10) :\n                            position.left;\n\n                        position.top = constrain(containmentTop, this.minTop, this.maxTop);\n                        position.left = constrain(containmentLeft, this.minLeft, this.maxLeft);\n                    }\n\n                    if (position.top && position.top.toString().indexOf(\"px\") > 0) {\n                        position.top = Number(position.top.replace(\"px\", \"\"));\n                    }\n\n                    if (position.left && position.left.toString().indexOf(\"px\") > 0) {\n                        position.left = Number(position.left.replace(\"px\", \"\"));\n                    }\n\n                    if (position.top === 0) {\n                        position.top = position.top.toString();\n                    }\n\n                    if (position.left === 0) {\n                        position.left = position.left.toString();\n                    }\n\n                    wrapper.css({\n                        top: position.top || \"\",\n                        left: position.left || \"\"\n                    });\n                },\n\n                _updateBoundaries: function() {\n                    var containment = this.containment;\n\n                    if (!containment) {\n                        return null;\n                    }\n\n                    containment.width = containment.innerWidth();\n                    containment.height = containment.innerHeight();\n\n                    if (parseInt(containment.width, 10) > containment[0].clientWidth) {\n                        containment.width -= kendo.support.scrollbar();\n                    }\n\n                    if (parseInt(containment.height, 10) > containment[0].clientHeight) {\n                        containment.height -= kendo.support.scrollbar();\n                    }\n\n                    containment.position = getPosition(containment[0]);\n\n                    if (this._isPinned) {\n                        this.minTop = this.minLeft = -Infinity;\n                        this.maxTop = this.maxLeft = Infinity;\n                    } else {\n                        this.minTop = containment.scrollTop();\n                        this.minLeft = containment.scrollLeft();\n                        this.maxLeft = this.minLeft + containment.width - outerWidth(this.wrapper, true);\n                        this.maxTop = this.minTop + containment.height - outerHeight(this.wrapper, true);\n                    }\n                },\n\n                _animationOptions: function(id) {\n                    var animation = this.options.animation;\n                    var basicAnimation = {\n                        open: { effects: {} },\n                        close: { hide: true, effects: {} }\n                    };\n\n                    return animation && animation[id] || basicAnimation[id];\n                },\n\n                _resize: function() {\n                    kendo.resize(this.element.children());\n                },\n\n                _resizable: function() {\n                    var resizable = this.options.resizable;\n                    var wrapper = this.wrapper;\n\n                    if (this.resizing) {\n                        wrapper\n                            .off(\"dblclick\" + NS)\n                            .children(KWINDOWRESIZEHANDLES).remove();\n\n                        this.resizing.destroy();\n                        this.resizing = null;\n                    }\n\n                    if (resizable) {\n                        wrapper.on(\"dblclick\" + NS, KWINDOWTITLEBAR, (function(e) {\n                            if (!$(e.target).closest(\".k-window-titlebar-action\").length) {\n                                this.toggleMaximization();\n                            }\n                        }).bind(this));\n\n                        each(\"n e s w se sw ne nw\".split(\" \"), function(index, handler) {\n                            wrapper.append(templates.resizeHandle(handler));\n                        });\n\n                        this.resizing = new WindowResizing(this);\n                    }\n\n                    wrapper = null;\n                },\n\n                _draggable: function() {\n                    var draggable = this.options.draggable;\n\n                    if (this.dragging) {\n                        this.dragging.destroy();\n                        this.dragging = null;\n                    }\n                    if (draggable) {\n                        this.dragging = new WindowDragging(this, draggable.dragHandle || KWINDOWTITLEBAR, draggable.clickMoveClick);\n                    }\n                },\n\n                _actions: function() {\n                    var options = this.options;\n                    var actions = options.actions;\n                    var pinned = options.pinned;\n                    var titlebar = this.wrapper.children(KWINDOWTITLEBAR);\n                    var container = titlebar.find(\".k-window-titlebar-actions\");\n                    var windowSpecificCommands = [ \"minimize\", \"maximize\" ];\n                    var icons = {\n                        \"maximize\": \"window\",\n                        \"refresh\": \"arrow-rotate-cw\",\n                        \"custom\": \"gear\"\n                    };\n                    var icon;\n\n                    actions = $.map(actions, function(action) {\n                        action = pinned && action.toLowerCase() === \"pin\" ? \"unpin\" : action;\n                        icon = icons[action.toLowerCase()] || \"\";\n                        return { name: (windowSpecificCommands.indexOf(action.toLowerCase()) > - 1) ? \"window-\" + action : action, icon: action.toLowerCase() == \"close\" ? \"x\" : icon };\n                    });\n\n                    container.html(kendo.render(templates.action, actions));\n                },\n\n                setOptions: function(options) {\n                    var that = this;\n                    var sizeClass = that.options.size;\n                    var doc = this.containment && !that._isPinned ? this.containment : $(document);\n                    // make a deep extend over options.position telerik/kendo-ui-core#844\n                    var cachedOptions = JSON.parse(JSON.stringify(options));\n\n                    that.wrapper.removeClass(kendo.getValidCssClass(\"k-window-\", \"themeColor\", that.options.themeColor));\n\n                    extend(options.position, that.options.position);\n                    extend(options.position, cachedOptions.position);\n\n                    that._containerScrollTop = doc.scrollTop();\n                    that._containerScrollLeft = doc.scrollLeft();\n\n                    Widget.fn.setOptions.call(that, options);\n                    var scrollable = that.options.scrollable !== false;\n\n                    that.restore();\n\n                    if (typeof options.title !== \"undefined\") {\n                        that.title(options.title);\n                    }\n\n                    that.wrapper.removeClass(SIZE[sizeClass]);\n                    that._dimensions();\n\n                    that._position();\n                    that._resizable();\n                    that._draggable();\n                    that._actions();\n\n                    if (that.options.themeColor && that.options.themeColor !== \"none\") {\n                        that.wrapper.addClass(kendo.getValidCssClass(\"k-window-\", \"themeColor\", that.options.themeColor));\n                    }\n\n                    if (typeof options.modal !== \"undefined\") {\n                        var visible = that.options.visible !== false;\n                        that._enableDocumentScrolling();\n                        that._overlay(options.modal && visible);\n                    }\n\n                    that.element.css(OVERFLOW, scrollable ? \"\" : \"hidden\");\n                },\n\n                events: [\n                    OPEN,\n                    ACTIVATE,\n                    DEACTIVATE,\n                    CLOSE,\n                    MINIMIZE,\n                    MAXIMIZE,\n                    REFRESH,\n                    RESTORE,\n                    RESIZESTART,\n                    RESIZE,\n                    RESIZEEND,\n                    DRAGSTART,\n                    DRAGEND,\n                    KENDOKEYDOWN,\n                    ERROR\n                ],\n\n                options: {\n                    name: \"Window\",\n                    animation: {\n                        open: {\n                            effects: { zoom: { direction: \"in\" }, fade: { direction: \"in\" } },\n                            duration: 350\n                        },\n                        close: {\n                            effects: { zoom: { direction: \"out\", properties: { scale: 0.7 } }, fade: { direction: \"out\" } },\n                            duration: 350,\n                            hide: true\n                        }\n                    },\n                    title: \"\",\n                    themeColor: \"\",\n                    actions: [\"Close\"],\n                    autoFocus: true,\n                    modal: false,\n                    size: \"auto\",\n                    resizable: true,\n                    draggable: true,\n                    minWidth: 90,\n                    minHeight: 50,\n                    maxWidth: Infinity,\n                    maxHeight: Infinity,\n                    pinned: false,\n                    scrollable: true,\n                    position: {},\n                    content: null,\n                    visible: null,\n                    height: null,\n                    width: null,\n                    appendTo: \"body\",\n                    isMaximized: false,\n                    isMinimized: false\n                },\n\n                _closable: function() {\n                    return $.inArray(\"close\", $.map(this.options.actions, function(x) { return x.toLowerCase(); })) > -1;\n                },\n\n                _keydownContent: function(e) {\n                    var that = this,\n                        keys = kendo.keys,\n                        keyCode = e.keyCode;\n\n                    if (keyCode == keys.ESC && that._closable()) {\n                        e.stopPropagation();\n                        that._close(false);\n                    }\n                },\n\n                _keydown: function(e) {\n                    var that = this,\n                        options = that.options,\n                        keys = kendo.keys,\n                        keyCode = e.keyCode,\n                        wrapper = that.wrapper,\n                        offset, handled,\n                        distance = 10,\n                        isMaximized = options.isMaximized,\n                        isMinimized = options.isMinimized,\n                        newWidth, newHeight, w, h;\n\n                    if (keyCode == keys.ESC && that._closable()) {\n                        e.stopPropagation();\n                        that._close(false);\n                    }\n\n                    if (e.target != e.currentTarget || that._closing) {\n                        return;\n                    }\n\n                     // Refresh\n                    if (e.altKey && keyCode == 82) {// Alt + R\n                        that.refresh();\n                    }\n\n                    // Pin/Unpin\n                    if (e.altKey && keyCode == 80) {// Alt + P\n                        if (that.options.pinned) {\n                            that.unpin();\n                        } else {\n                            that.pin();\n                        }\n                    }\n\n                    // Maximize/Restore/Miminimize\n                    if (e.altKey && keyCode == keys.UP) {\n                        if (isMinimized) {\n                            that.restore();\n                            that.wrapper.trigger(\"focus\");\n                        } else if (!isMaximized) {\n                            that.maximize();\n                            that.wrapper.trigger(\"focus\");\n                        }\n                    } else if (e.altKey && keyCode == keys.DOWN) {\n                        if (!isMinimized && !isMaximized) {\n                            that.minimize();\n                            that.wrapper.trigger(\"focus\");\n                        } else if (isMaximized) {\n                            that.restore();\n                            that.wrapper.trigger(\"focus\");\n                        }\n                    }\n\n                    offset = kendo.getOffset(wrapper);\n\n                    if (that.containment && !that._isPinned) {\n                        offset = that.options.position;\n                    }\n\n                    if (options.draggable && !e.ctrlKey && !e.altKey && !isMaximized) {\n                        that._updateBoundaries();\n                        if (keyCode == keys.UP) {\n                            offset.top = constrain(offset.top - distance, that.minTop, that.maxTop);\n                            handled = wrapper.css(\"top\", offset.top);\n                        } else if (keyCode == keys.DOWN) {\n                            offset.top = constrain(offset.top + distance, that.minTop, that.maxTop);\n                            handled = wrapper.css(\"top\", offset.top);\n                        } else if (keyCode == keys.LEFT) {\n                            offset.left = constrain(offset.left - distance, that.minLeft, that.maxLeft);\n                            handled = wrapper.css(\"left\", offset.left);\n                        } else if (keyCode == keys.RIGHT) {\n                            offset.left = constrain(offset.left + distance, that.minLeft, that.maxLeft);\n                            handled = wrapper.css(\"left\", offset.left);\n                        }\n                    }\n\n                    if (options.resizable && e.ctrlKey && !isMaximized && !isMinimized) {\n                        if (keyCode == keys.UP) {\n                            handled = true;\n                            newHeight = wrapper.outerHeight() - distance;\n                        } else if (keyCode == keys.DOWN) {\n                            handled = true;\n                            if (that.containment && !that._isPinned) {\n                                newHeight = Math.min(wrapper.outerHeight() + distance,\n                                    that.containment.height - offset.top - toInt(wrapper, \"padding-top\") -\n                                    toInt(wrapper, \"borderBottomWidth\") - toInt(wrapper, \"borderTopWidth\"));\n                            } else {\n                                newHeight = wrapper.outerHeight() + distance;\n                            }\n                        } else if (keyCode == keys.LEFT) {\n                            handled = true;\n                            newWidth = wrapper.outerWidth() - distance;\n                        } else if (keyCode == keys.RIGHT) {\n                            handled = true;\n                            if (that.containment && !that._isPinned) {\n                                newWidth = Math.min(wrapper.outerWidth() + distance,\n                                                    that.containment.width - offset.left -\n                                                    toInt(wrapper, \"borderLeftWidth\") - toInt(wrapper, \"borderRightWidth\"));\n                            } else {\n                                newWidth = wrapper.outerWidth() + distance;\n                            }\n                        }\n\n                        if (handled) {\n                            w = constrain(newWidth, options.minWidth, options.maxWidth);\n                            h = constrain(newHeight, options.minHeight, options.maxHeight);\n\n                            if (!isNaN(w)) {\n                                wrapper.outerWidth(w);\n                                that.options.width = w + \"px\";\n                            }\n                            if (!isNaN(h)) {\n                                wrapper.outerHeight(h);\n                                that.options.height = h + \"px\";\n                            }\n\n                            that.resize();\n                        }\n                    }\n\n                    if (handled) {\n                        e.preventDefault();\n                    }\n                },\n\n                _overlay: function(visible) {\n                    var overlay = this.containment ? this.containment.children(KOVERLAY) : this.appendTo.children(KOVERLAY),\n                        wrapper = this.wrapper,\n                        display = visible ? \"inline-flex\" : \"none\",\n                        zIndex = parseInt(wrapper.css(ZINDEX), 10) - 1;\n\n                    if (!overlay.length) {\n                        overlay = $(\"<div class='k-overlay' />\");\n                    }\n\n                    overlay\n                        .insertBefore(wrapper[0])\n                        .css({\n                            zIndex: zIndex,\n                            display: display\n                        });\n\n                    if (this.options.modal.preventScroll && !this.containment) {\n                        this._stopDocumentScrolling();\n                    }\n\n                    return overlay;\n                },\n\n                _actionForIcon: function(icon) {\n                    var iconClass = /\\bk(-svg)?-i(-\\w+)+\\b/.exec(icon[0].className)[0];\n                    return {\n                        \"x\": \"_close\",\n                        \"window\": \"maximize\",\n                        \"window-minimize\": \"minimize\",\n                        \"window-restore\": \"restore\",\n                        \"arrow-rotate-cw\": \"refresh\",\n                        \"pin\": \"pin\",\n                        \"unpin\": \"unpin\"\n                    }[iconClass.replace(/(k-i-|k-svg-i-)/, \"\")];\n                },\n\n                _windowActionHandler: function(e) {\n                    if (this._closing) {\n                        return;\n                    }\n                    var icon = $(e.target).closest(\".k-window-titlebar-action\").find(\".k-icon,.k-svg-icon\");\n                    var action = this._actionForIcon(icon);\n\n                    if (action) {\n                        e.preventDefault();\n                        this[action]();\n                        return false;\n                    }\n                },\n\n                _modals: function() {\n                    var that = this,\n                        windowElements = $(KWINDOW + VISIBLE),\n                        windowInstance,\n                        modals = [];\n\n                    for (var i = 0; i < windowElements.length; i += 1) {\n                        windowInstance = that._object($(windowElements[i]));\n\n                        if (windowInstance &&\n                            windowInstance.options &&\n                            windowInstance.options.modal &&\n                            windowInstance.options.visible &&\n                            windowInstance.options.appendTo === that.options.appendTo &&\n                            (!windowInstance.containment || (that.containment && windowInstance.containment[0] === that.containment[0]))) {\n                                modals.push(windowInstance.wrapper[0]);\n                        }\n                    }\n\n                    modals.sort(function(a, b) {\n                        return a.style.zIndex - b.style.zIndex;\n                    });\n\n                    that = null;\n\n                    return $(modals);\n                },\n\n                _object: function(element) {\n                    var content = element.children(KWINDOWCONTENT);\n                    var widget = content.getKendoWindow();\n\n                    if (widget) {\n                        return widget;\n                    }\n\n                    return undefined$1;\n                },\n\n                center: function() {\n                    var that = this,\n                        position = that.options.position,\n                        wrapper = that.wrapper,\n                        documentWindow = $(window),\n                        scrollTop = 0,\n                        scrollLeft = 0,\n                        newTop, newLeft;\n\n                    if (that.options.isMaximized) {\n                        return that;\n                    }\n\n                    if (that.options.pinned && !that._isPinned) {\n                        that.pin();\n                    }\n\n                    if (!that.options.pinned) {\n                        scrollTop = documentWindow.scrollTop();\n                        scrollLeft = documentWindow.scrollLeft();\n                    }\n\n                    if (this.containment && !that.options.pinned) {\n                        newTop = this.minTop + (this.maxTop - this.minTop) / 2;\n                        newLeft = this.minLeft + (this.maxLeft - this.minLeft) / 2;\n                    } else {\n                        that._scrollIsAppended = true;\n                        newLeft = scrollLeft + Math.max(0, (documentWindow.width() - wrapper.outerWidth()) / 2);\n                        newTop = scrollTop + Math.max(0, (documentWindow.height() - wrapper.outerHeight() - toInt(wrapper, \"paddingTop\")) / 2);\n                    }\n\n                    wrapper.css({\n                        left: newLeft,\n                        top: newTop\n                    });\n\n                    position.top = newTop;\n                    position.left = newLeft;\n\n                    return that;\n                },\n\n                title: function(title) {\n                    var that = this,\n                        value,\n                        encoded = true,\n                        wrapper = that.wrapper,\n                        titleBar = wrapper.children(KWINDOWTITLEBAR),\n                        titleElement = titleBar.children(KWINDOWTITLE);\n\n                    if (!arguments.length) {\n                        return titleElement.html();\n                    }\n\n                    if ($.isPlainObject(title)) {\n                        value = typeof title.text !== \"undefined\" ? title.text : \"\";\n                        encoded = title.encoded !== false;\n                    } else {\n                        value = title;\n                    }\n\n                    if (value === false) {\n                        wrapper.addClass(\"k-window-titleless\");\n                        wrapper.css(\"padding-top\", 0);\n                        titleBar.remove();\n                    } else {\n                        if (!titleBar.length) {\n                            wrapper.prepend(templates.titlebar({\n                                title: encoded ? kendo.htmlEncode(value) : value\n                            }));\n                            that._actions();\n                            titleBar = wrapper.children(KWINDOWTITLEBAR);\n                        } else {\n                            titleElement.html(encoded ? kendo.htmlEncode(value) : value);\n                        }\n                    }\n\n                    that.options.title = value;\n\n                    return that;\n                },\n\n                content: function(html, data) {\n                    var content = this.wrapper.children(KWINDOWCONTENT),\n                        scrollContainer = content.children(\".km-scroll-container\");\n\n                    content = scrollContainer[0] ? scrollContainer : content;\n\n                    if (!defined(html)) {\n                        return content.html();\n                    }\n\n                    kendo.destroy(this.element.children());\n\n                    content.empty().html(html);\n\n                    return this;\n                },\n\n                open: function() {\n                    var that = this,\n                        wrapper = that.wrapper,\n                        options = that.options,\n                        showOptions = this._animationOptions(\"open\"),\n                        contentElement = wrapper.children(KWINDOWCONTENT),\n                        overlay, otherModalsVisible,\n                        containmentContext = this.containment && !that._isPinned,\n                        doc = containmentContext ? this.containment : $(document);\n\n                    if (!that.trigger(OPEN)) {\n                        if (that._closing) {\n                            wrapper.kendoStop(true, true);\n                        }\n\n                        that._closing = false;\n\n                        that.toFront();\n\n                        if (options.autoFocus) {\n                            that.wrapper.trigger(\"focus\");\n                        }\n\n                        options.visible = true;\n\n                        if (options.modal) {\n                            otherModalsVisible = !!that._modals().length;\n                            overlay = that._overlay(otherModalsVisible);\n\n                            overlay.kendoStop(true, true);\n\n                            if (showOptions.duration && kendo.effects.Fade && !otherModalsVisible) {\n                                var overlayFx = kendo.fx(overlay).fadeIn();\n                                overlayFx.duration(showOptions.duration || 0);\n                                overlayFx.endValue(0.5);\n                                overlayFx.play();\n                            } else {\n                                overlay.css(\"opacity\", 0.5);\n                            }\n\n                            overlay.show();\n\n                            $(window).on(\"focus\" + MODAL_NS, function() {\n                                if (wrapper.data(\"isFront\") && !$(document.activeElement).closest(wrapper).length) {\n                                   that.wrapper.trigger(\"focus\");\n                                }\n                            });\n                        }\n\n                        if (!wrapper.is(VISIBLE)) {\n                            contentElement.css(OVERFLOW, HIDDEN);\n\n                            that.wrapper.find(TITLEBAR_BUTTONSSELECTOR).addClass(\"k-button-flat\");\n\n                            wrapper.css({ display: \"inline-flex\" });\n                            wrapper.kendoStop().kendoAnimate({\n                                effects: showOptions.effects,\n                                duration: showOptions.duration,\n                                complete: this._activate.bind(this)\n                            });\n                        }\n                    }\n\n                    if (options.isMaximized) {\n                        that._containerScrollTop = doc.scrollTop();\n                        that._containerScrollLeft = doc.scrollLeft();\n                        that._stopDocumentScrolling();\n                    }\n\n                    if (this.options.pinned && !this._isPinned) {\n                        this.pin();\n                    }\n\n                    return that;\n                },\n\n                _activate: function() {\n                    var scrollable = this.options.scrollable !== false;\n\n                    if (this.options.autoFocus) {\n                        this.wrapper.trigger(\"focus\");\n                    }\n\n                    this.element.css(OVERFLOW, scrollable ? \"\" : \"hidden\");\n                    kendo.resize(this.element.children());\n\n                    this.trigger(ACTIVATE);\n                },\n\n                _removeOverlay: function(suppressAnimation) {\n                    var modals = this._modals();\n                    var options = this.options;\n                    var hideOverlay = options.modal && !modals.length;\n                    var hideOptions = this._animationOptions(\"close\");\n\n                    if (hideOverlay) {\n                        if (!suppressAnimation && hideOptions.duration && kendo.effects.Fade) {\n                            var overlayFx = kendo.fx(options.modal ? this._overlay(true) : $(undefined$1)).fadeOut();\n                            overlayFx.duration(hideOptions.duration || 0);\n                            overlayFx.startValue(0.5);\n                            overlayFx.play();\n                        } else {\n                            this._overlay(false).remove();\n                        }\n                        if (options.modal.preventScroll) {\n                            this._enableDocumentScrolling();\n                        }\n                    } else if (modals.length) {\n                        this._object(modals.last())._overlay(true);\n\n                        if (options.modal.preventScroll) {\n                            this._stopDocumentScrolling();\n                        }\n                    }\n                },\n\n                _close: function(systemTriggered) {\n                    var that = this,\n                        wrapper = that.wrapper,\n                        options = that.options,\n                        showOptions = this._animationOptions(\"open\"),\n                        hideOptions = this._animationOptions(\"close\"),\n                        containmentContext = this.containment && !that._isPinned,\n                        doc = containmentContext ? this.containment : $(document),\n                        defaultPrevented;\n\n                    if (that._closing) {\n                        return;\n                    }\n\n                    defaultPrevented = that.trigger(CLOSE, { userTriggered: !systemTriggered });\n                    that._closing = !defaultPrevented;\n\n                    if (wrapper.is(VISIBLE) && !defaultPrevented) {\n                        options.visible = false;\n\n                        $(KWINDOW).each(function(i, element) {\n                            var contentElement = $(element).children(KWINDOWCONTENT);\n\n                            // Remove overlay set by toFront\n                            if (element != wrapper && contentElement.find(\"> .\" + KCONTENTFRAME).length > 0) {\n                                contentElement.children(KOVERLAY).remove();\n                            }\n                        });\n\n                        this._removeOverlay();\n\n                        // Prevent close animation from stopping\n                        that.wrapper.find(TITLEBAR_BUTTONSSELECTOR).removeClass(\"k-button-flat\");\n\n                        wrapper.kendoStop().kendoAnimate({\n                            effects: hideOptions.effects || showOptions.effects,\n                            reverse: hideOptions.reverse === true,\n                            duration: hideOptions.duration,\n                            complete: this._deactivate.bind(this)\n                        });\n                        $(window).off(MODAL_NS);\n                    }\n\n                    if (that.options.isMaximized) {\n                        that._enableDocumentScrolling();\n                        if (that._containerScrollTop && that._containerScrollTop > 0) {\n                            doc.scrollTop(that._containerScrollTop);\n                        }\n                        if (that._containerScrollLeft && that._containerScrollLeft > 0) {\n                            doc.scrollLeft(that._containerScrollLeft);\n                        }\n                    }\n\n                    if (that.options.iframe) {\n                        that.wrapper.trigger(\"blur\");\n                    }\n                },\n\n                _deactivate: function() {\n                    var that = this;\n\n                    that.wrapper\n                        .removeClass(INLINE_FLEX)\n                        .hide()\n                        .css(\"opacity\", \"\");\n\n                    that.trigger(DEACTIVATE);\n\n                    if (that.options.modal) {\n                        var lastModal = that._object(that._modals().last());\n                        if (lastModal) {\n                            lastModal.toFront();\n                        }\n                    }\n                },\n\n                close: function() {\n                    this._close(true);\n                    return this;\n                },\n\n                _actionable: function(element) {\n                    return $(element).is(`${TITLEBAR_BUTTONSSELECTOR}, :input, a, .k-input, .k-icon, .k-svg-icon, .k-svg-icon>svg, .k-svg-icon>svg>path, .k-icon-button, [role='gridcell'], .k-input-inner, .k-input-value-text`);\n                },\n\n                _shouldFocus: function(target) {\n                    var active = activeElement(),\n                        element = this.wrapper;\n\n                    return this.options.autoFocus &&\n                        !$(active).is(element) &&\n                        !this._actionable(target) &&\n                        (!element.find(active).length || !element.find(target).length);\n                },\n\n                toFront: function(e, avoidFocus) {\n                    var that = this,\n                        wrapper = that.wrapper,\n                        currentWindow = wrapper[0],\n                        containmentContext = that.containment && !that._isPinned,\n                        openAnimation = this._animationOptions(\"open\"),\n                        zIndex = +wrapper.css(ZINDEX),\n                        originalZIndex = zIndex,\n                        target = (e && e.target) || null;\n\n                    $(KWINDOW).each(function(i, element) {\n                        var windowObject = $(element),\n                            zIndexNew = windowObject.css(ZINDEX),\n                            contentElement = windowObject.children(KWINDOWCONTENT);\n\n                        if (!isNaN(zIndexNew)) {\n                            zIndex = Math.max(+zIndexNew, zIndex);\n                        }\n\n                        wrapper.data(\"isFront\", element == currentWindow);\n                        // Add overlay to windows with iframes and lower z-index to prevent\n                        // trapping of events when resizing / dragging\n\n                        if (element != currentWindow &&\n                            contentElement.find(\".\" + KCONTENTFRAME).length &&\n                            !contentElement.find(KOVERLAY).length) {\n                            contentElement.append(templates.overlay);\n                        }\n                    });\n\n                    if (!wrapper[0].style.zIndex || originalZIndex < zIndex) {\n                        wrapper.css(ZINDEX, zIndex + 2);\n                    }\n                    that.element.find(\"> .k-overlay\").remove();\n\n                    if (that._shouldFocus(target)) {\n                        if (!avoidFocus) {\n                            setTimeout(function() {\n                                that.wrapper.trigger(\"focus\");\n                            }, openAnimation ? openAnimation.duration : 0);\n                        }\n\n                        var scrollTop = containmentContext ? that.containment.scrollTop() : $(window).scrollTop(),\n                            windowTop = parseInt(wrapper.position().top, 10);\n\n                        if (!that.options.pinned && windowTop > 0 && windowTop < scrollTop) {\n                            if (scrollTop > 0) {\n                                $(window).scrollTop(windowTop);\n                            } else {\n                                wrapper.css(\"top\", scrollTop);\n                            }\n                        }\n                    }\n\n                    wrapper = null;\n\n                    return that;\n                },\n\n                toggleMaximization: function() {\n                    if (this._closing) {\n                        return this;\n                    }\n\n                    return this[this.options.isMaximized ? \"restore\" : \"maximize\"]();\n                },\n\n                restore: function() {\n                    var that = this;\n                    var options = that.options;\n                    var minHeight = options.minHeight;\n                    var restoreOptions = that.restoreOptions;\n                    var shouldRestrictTop;\n                    var container = that.containment && !that._isPinned ? that.containment : $(document);\n\n                    if (!options.isMaximized && !options.isMinimized) {\n                        return that;\n                    }\n\n                    if (minHeight && minHeight != Infinity) {\n                        that.wrapper.css(\"min-height\", minHeight);\n                    }\n\n                    if (restoreOptions && !options.isMaximized) {\n                        restoreOptions.height = constrain(restoreOptions.height, that.options.minHeight, that.options.maxHeight);\n\n                        shouldRestrictTop = options.position.top + parseInt(restoreOptions.height, 10) > that.maxTop;\n\n                        if (shouldRestrictTop) {\n                            options.position.top = constrain(options.position.top, that.minTop, that.maxTop - parseInt(restoreOptions.height, 10));\n\n                            extend(restoreOptions, {\n                                left: options.position.left,\n                                top: options.position.top\n                            });\n                        }\n                    }\n\n                    that.wrapper\n                        .css({\n                            position: options.pinned ? \"fixed\" : \"absolute\",\n                            left: restoreOptions.left,\n                            top: restoreOptions.top,\n                            width: restoreOptions.width,\n                            height: restoreOptions.height\n                        })\n                        .removeClass(MAXIMIZEDSTATE)\n                        .removeClass(KWINDOWMINIMIZED)\n                        .find(\".k-window-content,.k-resize-handle\").show().end()\n                        .find(\".k-window-titlebar .k-i-window-restore,.k-window-titlebar .k-svg-i-window-restore\").parent().remove().end().end()\n                        .find(MINIMIZE_MAXIMIZEICONSELECTORS).parent().show().end().end()\n                        .find(PIN_UNPINICONCLASSSELECTOR).parent().show();\n\n                    if (options.isMaximized) {\n                        that.wrapper.find(\".k-i-window,.k-svg-i-window\").parent().trigger(\"focus\");\n                    } else if (options.isMinimized) {\n                        that.wrapper.find(\".k-i-window-minimize,.k-svg-i-window-minimize\").parent().trigger(\"focus\");\n                    }\n\n                    that.options.width = restoreOptions.width;\n                    that.options.height = restoreOptions.height;\n\n                    if (!that.options.modal.preventScroll) {\n                        that._enableDocumentScrolling();\n                    }\n\n                    if (that._containerScrollTop && that._containerScrollTop > 0) {\n                        container.scrollTop(that._containerScrollTop);\n                    }\n                    if (that._containerScrollLeft && that._containerScrollLeft > 0) {\n                        container.scrollLeft(that._containerScrollLeft);\n                    }\n\n                    options.isMaximized = options.isMinimized = false;\n\n                    that.wrapper.removeAttr(\"aria-labelled-by\");\n\n                    that.resize();\n\n                    that.trigger(RESTORE);\n\n                    return that;\n                },\n\n                _sizingAction: function(actionId, callback) {\n                    var that = this,\n                        wrapper = that.wrapper,\n                        style = wrapper[0].style,\n                        options = that.options;\n\n                    if (options.isMaximized || options.isMinimized) {\n                        return that;\n                    }\n\n                    that.restoreOptions = {\n                        width: style.width,\n                        height: style.height\n                    };\n\n                    wrapper\n                        .children(KWINDOWRESIZEHANDLES).hide().end()\n                        .children(KWINDOWTITLEBAR).find(MINIMIZE_MAXIMIZEICONSELECTORS).parent().hide()\n                        .eq(0).before(templates.action({ name: \"window-restore\" }));\n\n                    callback.call(that);\n\n                    that.wrapper.children(KWINDOWTITLEBAR).find(PIN_UNPINICONCLASSSELECTOR).parent().toggle(actionId !== \"maximize\");\n\n                    that.trigger(actionId);\n\n                    wrapper.find(\".k-i-window-restore,.k-svg-i-window-restore\").parent().trigger(\"focus\");\n\n                    return that;\n                },\n\n                maximize: function() {\n                    this._sizingAction(\"maximize\", function() {\n                        var that = this,\n                            wrapper = that.wrapper,\n                            containmentContext = this.containment && !that._isPinned,\n                            position = wrapper.position(),\n                            doc = $(document);\n\n                        extend(that.restoreOptions, {\n                            left: position.left + (containmentContext ? this.containment.scrollLeft() : 0),\n                            top: position.top + (containmentContext ? this.containment.scrollTop() : 0)\n                        });\n\n                        this._containerScrollTop = containmentContext ? this.containment.scrollTop() : doc.scrollTop();\n                        this._containerScrollLeft = containmentContext ? this.containment.scrollLeft() : doc.scrollLeft();\n\n                        that._stopDocumentScrolling();\n\n                        wrapper\n                            .css({\n                                top: containmentContext ? this.containment.scrollTop() : 0,\n                                left: containmentContext ? this.containment.scrollLeft() : 0,\n                                position: containmentContext ? \"absolute\" : \"fixed\"\n                            })\n                            .addClass(MAXIMIZEDSTATE);\n\n                        that.options.isMaximized = true;\n\n                        that._onDocumentResize();\n                    });\n\n                    return this;\n                },\n\n                _stopDocumentScrolling: function() {\n                    var that = this;\n                    var containment = that.containment;\n\n                    if (containment && !that._isPinned) {\n                        that._storeOverflowRule(containment);\n                        containment.css(OVERFLOW, HIDDEN);\n                        that.wrapper.css({\n                            maxWidth: containment.innerWidth(),\n                            maxHeight: containment.innerHeight()\n                        });\n                        return;\n                    }\n\n                    var $body = $(\"body\");\n                    that._storeOverflowRule($body);\n                    $body.css(OVERFLOW, HIDDEN);\n\n                    var $html = $(\"html\");\n                    that._storeOverflowRule($html);\n                    $html.css(OVERFLOW, HIDDEN);\n                },\n\n                _enableDocumentScrolling: function() {\n                    var that = this;\n                    var containment = that.containment;\n\n                    if (containment && !that._isPinned) {\n                        that._restoreOverflowRule(containment);\n                        that.wrapper.css({\n                            maxWidth: containment.width,\n                            maxHeight: containment.height\n                        });\n                        return;\n                    }\n\n                    that._restoreOverflowRule($(document.body));\n                    that._restoreOverflowRule($(\"html\"));\n                },\n\n                _storeOverflowRule: function($element) {\n                    if (this._isOverflowStored($element)) {\n                        return;\n                    }\n\n                    var overflowRule = $element.get(0).style.overflow;\n\n                    if (typeof overflowRule === \"string\") {\n                        $element.data(DATADOCOVERFLOWRULE, overflowRule);\n                    }\n                },\n\n                _isOverflowStored: function($element) {\n                    return typeof $element.data(DATADOCOVERFLOWRULE) === \"string\";\n                },\n\n                _restoreOverflowRule: function($element) {\n                    var overflowRule = $element.data(DATADOCOVERFLOWRULE);\n\n                    if (overflowRule !== null && overflowRule !== undefined$1) {\n                        $element.css(OVERFLOW, overflowRule);\n                        $element.removeData(DATADOCOVERFLOWRULE);\n                    } else {\n                        $element.css(OVERFLOW, \"\");\n                    }\n                },\n\n                isMaximized: function() {\n                    return this.options.isMaximized;\n                },\n\n                minimize: function() {\n                    this._sizingAction(\"minimize\", function() {\n                        var that = this;\n\n                        that.wrapper.css({\n                            height: \"\",\n                            minHeight: \"\"\n                        });\n\n                        that.element.hide();\n\n                        that.options.isMinimized = true;\n                    });\n\n                    this.wrapper.attr(\"aria-labelled-by\", this.element.attr(\"aria-labelled-by\"));\n                    this.wrapper.addClass(KWINDOWMINIMIZED);\n\n                    this._updateBoundaries();\n\n                    return this;\n                },\n\n                isMinimized: function() {\n                    return this.options.isMinimized;\n                },\n\n                pin: function() {\n                    var that = this,\n                        win = $(window),\n                        wrapper = that.wrapper,\n                        options = that.options,\n                        position = options.position,\n                        top = this.containment ? getPosition(wrapper[0]).top + toInt(this.containment, \"borderTopWidth\") : toInt(wrapper, \"top\"),\n                        left = this.containment ? getPosition(wrapper[0]).left + toInt(this.containment, \"borderLeftWidth\") : toInt(wrapper, \"left\");\n\n                    if (!that.options.isMaximized) {\n                        position.top = top;\n                        position.left = left;\n\n                        if (that._scrollIsAppended && (!this.containment || this.containment.css(\"position\") !== \"fixed\")) {\n\n                            position.top -= win.scrollTop();\n                            position.left -= win.scrollLeft();\n                            that._scrollIsAppended = false;\n                        }\n\n                        wrapper.css(extend(position, { position: \"fixed\" }));\n                        var pinIcon = wrapper.children(KWINDOWTITLEBAR).find(KPINICONCLASSSELECTOR).eq(0);\n                        if (pinIcon.length > 0) {\n                            kendo.ui.icon(pinIcon, { icon: \"unpin\" });\n                        }\n\n                        that._isPinned = true;\n                        that.options.pinned = true;\n\n                        if (this.containment) {\n                            options.maxWidth = options.maxHeight = Infinity;\n                            wrapper.css({\n                                maxWidth: \"\",\n                                maxHeight: \"\"\n                            });\n                        }\n                    }\n                },\n\n                unpin: function() {\n                    var that = this,\n                        win = $(window),\n                        wrapper = that.wrapper,\n                        options = that.options,\n                        position = that.options.position,\n                        containment = that.containment,\n                        top = parseInt(wrapper.css(\"top\"), 10) + win.scrollTop(),\n                        left = parseInt(wrapper.css(\"left\"), 10) + win.scrollLeft();\n\n                    if (!that.options.isMaximized) {\n                        that._isPinned = false;\n                        that._scrollIsAppended = true;\n                        that.options.pinned = false;\n\n                        if (containment) {\n                            that._updateBoundaries();\n\n                            options.maxWidth = Math.min(containment.width, options.maxWidth);\n                            options.maxHeight = Math.min(containment.height - toInt(wrapper, \"padding-top\"), options.maxHeight);\n\n                            wrapper.css({\n                                maxWidth: options.maxWidth,\n                                maxHeight: options.maxHeight\n                            });\n\n                            if (top < containment.position.top) {\n                                top = that.minTop;\n                            } else if (top > containment.position.top + containment.height) {\n                                top = that.maxTop;\n                            } else {\n                                top = top + containment.scrollTop() - (containment.position.top + toInt(containment, \"border-top-width\"));\n                            }\n\n                            if (left < containment.position.left) {\n                                left = that.minLeft;\n                            } else if (left > containment.position.left + containment.width) {\n                                left = that.maxLeft;\n                            } else {\n                                left = left + containment.scrollLeft() - (containment.position.left + toInt(containment, \"border-left-width\"));\n                            }\n\n                        }\n\n                        position.top = constrain(top, that.minTop, that.maxTop);\n                        position.left = constrain(left, that.minLeft, that.maxLeft);\n\n                        wrapper.css(extend(position, { position: \"\" }));\n                        var pinIcon = wrapper.children(KWINDOWTITLEBAR).find(KUNPINICONCLASSSELECTOR).eq(0);\n                        if (pinIcon.length > 0) {\n                            kendo.ui.icon(pinIcon, { icon: \"pin\" });\n                        }\n                    }\n                },\n\n                _onDocumentResize: function() {\n                    var that = this,\n                        wrapper = that.wrapper,\n                        wnd = $(window),\n                        zoomLevel = kendo.support.zoomLevel(),\n                        contentBoxSizing = wrapper.css(\"box-sizing\") == \"content-box\",\n                        w, h;\n\n                    if (!that.options.isMaximized) {\n                        return;\n                    }\n\n                    var lrBorderWidth = contentBoxSizing ? toInt(wrapper, \"border-left-width\") + toInt(wrapper, \"border-right-width\") : 0;\n                    var tbBorderWidth = contentBoxSizing ? toInt(wrapper, \"border-top-width\") + toInt(wrapper, \"border-bottom-width\") : 0;\n                    var paddingTop = contentBoxSizing ? toInt(wrapper, \"padding-top\") : 0;\n\n                    if (that.containment && !that._isPinned) {\n                        w = that.containment.innerWidth() - lrBorderWidth;\n                        h = that.containment.innerHeight() - (tbBorderWidth + paddingTop);\n                    } else {\n                        w = wnd.width() / zoomLevel - lrBorderWidth;\n                        h = wnd.height() / zoomLevel - (tbBorderWidth + paddingTop);\n                    }\n\n                    wrapper.css({\n                        width: w,\n                        height: h\n                    });\n                    that.options.width = w;\n                    that.options.height = h;\n\n                    that.resize();\n                },\n\n                refresh: function(options) {\n                    var that = this,\n                        initOptions = that.options,\n                        element = $(that.element),\n                        iframe,\n                        showIframe,\n                        url;\n\n                    if (!isPlainObject(options)) {\n                        options = { url: options };\n                    }\n\n                    options = extend(initOptions.content, options);\n\n                    showIframe = defined(initOptions.iframe) ? initOptions.iframe : options.iframe;\n\n                    url = options.url;\n\n                    if (url) {\n                        if (!defined(showIframe)) {\n                            showIframe = !isLocalUrl(url);\n                        }\n\n                        if (!showIframe) {\n                            // perform AJAX request\n                            that._ajaxRequest(options);\n                        } else {\n                            iframe = element.find(\".\" + KCONTENTFRAME)[0];\n\n                            if (iframe) {\n                                // refresh existing iframe\n                                iframe.src = url || iframe.src;\n                            } else {\n                                // render new iframe\n                                element.html(templates.contentFrame(extend({}, initOptions, { content: options })));\n                            }\n\n                            element.find(\".\" + KCONTENTFRAME)\n                                .off(\"load\" + NS)\n                                .on(\"load\" + NS, this._triggerRefresh.bind(this));\n                        }\n                    } else {\n                        if (options.template) {\n                            // refresh template\n                            that.content(template(options.template)({}));\n                        }\n\n                        that.trigger(REFRESH);\n                    }\n\n                    element.toggleClass(\"k-window-iframecontent\", !!showIframe);\n\n                    return that;\n                },\n\n                _triggerRefresh: function() {\n                    this.trigger(REFRESH);\n                },\n\n                _ajaxComplete: function() {\n                    clearTimeout(this._loadingIconTimeout);\n                    this.wrapper.find(REFRESHICONSELECTOR).removeClass(LOADINGICONCLASS);\n                },\n\n                _ajaxError: function(xhr, status) {\n                    this.trigger(ERROR, { status: status, xhr: xhr });\n                },\n\n                _ajaxSuccess: function(contentTemplate) {\n                    return function(data) {\n                        var html = data;\n                        if (contentTemplate) {\n                            html = template(contentTemplate)(data || {});\n                        }\n\n                        this.content(html, data);\n                        this.element.prop(\"scrollTop\", 0);\n\n                        this.trigger(REFRESH);\n                    };\n                },\n\n                _showLoading: function() {\n                    this.wrapper.find(REFRESHICONSELECTOR).addClass(LOADINGICONCLASS);\n                },\n\n                _ajaxRequest: function(options) {\n                    this._loadingIconTimeout = setTimeout(this._showLoading.bind(this), 100);\n\n                    $.ajax(extend({\n                        type: \"GET\",\n                        dataType: \"html\",\n                        cache: false,\n                        error: this._ajaxError.bind(this),\n                        complete: this._ajaxComplete.bind(this),\n                        success: this._ajaxSuccess(options.template).bind(this)\n                    }, options));\n                },\n\n                _destroy: function() {\n                    if (this.resizing) {\n                        this.resizing.destroy();\n                    }\n\n                    if (this.dragging) {\n                        this.dragging.destroy();\n                    }\n\n                    this.wrapper.off(NS)\n                        .children(KWINDOWCONTENT).off(NS).end()\n                        .find(\".k-resize-handle,.k-window-titlebar\").off(NS);\n\n                    $(window).off(\"resize\" + NS + this._marker);\n                    $(window).off(MODAL_NS);\n                    $(window).off(NS);\n\n                    clearTimeout(this._loadingIconTimeout);\n\n                    Widget.fn.destroy.call(this);\n\n                    this.unbind(undefined$1);\n\n                    kendo.destroy(this.wrapper);\n                },\n\n                destroy: function() {\n                    this._destroy();\n\n                    if (this.options.modal) {\n                        this._removeOverlay(true);\n                    }\n\n                    this.wrapper.empty().remove();\n\n                    this.wrapper = this.appendTo = this.element = $();\n                },\n\n                _createWindow: function() {\n                    var contentHtml = this.element,\n                        options = this.options,\n                        iframeSrcAttributes,\n                        wrapper,\n                        isRtl = kendo.support.isRtl(contentHtml);\n\n                    if (options.scrollable === false) {\n                        contentHtml.css(\"overflow\", \"hidden\");\n                    }\n\n                    wrapper = $(templates.wrapper(options));\n\n                    // Collect the src attributes of all iframes and then set them to empty string.\n                    // This seems to fix this IE9 \"feature\": http://msdn.microsoft.com/en-us/library/gg622929%28v=VS.85%29.aspx?ppud=4\n                    iframeSrcAttributes = contentHtml.find(\"iframe:not(.k-content-frame)\").map(function() {\n                        var src = this.getAttribute(\"src\");\n                        this.src = \"\";\n                        return src;\n                    });\n\n                    // Make sure the wrapper is appended to the body only once. IE9+ will throw exceptions if you move iframes in DOM\n                    wrapper\n                        .toggleClass(\"k-rtl\", isRtl)\n                        .attr(\"tabindex\", 0)\n                        .append(contentHtml)\n                        .find(\"iframe:not(.k-content-frame)\").each(function(index) {\n                        // Restore the src attribute of the iframes when they are part of the live DOM tree\n                        this.src = iframeSrcAttributes[index];\n                    });\n\n                    if (this.containment) {\n                        this.containment.prepend(wrapper);\n                    } else if (this.appendTo) {\n                        wrapper.appendTo(this.appendTo);\n                    }\n\n                    wrapper.find(\".k-window-title\")\n                        .css(isRtl ? \"left\" : \"right\", outerWidth(wrapper.find(\".k-window-titlebar-actions\")) + 10);\n\n                    contentHtml.css(\"visibility\", \"\").show();\n\n                    if ($(contentHtml).hasClass(KHIDDEN))\n                    {\n                        $(contentHtml).removeClass(KHIDDEN);\n                    }\n                    contentHtml.find(\"[data-role=editor]\").each(function() {\n                        var editor = $(this).data(\"kendoEditor\");\n\n                        if (editor) {\n                            editor.refresh();\n                        }\n                    });\n\n                    wrapper = contentHtml = null;\n                }\n            });\n\n            templates = {\n                wrapper: template(() => \"<div class='k-window'></div>\"),\n                action: template(({ name, icon }) => {\n                    let iconName = (icon || \"\").toLowerCase() || name.toLowerCase();\n                    if (iconName == \"restore\") { iconName = \"window-restore\"; }\n\n                    return kendo.html.renderButton(`<button role='button' class='k-window-titlebar-action' aria-label='${name}'></button>`, { icon: iconName, fillMode: \"flat\" });\n                }),\n                titlebar: template(({ title }) =>\n                    \"<div class='k-window-titlebar'>\" +\n                        `<span class='k-window-title'>${title}</span>` +\n                        \"<div class='k-window-titlebar-actions'></div>\" +\n                    \"</div>\"\n                ),\n                overlay: \"<div class='k-overlay'></div>\",\n                contentFrame: template(({ title, content }) =>\n                    `<iframe frameborder='0' title='${title}' class='${KCONTENTFRAME}' ` +\n                    `src='${content.url}'>` +\n                    \"This page requires frames in order to show content\" +\n                    \"</iframe>\"\n                ),\n                resizeHandle: template((data) => `<div aria-hidden='true' class='k-resize-handle k-resize-${data}'></div>`)\n            };\n\n\n            function WindowResizing(wnd) {\n                var that = this;\n                that.owner = wnd;\n                that._preventDragging = false;\n                that._draggable = new Draggable(wnd.wrapper, {\n                    filter: \">\" + KWINDOWRESIZEHANDLES,\n                    group: wnd.wrapper.id + \"-resizing\",\n                    dragstart: that.dragstart.bind(that),\n                    drag: that.drag.bind(that),\n                    dragend: that.dragend.bind(that)\n                });\n\n                that._draggable.userEvents.bind(\"press\", that.addOverlay.bind(that));\n                that._draggable.userEvents.bind(\"release\", that.removeOverlay.bind(that));\n            }\n\n            WindowResizing.prototype = {\n                addOverlay: function() {\n                    this.owner.wrapper.append(templates.overlay);\n                },\n                removeOverlay: function() {\n                    this.owner.wrapper.find(KOVERLAY).remove();\n                },\n                dragstart: function(e) {\n                    var that = this;\n                    var wnd = that.owner;\n                    var wrapper = wnd.wrapper;\n\n                    that._preventDragging = wnd.trigger(RESIZESTART);\n                    if (that._preventDragging) {\n                        return;\n                    }\n\n                    that.elementPadding = parseInt(wrapper.css(\"padding-top\"), 10);\n                    that.initialPosition = kendo.getOffset(wrapper, \"position\");\n\n                    that.resizeDirection = e.currentTarget.prop(\"className\").replace(\"k-resize-handle k-resize-\", \"\");\n\n                    that.initialSize = {\n                        width: wrapper.outerWidth(),\n                        height: wrapper.outerHeight()\n                    };\n\n                    wnd._updateBoundaries();\n\n                    that.containerOffset = wnd.containment ? wnd.containment.position : kendo.getOffset(wnd.appendTo);\n\n                    var offsetParent = wrapper.offsetParent();\n\n                    if (offsetParent.is(\"html\")) {\n                        that.containerOffset.top = that.containerOffset.left = 0;\n                    } else {\n                        var marginTop = offsetParent.css(\"margin-top\");\n                        var marginLeft = offsetParent.css(\"margin-left\");\n                        var hasMargin = !zero.test(marginTop) || !zero.test(marginLeft);\n                        if (hasMargin) {\n                            var wrapperPosition = getPosition(wrapper[0]);\n                            var relativeElMarginLeft = wrapperPosition.left - that.containerOffset.left - that.initialPosition.left;\n                            var relativeElMarginTop = wrapperPosition.top - that.containerOffset.top - that.initialPosition.top;\n\n                            that._relativeElMarginLeft = relativeElMarginLeft > 1 ? relativeElMarginLeft : 0;\n                            that._relativeElMarginTop = relativeElMarginTop > 1 ? relativeElMarginTop : 0;\n\n                            that.initialPosition.left += that._relativeElMarginLeft;\n                            that.initialPosition.top += that._relativeElMarginTop;\n                        }\n                    }\n\n                    wrapper\n                        .children(KWINDOWRESIZEHANDLES).not(e.currentTarget).hide();\n\n                    $(BODY).css(CURSOR, e.currentTarget.css(CURSOR));\n                },\n                drag: function(e) {\n                    if (this._preventDragging) {\n                        return;\n                    }\n                    var that = this,\n                        wnd = that.owner,\n                        wrapper = wnd.wrapper,\n                        options = wnd.options,\n                        position = options.position,\n                        direction = that.resizeDirection,\n                        containerOffset = that.containerOffset,\n                        initialPosition = that.initialPosition,\n                        initialSize = that.initialSize,\n                        containmentContext = wnd.containment && !wnd._isPinned,\n                        rtl = kendo.support.isRtl(wnd.containment),\n                        leftRtlOffset = containmentContext && rtl && wnd.containment.innerWidth() > wnd.containment.width ? kendo.support.scrollbar() : 0,\n                        scrollOffset = containmentContext ? { top: wnd.containment.scrollTop(), left: wnd.containment.scrollLeft() } : { top: 0, left: 0 },\n                        newWidth, newHeight,\n                        windowBottom, windowRight,\n                        x = Math.max(e.x.location, 0),\n                        y = Math.max(e.y.location, 0);\n\n                        if (direction.indexOf(\"e\") >= 0) {\n\n                            if (wnd.containment && x - initialSize.width >= wnd.maxLeft - scrollOffset.left + containerOffset.left + leftRtlOffset) {\n                                newWidth = wnd.maxLeft + leftRtlOffset - initialPosition.left + initialSize.width - scrollOffset.left;\n                            } else {\n                                newWidth = x - initialPosition.left - containerOffset.left;\n                            }\n\n                            wrapper.outerWidth(constrain(newWidth, options.minWidth, options.maxWidth));\n                        } else if (direction.indexOf(\"w\") >= 0) {\n                            windowRight = initialPosition.left + initialSize.width + containerOffset.left;\n                            newWidth = constrain(windowRight - x, options.minWidth, options.maxWidth);\n                            position.left = windowRight - newWidth - containerOffset.left - leftRtlOffset - (that._relativeElMarginLeft || 0) + scrollOffset.left;\n\n                            if (wnd.containment && position.left <= wnd.minLeft) {\n                                position.left = wnd.minLeft;\n                                newWidth = constrain(windowRight - leftRtlOffset - position.left - containerOffset.left + scrollOffset.left, options.minWidth, options.maxWidth);\n                            }\n\n                            wrapper.css({\n                                left: position.left,\n                                width: newWidth\n                            });\n                        }\n\n                        var newWindowTop = y;\n                        if (wnd.options.pinned) {\n                            newWindowTop -= $(window).scrollTop();\n                        }\n                        if (direction.indexOf(\"s\") >= 0) {\n                            newHeight = newWindowTop - initialPosition.top - that.elementPadding - containerOffset.top;\n\n                            if (newWindowTop - initialSize.height - that.elementPadding >= wnd.maxTop + containerOffset.top - scrollOffset.top) {\n                                newHeight = wnd.maxTop - initialPosition.top + initialSize.height - scrollOffset.top;\n                            }\n\n                            wrapper.outerHeight(constrain(newHeight, options.minHeight, options.maxHeight));\n                        } else if (direction.indexOf(\"n\") >= 0) {\n                            windowBottom = initialPosition.top + initialSize.height + containerOffset.top;\n                            newHeight = constrain(windowBottom - newWindowTop, options.minHeight, options.maxHeight);\n                            position.top = windowBottom - newHeight - containerOffset.top - (that._relativeElMarginTop || 0) + scrollOffset.top;\n\n                            if (position.top <= wnd.minTop && wnd.containment) {\n                                position.top = wnd.minTop;\n                                newHeight = constrain(windowBottom - position.top - containerOffset.top + scrollOffset.top, options.minHeight, options.maxHeight);\n                            }\n\n                            wrapper.css({\n                                top: position.top,\n                                height: newHeight\n                            });\n                        }\n\n                        if (newWidth) {\n                            wnd.options.width = newWidth + \"px\";\n                        }\n                        if (newHeight) {\n                            wnd.options.height = newHeight + \"px\";\n                        }\n\n                        wnd.resize();\n                },\n                dragend: function(e) {\n                    if (this._preventDragging) {\n                        return;\n                    }\n\n                    var that = this,\n                        wnd = that.owner,\n                        wrapper = wnd.wrapper;\n\n                    wrapper\n                        .children(KWINDOWRESIZEHANDLES).not(e.currentTarget).show();\n\n                    $(BODY).css(CURSOR, \"\");\n\n                    if (wnd.touchScroller) {\n                        wnd.touchScroller.reset();\n                    }\n\n                    if (e.keyCode == 27) {\n                        wrapper.css(that.initialPosition)\n                            .css(that.initialSize);\n                    }\n\n                    wnd.trigger(RESIZEEND);\n\n                    return false;\n                },\n                destroy: function() {\n                    if (this._draggable) {\n                        this._draggable.destroy();\n                    }\n\n                    this._draggable = this.owner = null;\n                }\n            };\n\n            function WindowDragging(wnd, dragHandle, clickMoveClick) {\n                var that = this,\n                    filter = dragHandle;\n\n                if (clickMoveClick) {\n                    filter += \",.k-overlay\";\n                }\n\n                that.owner = wnd;\n                that._preventDragging = false;\n                that._draggable = new Draggable(wnd.wrapper, {\n                    filter: dragHandle,\n                    group: wnd.wrapper.id + \"-moving\",\n                    clickMoveClick: clickMoveClick,\n                    dragstart: that.dragstart.bind(that),\n                    drag: that.drag.bind(that),\n                    dragend: that.dragend.bind(that),\n                    dragcancel: that.dragcancel.bind(that)\n                });\n\n                that._draggable.userEvents.stopPropagation = false;\n            }\n\n            WindowDragging.prototype = {\n                dragstart: function(e) {\n                    var wnd = this.owner,\n                        draggable = wnd.options.draggable,\n                        element = wnd.element,\n                        actions = element.find(\".k-window-titlebar-actions\"),\n                        containerOffset = kendo.getOffset(wnd.appendTo);\n\n                    this._preventDragging = wnd.trigger(DRAGSTART) || !draggable;\n                    if (this._preventDragging || wnd.isMaximized()) {\n                        return;\n                    }\n\n                    wnd.initialWindowPosition = kendo.getOffset(wnd.wrapper, \"position\");\n\n                    if (!wnd.initialPointerPosition) {\n                        wnd.options.position.left = constrain(wnd.initialWindowPosition.left, wnd.minLeft, wnd.maxLeft);\n                        wnd.options.position.top = constrain(wnd.initialWindowPosition.top, wnd.minTop, wnd.maxTop);\n                    }\n\n                    wnd.initialPointerPosition = {\n                        left: wnd.options.position.left,\n                        top: wnd.options.position.top\n                    };\n\n                    wnd.startPosition = {\n                        left: e.x.client - wnd.initialWindowPosition.left,\n                        top: e.y.client - wnd.initialWindowPosition.top\n                    };\n\n                    wnd._updateBoundaries();\n                    if (!wnd.containment) {\n                        if (actions.length > 0) {\n                            wnd.minLeft = outerWidth(actions) + parseInt(actions.css(\"right\"), 10) - outerWidth(element);\n                        } else {\n                            wnd.minLeft = 20 - outerWidth(element); // at least 20px remain visible\n                        }\n\n                        wnd.minLeft -= containerOffset.left;\n                        wnd.minTop = -containerOffset.top;\n                    }\n\n                    $(templates.overlay).appendTo(wnd.wrapper).css({ opacity: 0 });\n\n                    wnd.wrapper.children(KWINDOWRESIZEHANDLES).hide();\n\n                    $(BODY).css(CURSOR, e.currentTarget.css(CURSOR));\n                },\n\n                drag: function(e) {\n                    var wnd = this.owner;\n                    var position = wnd.options.position;\n                    var axis = wnd.options.draggable.axis;\n                    var left;\n                    var top;\n\n                    if (this._preventDragging || wnd.isMaximized()) {\n                        return;\n                    }\n\n                    if (!axis || axis.toLowerCase() === \"x\") {\n                        left = e.x.client - wnd.startPosition.left;\n\n                        if (wnd.containment && !wnd._isPinned) {\n                            left += wnd.containment.scrollLeft();\n                        }\n\n                        position.left = constrain(left, wnd.minLeft, wnd.maxLeft);\n                    }\n\n                    if (!axis || axis.toLowerCase() === \"y\") {\n                        top = e.y.client - wnd.startPosition.top;\n\n                        if (wnd.containment && !wnd._isPinned) {\n                            top += wnd.containment.scrollTop();\n                        }\n\n                        position.top = constrain(top, wnd.minTop, wnd.maxTop);\n                    }\n\n                    $(wnd.wrapper).css(\n                        \"transform\", \"translate(\" +\n                        (position.left - wnd.initialPointerPosition.left) + \"px, \" +\n                        (position.top - wnd.initialPointerPosition.top) + \"px)\"\n                    );\n\n                },\n\n                _finishDrag: function() {\n                    var wnd = this.owner;\n\n                    wnd.wrapper\n                        .children(KWINDOWRESIZEHANDLES).toggle(!wnd.options.isMinimized).end()\n                        .find(KOVERLAY).remove();\n\n                    $(BODY).css(CURSOR, \"\");\n                },\n\n                dragcancel: function(e) {\n                    if (this._preventDragging) {\n                        return;\n                    }\n                    this._finishDrag();\n\n                    e.currentTarget.closest(KWINDOW).css(this.owner.initialWindowPosition);\n                },\n\n                dragend: function() {\n                    var wnd = this.owner;\n\n                    if (this._preventDragging || wnd.isMaximized()) {\n                        return;\n                    }\n\n                    $(wnd.wrapper)\n                        .css(wnd.options.position)\n                        .css(\"transform\", \"\");\n\n                    this._finishDrag();\n\n                    wnd.trigger(DRAGEND);\n\n                    return false;\n                },\n                destroy: function() {\n                    if (this._draggable) {\n                        this._draggable.destroy();\n                    }\n\n                    this._draggable = this.owner = null;\n                }\n            };\n\n            kendo.ui.plugin(Window);\n\n        })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    exports.__meta__ = __meta__;\n    exports.default = kendo$1;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}