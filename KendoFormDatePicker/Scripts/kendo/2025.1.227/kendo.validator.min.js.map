{"version":3,"sources":["raw-js/kendo.validator.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendo","_globals","Validator","this","$","window","Widget","ui","NS","INVALIDMSG","invalidMsgRegExp","RegExp","INVALIDINPUT","VALIDINPUT","VALIDATIONSUMMARY","INVALIDLABEL","MESSAGEBOX","ARIAINVALID","emailRegExp","ALLOWED_URL_PROTOCOLS","INPUTSELECTOR","CHECKBOXSELECTOR","NUMBERINPUTSELECTOR","BLUR","NAME","FORM","NOVALIDATE","VALIDATE","CHANGE","VALIDATE_INPUT","patternMatcher","value","pattern","test","hasAttribute","input","name","length","attributes","parseHtml","text","parseHTML","searchForMessageContainer","elements","fieldName","element","containers","idx","className","getAttribute","attr","add","isLabelFor","label","nodeName","validator","rules","messages","allowSubmit","noop","validateOnInit","SUMMARYTEMPLATE","errors","result","i","field","message","extend","init","options","that","resolved","resolvers","ruleResolvers","resolve","resolveRules","validateAttributeSelector","fn","call","_errorTemplate","template","errorTemplate","_summaryTemplate","validationSummary","is","_shouldSearchDocument","_containerElement","document","_inputSelector","_buildSelector","_checkboxSelector","_errors","_attachEvents","_isValidated","_validateOnInit","validate","events","required","min","max","step","email","url","date","dateCompare","captcha","containerElement","noNameCheckbox","quote","indexOf","namedCheckbox","find","checkbox","filter","radio","val","parseFloat","raise","decimals","split","Math","pow","floor","selector","matcher","URL","includes","protocol","parseDate","widgetInstance","isValidated","isValid","data","getCaptchaId","_validating","done","_checkElement","fail","error","console","warn","removeData","validateOnBlur","selectorConstant","formSelector","_allowSubmit","destroy","off","_submit","e","stopPropagation","stopImmediatePropagation","preventDefault","state","validateInput","trigger","on","bind","inputs","invalid","eq","showValidationSummary","valid","isEmpty","closest","otpContainer","_checkValidity","lbl","_findMessageContainer","next","addClass","messageText","_extractMessage","key","messageLabel","replace","wasValid","isInputInner","inputWrapper","parent","removeAttr","hasClass","lblId","_decorateMessageContainer","replaceWith","parentElement","get","nextElement","prevElement","prev","wrapper","insertAfter","removeClass","_inputWrapper","toggleClass","widgetName","inputWrap","inputLabel","_inputLabel","_removeInvalidState","_addInvalidState","errorId","_associateMessageContainer","hideMessages","_disassociateMessageContainers","reset","labels","hideValidationSummary","locators","messageLocators","target","getElementsByTagName","locate","container","decorate","ruleKey","nonDefaultMessage","customMessage","prototype","isFunction","format","rule","results","push","setOptions","deepExtend","_setEvents","_getInputNames","sorted","nextFocusable","getWidgetFocusableElement","toggleAttribute","addBack","_errorsByName","inputNames","_renderSummary","insertBefore","join","_summaryClick","link","errorsList","summary","html","plugin","jQuery","kendo$1","__meta__","id","category","description","depends","default","Object","defineProperty"],"mappings":"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","file":"kendo.validator.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('kendo.core.js')) :\n    typeof define === 'function' && define.amd ? define(['exports', 'kendo.core'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.kendo = global.kendo || {}, global.kendo._globals = global.kendo._globals || {}, global.kendo._globals.Validator = {})));\n})(this, (function (exports) {\n    const __meta__ = {\n        id: \"validator\",\n        name: \"Validator\",\n        category: \"web\",\n        description: \"The Validator offers an easy way to do a client-side form validation.\",\n        depends: [ \"core\" ]\n    };\n\n\n    (function($, undefined$1) {\n        let kendo = window.kendo,\n            Widget = kendo.ui.Widget,\n            NS = \".kendoValidator\",\n            INVALIDMSG = \"k-invalid-msg\",\n            invalidMsgRegExp = new RegExp(INVALIDMSG,'i'),\n            INVALIDINPUT = \"k-invalid\",\n            VALIDINPUT = \"k-valid\",\n            VALIDATIONSUMMARY = \"k-validation-summary\",\n            INVALIDLABEL = \"k-text-error\",\n            MESSAGEBOX = \"k-messagebox k-messagebox-error\",\n            INPUTINNER = \".k-input-inner\",\n            INPUTWRAPPER = \".k-input\",\n            ARIAINVALID = \"aria-invalid\",\n            ARIADESCRIBEDBY = \"aria-describedby\",\n            emailRegExp = /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/i,\n            ALLOWED_URL_PROTOCOLS = [\"http:\", \"https:\", \"ftp:\", \"ftps:\"],\n            INPUTSELECTOR = \":input:not(:button,[type=submit],[type=reset],[disabled],[readonly])\",\n            CHECKBOXSELECTOR = \":checkbox:not([disabled],[readonly])\",\n            NUMBERINPUTSELECTOR = \"[type=number],[type=range]\",\n            BLUR = \"blur\",\n            NAME = \"name\",\n            FORM = \"form\",\n            NOVALIDATE = \"novalidate\",\n            //events\n            VALIDATE = \"validate\",\n            CHANGE = \"change\",\n            VALIDATE_INPUT = \"validateInput\",\n\n            patternMatcher = function(value, pattern) {\n                if (typeof pattern === \"string\") {\n                    pattern = new RegExp('^(?:' + pattern + ')$');\n                }\n                return pattern.test(value);\n            },\n            matcher = function(input, selector, pattern) {\n                var value = input.val();\n\n                if (input.filter(selector).length && value !== \"\") {\n                    return patternMatcher(value, pattern);\n                }\n                return true;\n            },\n            hasAttribute = function(input, name) {\n                if (input.length) {\n                    return input[0].attributes[name] != null;\n                }\n                return false;\n            };\n\n        if (!kendo.ui.validator) {\n            kendo.ui.validator = { rules: {}, messages: {}, allowSubmit: $.noop, validateOnInit: $.noop };\n        }\n\n        function resolveRules(element) {\n            var resolvers = kendo.ui.validator.ruleResolvers || {},\n                rules = {},\n                name;\n\n            for (name in resolvers) {\n                $.extend(true, rules, resolvers[name].resolve(element));\n            }\n            return rules;\n        }\n\n        function decode(value) {\n            return value.replace(/&amp/g, '&amp;')\n                .replace(/&quot;/g, '\"')\n                .replace(/&#39;/g, \"'\")\n                .replace(/&lt;/g, '<')\n                .replace(/&gt;/g, '>');\n        }\n\n        function numberOfDecimalDigits(value) {\n            value = (value + \"\").split('.');\n            if (value.length > 1) {\n                return value[1].length;\n            }\n            return 0;\n        }\n\n        function parseHtml(text) {\n            if ($.parseHTML) {\n                return $($.parseHTML(text));\n            }\n            return $(text);\n        }\n\n        function searchForMessageContainer(elements, fieldName) {\n            var containers = $(),\n                element,\n                attr;\n\n            for (var idx = 0, length = elements.length; idx < length; idx++) {\n                element = elements[idx];\n                if (invalidMsgRegExp.test(element.className)) {\n                    attr = element.getAttribute(kendo.attr(\"for\"));\n                    if (attr === fieldName) {\n                        containers = containers.add(element);\n                    }\n                }\n            }\n            return containers;\n        }\n\n        function isLabelFor(label, element) {\n            if (!label) {\n                return false;\n            }\n            if (typeof label.nodeName !== 'string' || label.nodeName !== 'LABEL') {\n                return false;\n            }\n            if (typeof label.getAttribute('for') !== 'string' || typeof element.getAttribute('id') !== 'string') {\n                return false;\n            }\n            if (label.getAttribute('for') !== element.getAttribute('id')) {\n                return false;\n            }\n\n            return true;\n        }\n\n        var SUMMARYTEMPLATE = ({ errors }) => {\n            let result = '<ul>';\n            for (var i = 0; i < errors.length; i += 1) {\n                result += `<li><a data-field=\"${errors[i].field}\" href=\"#\">${errors[i].message}</a></li>`;\n            }\n\n            result += '</ul>';\n            return result;\n        };\n\n        var Validator = Widget.extend({\n            init: function(element, options) {\n                var that = this,\n                    resolved = resolveRules(element),\n                    validateAttributeSelector = \"[\" + kendo.attr(\"validate\") + \"!=false]\";\n\n                options = options || {};\n\n                options.rules = $.extend({}, kendo.ui.validator.rules, resolved.rules, options.rules);\n                options.messages = $.extend({}, kendo.ui.validator.messages, resolved.messages, options.messages);\n\n                Widget.fn.init.call(that, element, options);\n\n                that._errorTemplate = kendo.template(that.options.errorTemplate);\n                that._summaryTemplate = kendo.template(that.options.validationSummary.template || SUMMARYTEMPLATE);\n\n                if (that.element.is(FORM)) {\n                    that.element.attr(NOVALIDATE, NOVALIDATE);\n                }\n\n                that._shouldSearchDocument = that.element.is(FORM) && that.element.attr(\"id\") !== undefined$1;\n                that._containerElement = that._shouldSearchDocument ? $(document) : that.element;\n                that._inputSelector = that._buildSelector(INPUTSELECTOR, validateAttributeSelector);\n                that._checkboxSelector = that._buildSelector(CHECKBOXSELECTOR, validateAttributeSelector);\n\n                that._errors = {};\n                that._attachEvents();\n                that._isValidated = false;\n\n                if (that._validateOnInit()) {\n                    that.validate();\n                }\n            },\n\n            events: [ VALIDATE, CHANGE, VALIDATE_INPUT ],\n\n            options: {\n                name: \"Validator\",\n                errorTemplate: ({ message }) => `<span class=\"k-form-error\">${message}</span>`,\n                messages: {\n                    required: \"{0} is required\",\n                    pattern: \"{0} is not valid\",\n                    min: \"{0} should be greater than or equal to {1}\",\n                    max: \"{0} should be smaller than or equal to {1}\",\n                    step: \"{0} is not valid\",\n                    email: \"{0} is not valid email\",\n                    url: \"{0} is not valid URL\",\n                    date: \"{0} is not valid date\",\n                    dateCompare: \"End date should be greater than or equal to the start date\",\n                    captcha: \"The text you entered doesn't match the image.\"\n                },\n                rules: {\n                    required: function(input) {\n                        let containerElement = this._containerElement,\n                            noNameCheckbox = !input.attr(\"name\") && !input.is(\":checked\"),\n                            name = input.attr(\"name\"),\n                            quote = !!name && name.indexOf(\"'\") > -1 ? '\\\"' : \"'\",\n                            namedCheckbox = input.attr(\"name\") && !containerElement.find(\"input[name=\" + quote + input.attr(\"name\") + quote + \"]:checked\").length,\n                            checkbox = input.filter(\"[type=checkbox]\").length && (noNameCheckbox || namedCheckbox),\n                            radio = input.filter(\"[type=radio]\").length && !containerElement.find(\"input[name=\" + quote + input.attr(\"name\") + quote + \"]:checked\").length,\n                            value = input.val();\n\n                        return !(hasAttribute(input, \"required\") && (!value || value === \"\" || value.length === 0 || checkbox || radio));\n                    },\n                    pattern: function(input) {\n                        if (input.filter(\"[type=text],[type=email],[type=url],[type=tel],[type=search],[type=password]\").filter(\"[pattern]\").length && input.val() !== \"\") {\n                            return patternMatcher(input.val(), input.attr(\"pattern\"));\n                        }\n                        return true;\n                    },\n                    min: function(input) {\n                        if (input.filter(NUMBERINPUTSELECTOR + \",[\" + kendo.attr(\"type\") + \"=number]\").filter(\"[min]\").length && input.val() !== \"\") {\n                            var min = parseFloat(input.attr(\"min\")) || 0,\n                                val = kendo.parseFloat(input.val());\n\n                            return min <= val;\n                        }\n                        return true;\n                    },\n                    max: function(input) {\n                        if (input.filter(NUMBERINPUTSELECTOR + \",[\" + kendo.attr(\"type\") + \"=number]\").filter(\"[max]\").length && input.val() !== \"\") {\n                            var max = parseFloat(input.attr(\"max\")) || 0,\n                                val = kendo.parseFloat(input.val());\n\n                            return max >= val;\n                        }\n                        return true;\n                    },\n                    step: function(input) {\n                        if (input.filter(NUMBERINPUTSELECTOR + \",[\" + kendo.attr(\"type\") + \"=number]\").filter(\"[step]\").length && input.val() !== \"\") {\n                            var min = parseFloat(input.attr(\"min\")) || 0,\n                                step = kendo.parseFloat(input.attr(\"step\")) || 1,\n                                val = parseFloat(input.val()),\n                                decimals = numberOfDecimalDigits(step),\n                                raise;\n\n                            if (decimals) {\n                                raise = Math.pow(10, decimals);\n                                return ((Math.floor((val - min) * raise)) % (step * raise)) / Math.pow(100, decimals) === 0;\n                            }\n                            return ((val - min) % step) === 0;\n                        }\n                        return true;\n                    },\n                    email: function(input) {\n                        return matcher(input, \"[type=email],[\" + kendo.attr(\"type\") + \"=email]\", emailRegExp);\n                    },\n                    url: function(input) {\n                        if (input.filter(\"[type=url],[\" + kendo.attr(\"type\") + \"=url]\").length && input.val() !== \"\") {\n                            try {\n                                const url = new URL(input.val());\n                                return ALLOWED_URL_PROTOCOLS.includes(url.protocol);\n                            } catch {\n                                return false;\n                            }\n                        }\n                        return true;\n                    },\n                    date: function(input) {\n                        if (input.filter(\"[type^=date],[\" + kendo.attr(\"type\") + \"=date]\").length && input.val() !== \"\") {\n                            return kendo.parseDate(input.val(), input.attr(kendo.attr(\"format\"))) !== null;\n                        }\n                        return true;\n                    },\n                    captcha: function(input) {\n                        if (input.filter(\"[\" + kendo.attr(\"role\") + \"=captcha]\").length) {\n                            var that = this,\n                                captcha = kendo.widgetInstance(input),\n                                isValidated = function(isValid) {\n                                    return typeof(isValid) !== 'undefined' && isValid !== null;\n                                };\n\n                            if (!input.data(\"captcha_validating\") && !isValidated(captcha.isValid()) && !!captcha.getCaptchaId()) {\n                                input.data(\"captcha_validating\", true);\n                                that._validating = true;\n                                captcha.validate().done(function() {\n                                    that._validating = false;\n                                    that._checkElement(input);\n                                }).fail(function(data) {\n                                    that._validating = false;\n                                    if (data.error && data.error === \"handler_not_defined\") {\n                                        window.console.warn(\"Captcha's validationHandler is not defined! You should either define a proper validation endpoint or declare a callback function to ensure the required behavior.\");\n                                    }\n                                });\n                            }\n\n                            if (isValidated(captcha.isValid())) {\n                                input.removeData(\"captcha_validating\");\n                                return captcha.isValid();\n                            }\n                        }\n                        return true;\n                    }\n                },\n                validateOnBlur: true,\n                validationSummary: false\n            },\n\n            _buildSelector: function(selectorConstant, validateAttributeSelector) {\n                const that = this,\n                formSelector = `,[form=\"${that.element.attr(\"id\")}\"]`;\n                let selector = selectorConstant + validateAttributeSelector;\n\n                if ( that._shouldSearchDocument) {\n                    selector += formSelector;\n                }\n\n                return selector;\n            },\n\n            _allowSubmit: function() {\n                return kendo.ui.validator.allowSubmit(this.element, this.errors());\n            },\n\n            _validateOnInit: function() {\n                return kendo.ui.validator.validateOnInit(this.element);\n            },\n\n            destroy: function() {\n                Widget.fn.destroy.call(this);\n\n                this.element.off(NS);\n\n                if (this.validationSummary) {\n                    this.validationSummary.off(NS);\n                    this.validationSummary = null;\n                }\n            },\n\n            value: function() {\n                if (!this._isValidated) {\n                    return false;\n                }\n\n                return this.errors().length === 0;\n            },\n\n            _submit: function(e) {\n                if ((!this.validate() && !this._allowSubmit()) || this._validating) {\n                    e.stopPropagation();\n                    e.stopImmediatePropagation();\n                    e.preventDefault();\n                    return false;\n                }\n                return true;\n            },\n\n            _checkElement: function(element) {\n                var state = this.value();\n\n                this.validateInput(element);\n\n                if (this.value() !== state) {\n                    this.trigger(CHANGE);\n                }\n            },\n\n            _attachEvents: function() {\n                const that = this,\n                element = that._containerElement;\n\n                if (that.element.is(FORM)) {\n                    that.element.on(\"submit\" + NS, that._submit.bind(that));\n                }\n\n                if (that.options.validateOnBlur) {\n                    if (!element.is(INPUTSELECTOR)) {\n                        element.on(BLUR + NS, that._inputSelector, function() {\n                            that._checkElement($(this));\n                        });\n\n                        element.on(\"click\" + NS, that._checkboxSelector, function() {\n                            that._checkElement($(this));\n                        });\n                    } else {\n                        element.on(BLUR + NS, function() {\n                            that._checkElement(that.element);\n                        });\n\n                        if (element.is(CHECKBOXSELECTOR)) {\n                            element.on(\"click\" + NS, function() {\n                                that._checkElement(that.element);\n                            });\n                        }\n                    }\n                }\n            },\n\n            validate: function() {\n                let inputs;\n                let idx;\n                let result = false;\n                let length;\n                let containerElement = this._containerElement;\n                let isValid = this.value();\n\n                this._errors = {};\n\n                if (!this.element.is(INPUTSELECTOR)) {\n                    let invalid = false;\n\n                    inputs = containerElement.find(this._inputSelector);\n\n                    for (idx = 0, length = inputs.length; idx < length; idx++) {\n                        if (!this.validateInput(inputs.eq(idx))) {\n                            invalid = true;\n                        }\n                    }\n\n                    result = !invalid;\n                } else {\n                    result = this.validateInput(this.element);\n                }\n\n                if (this.options.validationSummary && !isValid) {\n                    this.showValidationSummary();\n                }\n\n                this.trigger(VALIDATE, { valid: result, errors: this.errors() });\n\n                if (isValid !== result) {\n                    this.trigger(CHANGE);\n                }\n\n                return result;\n            },\n\n            validateInput: function(input) {\n                input = $(input);\n\n                if (!kendo.isEmpty(input.closest('.k-otp'))) {\n                    let otpContainer = input.closest(\".k-otp\");\n                    input = otpContainer.find(\"input[data-role='otpinput']\");\n                }\n\n\n                this._isValidated = true;\n\n                const that = this,\n                    template = that._errorTemplate,\n                    result = that._checkValidity(input),\n                    valid = result.valid,\n                    className = \".\" + INVALIDMSG,\n                    fieldName = (input.attr(NAME) || \"\"),\n                    lbl = that._findMessageContainer(fieldName).add(input.next(className).filter(function() {\n                        let element = that._shouldSearchDocument ? $(document) : $(this);\n                        if (element.filter(\"[\" + kendo.attr(\"for\") + \"]\").length) {\n                            return element.attr(kendo.attr(\"for\")) === fieldName;\n                        }\n\n                        return true;\n\n                    })).addClass(\"k-hidden\"),\n                    messageText = !valid ? that._extractMessage(input, result.key) : \"\",\n                    messageLabel = !valid ? parseHtml(template({ message: decode(messageText), field: fieldName })) : \"\",\n                    wasValid = !input.attr(ARIAINVALID),\n                    isInputInner = input.is(INPUTINNER),\n                    inputWrapper = input.parent(INPUTWRAPPER);\n                let widgetInstance;\n\n                input.removeAttr(ARIAINVALID);\n\n                if (input.hasClass(\"k-hidden\") && input.attr(\"data-role\") == \"otpinput\") {\n                    widgetInstance = kendo.widgetInstance(input);\n                }\n                if (input.hasClass(\"k-hidden\") && input.attr(\"data-role\") != \"otpinput\") {\n                    widgetInstance = kendo.widgetInstance(input.closest(\".k-signature\"));\n                }\n\n                if (input.is(\"[type=radio]\")) {\n                    widgetInstance = kendo.widgetInstance(input.closest(\".k-radio-list\"));\n                }\n\n                if (input.is(\"[type=checkbox]\")) {\n                    widgetInstance = kendo.widgetInstance(input.closest(\".k-checkbox-list\"));\n                }\n\n                if (!valid && !input.data(\"captcha_validating\")) {\n                    that._errors[fieldName] = messageText;\n                    let lblId = lbl.attr('id');\n\n                    that._decorateMessageContainer(messageLabel, fieldName);\n\n\n                    if (lblId) {\n                        messageLabel.attr('id', lblId);\n                    }\n\n                    if (lbl.length !== 0) {\n                        lbl.replaceWith(messageLabel);\n                    } else {\n                        widgetInstance = widgetInstance || kendo.widgetInstance(input);\n                        let parentElement = input.parent().get(0);\n                        let nextElement = input.next().get(0);\n                        let prevElement = input.prev().get(0);\n\n                        // Get the instance of the RadioGroup which is not initialized on the input element\n                        if (!widgetInstance && input.is(\"[type=radio]\")) {\n                            widgetInstance = kendo.widgetInstance(input.closest(\".k-radio-list\"));\n                        }\n\n                        // Get the instance of the CheckBoxGroup which is not initialized on the input element\n                        if (!widgetInstance && input.is(\"[type=checkbox]\")) {\n                            widgetInstance = kendo.widgetInstance(input.closest(\".k-checkbox-list\"));\n                        }\n\n                        if (widgetInstance && widgetInstance.wrapper && (widgetInstance.element !== widgetInstance.wrapper || [\"Signature\", \"RadioGroup\", \"CheckBoxGroup\"].indexOf(widgetInstance.options.name) > -1)) {\n                            messageLabel.insertAfter(widgetInstance.wrapper);\n                        } else if (parentElement && parentElement.nodeName === \"LABEL\") {\n                            // Input inside label\n                            messageLabel.insertAfter(parentElement);\n                        } else if (nextElement && isLabelFor(nextElement, input[0])) {\n                            // Input before label\n                            messageLabel.insertAfter(nextElement);\n                        } else if (prevElement && isLabelFor(prevElement, input[0])) {\n                            // Input after label\n                            messageLabel.insertAfter(input);\n                        } else if (isInputInner && inputWrapper.length) {\n                            // Input after input wrapper\n                            messageLabel.insertAfter(inputWrapper);\n                        } else {\n                            messageLabel.insertAfter(input);\n                        }\n                    }\n\n                    messageLabel.removeClass(\"k-hidden\");\n\n                    input.attr(ARIAINVALID, true);\n                } else {\n                    delete that._errors[fieldName];\n                }\n\n                if (wasValid !== valid) {\n                    this.trigger(VALIDATE_INPUT, { valid: valid, input: input, error: messageText, field: fieldName });\n                }\n\n                widgetInstance = (widgetInstance && widgetInstance.options.name == \"Signature\") ? widgetInstance : kendo.widgetInstance(input);\n\n                if (!widgetInstance || !(widgetInstance._inputWrapper || widgetInstance.wrapper) || (input.is(\"[type=checkbox]\") || input.is(\"[type=radio]\"))) {\n                    input.toggleClass(INVALIDINPUT, !valid);\n                    input.toggleClass(VALIDINPUT, valid);\n                }\n\n                if (widgetInstance) {\n                    let widgetName = widgetInstance.options.name;\n                    let inputWrap = widgetInstance._inputWrapper || widgetInstance.wrapper;\n                    let inputLabel = widgetInstance._inputLabel;\n\n                    if (widgetName == \"OTPInput\") {\n                        if (!valid) {\n                            widgetInstance._addInvalidState.bind(that);\n                            widgetInstance._addInvalidState(inputWrap, true);\n                        } else {\n                            widgetInstance._removeInvalidState.bind(that);\n                            widgetInstance._removeInvalidState(inputWrap, true);\n                        }\n                    } else if (inputWrap && !(input.is(\"[type=checkbox]\") || input.is(\"[type=radio]\"))) {\n                        inputWrap.toggleClass(INVALIDINPUT, !valid);\n                        inputWrap.toggleClass(VALIDINPUT, valid);\n                    }\n                    if (inputLabel) {\n                        inputLabel.toggleClass(INVALIDLABEL, !valid);\n                    }\n                }\n\n                if (wasValid !== valid) {\n                    let errorId = messageLabel ? messageLabel.attr(\"id\") : lbl.attr(\"id\");\n\n                    that._associateMessageContainer(input, errorId);\n\n                    if (this.options.validationSummary && this.options.validateOnBlur) {\n                        this.showValidationSummary();\n                    }\n                }\n\n                return valid;\n            },\n\n            hideMessages: function() {\n                const that = this,\n                    className = \".\" + INVALIDMSG,\n                    element = that._containerElement;\n\n                that._disassociateMessageContainers();\n\n                if (!element.is(INPUTSELECTOR)) {\n                    element.find(className).addClass(\"k-hidden\");\n                } else {\n                    element.next(className).addClass(\"k-hidden\");\n                }\n            },\n\n            reset: function() {\n                const that = this,\n                    containerElement = that._containerElement,\n                    inputs = containerElement.find(\".\" + INVALIDINPUT),\n                    labels = containerElement.find(\".\" + INVALIDLABEL);\n\n                that._errors = [];\n\n                that.hideMessages();\n\n                that.hideValidationSummary();\n\n                inputs.removeAttr(ARIAINVALID);\n                inputs.removeClass(INVALIDINPUT);\n                labels.removeClass(INVALIDLABEL);\n            },\n\n            _findMessageContainer: function(fieldName) {\n                let locators = kendo.ui.validator.messageLocators,\n                    name,\n                    containers = $();\n\n                for (let idx = 0, length = this.element.length; idx < length; idx++) {\n                    let target = this._shouldSearchDocument ? document : this.element[idx];\n                    containers = containers.add(searchForMessageContainer(target.getElementsByTagName(\"*\"), fieldName));\n                }\n\n                for (name in locators) {\n                    containers = containers.add(locators[name].locate(this._containerElement, fieldName));\n                }\n\n                return containers;\n            },\n\n            _decorateMessageContainer: function(container, fieldName) {\n                var locators = kendo.ui.validator.messageLocators,\n                    name;\n\n                container.addClass(INVALIDMSG)\n                    .attr(kendo.attr(\"for\"), fieldName || \"\");\n\n                if (!container.attr(\"id\")) {\n                    container.attr(\"id\", fieldName + \"-error\");\n                }\n\n                for (name in locators) {\n                    locators[name].decorate(container, fieldName);\n                }\n            },\n\n            _extractMessage: function(input, ruleKey) {\n                var that = this,\n                    customMessage = that.options.messages[ruleKey],\n                    fieldName = input.attr(NAME),\n                    nonDefaultMessage;\n\n                if (!kendo.ui.Validator.prototype.options.messages[ruleKey]) {\n                     nonDefaultMessage = kendo.isFunction(customMessage) ? customMessage(input) : customMessage;\n                }\n\n                customMessage = kendo.isFunction(customMessage) ? customMessage(input) : customMessage;\n\n                return kendo.format(input.attr(kendo.attr(ruleKey + \"-msg\")) || input.attr(\"validationMessage\") || nonDefaultMessage || customMessage || input.attr(\"title\") || \"\",\n                    fieldName,\n                    input.attr(ruleKey) || input.attr(kendo.attr(ruleKey)));\n            },\n\n            _checkValidity: function(input) {\n                var rules = this.options.rules,\n                    rule;\n\n                for (rule in rules) {\n                    if (!rules[rule].call(this, input)) {\n                        return { valid: false, key: rule };\n                    }\n                }\n\n                return { valid: true };\n            },\n\n            errors: function() {\n                var results = [],\n                    errors = this._errors,\n                    error;\n\n                for (error in errors) {\n                    results.push(errors[error]);\n                }\n                return results;\n            },\n\n            setOptions: function(options) {\n                if (options.validationSummary) {\n                    this.hideValidationSummary();\n                }\n\n                kendo.deepExtend(this.options, options);\n\n                this.destroy();\n\n                this.init(this.element, this.options);\n\n                this._setEvents(this.options);\n            },\n\n            _getInputNames: function() {\n                const that = this,\n                    containerElement = this._containerElement,\n                    inputs = containerElement.find(that._inputSelector);\n                let sorted = [];\n\n                for (let idx = 0, length = inputs.length; idx < length; idx++) {\n                    let input = $(inputs[idx]);\n\n                    if (hasAttribute(input, NAME)) {\n                        // Add current name if:\n                        // - not present so far;\n                        // - present but not part of CheckBoxGroup or RadioGroup.\n                        if (sorted.indexOf(input.attr(NAME)) === -1 ||\n                            (input.closest(\".k-checkbox-list\").length === 0 &&\n                            input.closest(\".k-radio-list\").length === 0)) {\n                                sorted.push(input.attr(NAME));\n                        }\n                    }\n                }\n\n                return sorted;\n            },\n\n            _associateMessageContainer: function(input, errorId) {\n                var nextFocusable = kendo.getWidgetFocusableElement(input);\n\n                if (!nextFocusable || !errorId) {\n                    return;\n                }\n\n                kendo.toggleAttribute(nextFocusable, ARIADESCRIBEDBY, errorId);\n            },\n\n            _disassociateMessageContainers: function() {\n                var that = this,\n                    inputs = that.element.find(\".\" + INVALIDINPUT).addBack(),\n                    input, errorId;\n\n                for (var i = 0; i < inputs.length; i += 1) {\n                    input = $(inputs[i]);\n\n                    if (input.is(\"input\")) {\n                        errorId = that._findMessageContainer(input.attr(NAME))\n                            .add(input.next(\".\" + INVALIDMSG))\n                            .attr(\"id\");\n\n                        that._associateMessageContainer(input, errorId);\n                    }\n                }\n            },\n\n            _errorsByName: function() {\n                var that = this,\n                    inputNames = that._getInputNames(),\n                    sorted = [];\n\n                for (var i = 0; i < inputNames.length; i += 1) {\n                    var name = inputNames[i];\n\n                    if (that._errors[name]) {\n                        sorted.push({\n                            field: name,\n                            message: that._errors[name]\n                        });\n                    }\n                }\n\n                return sorted;\n            },\n\n            _renderSummary: function() {\n                var that = this,\n                    options = this.options.validationSummary,\n                    element = this.element,\n                    prevElement = element.prev(),\n                    container;\n\n                if (options.container) {\n                    container = $(options.container);\n                } else if (prevElement && prevElement.hasClass(VALIDATIONSUMMARY)) {\n                    container = prevElement;\n                } else {\n                    container = $(\"<div />\").insertBefore(that.element);\n                }\n\n                container.addClass([VALIDATIONSUMMARY, MESSAGEBOX].join(\" \"));\n                container.attr(\"role\", \"alert\");\n\n                container.on(\"click\" + NS, that._summaryClick.bind(that));\n\n                return container;\n            },\n\n            _summaryClick: function(e) {\n                e.preventDefault();\n\n                var that = this,\n                    link = $(e.target),\n                    target = that.element.find(\"[name='\" + link.data(\"field\") + \"']\"),\n                    nextFocusable;\n\n                if (!target.length) {\n                    return;\n                }\n\n                nextFocusable = kendo.getWidgetFocusableElement(target);\n\n                if (nextFocusable) {\n                    nextFocusable.trigger(\"focus\");\n                }\n            },\n\n            showValidationSummary: function() {\n                var that = this,\n                    summary = that.validationSummary,\n                    errors = that._errorsByName(),\n                    errorsList;\n\n                if (!summary) {\n                    summary = that.validationSummary = that._renderSummary();\n                }\n\n                errorsList = parseHtml(that._summaryTemplate({\n                    errors: errors\n                }));\n\n                summary.html(errorsList);\n\n                summary.toggleClass(\"k-hidden\", !errors.length);\n            },\n\n            hideValidationSummary: function() {\n                var that = this,\n                    summary = that.validationSummary;\n\n                if (!summary) {\n                    return;\n                }\n\n                summary.addClass(\"k-hidden\");\n            }\n        });\n\n        kendo.ui.plugin(Validator);\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    exports.__meta__ = __meta__;\n    exports.default = kendo$1;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}