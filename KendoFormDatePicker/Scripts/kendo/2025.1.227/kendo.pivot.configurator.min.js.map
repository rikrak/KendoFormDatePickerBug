{"version":3,"sources":["raw-js/kendo.pivot.configurator.js"],"names":["global","factory","exports","module","require","define","amd","globalThis","self","kendo","_globals","PivotConfigurator","Dom","HtmlChip","HtmlChiplist","Treeview","TreeviewDraganddrop","Icons","PivotgridCommonCmnChunk","this","kendo_dom_js","kendo_html_chip_js","kendo_html_chiplist_js","kendo_treeview_js","kendo_treeview_draganddrop_js","kendo_icons_js","kendo_pivotgridCommon_cmn_chunk_js","$","window","ui","encode","htmlEncode","Widget","ns","HOVER_EVENTS","SETTING_CONTAINER_TEMPLATE","name","addKPI","data","found","idx","length","type","splice","caption","defaultHierarchy","uniqueName","kpiNode","node","normalizeKPIs","settingTargetFromNode","target","closest","PivotConfiguratorV2","extend","init","element","options","fn","call","_ariaId","attr","guid","addClass","role","_dataSource","navigatable","_initPivotGridConfiguratorNavigation","_layout","refresh","height","notify","events","orientation","filterable","sortable","messages","title","cancelButtonText","applyButtonText","measures","columns","rows","setDataSource","dataSource","that","configuratorNavigation","I","tabIndex","start","firstCell","first","setAttribute","_refreshHandler","unbind","_errorHandler","_progressHandler","_error","bind","_requestStart","PivotDataSourceV2","create","horizontal","panel","append","headerTextId","SETTINGS_TEMPLATE","appendTo","formClass","ariaId","CONTENT_TEMPLATE","find","each","index","elm","html","renderChipList","_fields","cancelText","applyText","ACTIONS_TEMPLATE","_targets","on","_actions","e","preventDefault","currentTarget","_applyState","read","_cancelChanges","treeView","last","targetItemTemplate","menuenabled","chip","renderChip","TARGET_ITEM_TEMPLATE","fillMode","themeColor","rounded","removable","removeIcon","actions","icon","_createTarget","template","connectWith","empty","fieldMenu","setting","forEach","x","PivotSettingTargetV2","hint","clone","remove","item","wrapper","id","dataItem","getByUid","checked","container","kendoTreeView","checkboxes","checkChildren","result","hasChildren","aggregator","local","uid","dataTextField","autoBind","check","sender","action","H","toggleSelection","payload","state","columnAxes","_state","rowAxes","measureAxes","B","cubeSchema","restoreMeasure","items","_checkMembers","trigger","_redraw","_treeViewDataSource","off","_clickHandler","HierarchicalDataSource","schema","model","transport","fields","dsMeasures","fetchOpts","catalog","cube","fetchOptions","url","members","concat","isEmptyObject","dimensions","success","connection","restrictions","catalogName","cubeName","command","f","then","newFields","get","_getKPIOptions","buildKPImeasures","_loadFieldsCommand","newData","hash","field","dimensionUniqueName","hierarchyUniqueName","_progress","toggle","progress","destroy","fetch","plugin","outerHeight","measuresLabel","columnsLabel","rowsLabel","fieldsLabel","PivotDataSource","kpi","schemaDimensions","done","cubeBuilder","fail","error","schemaKPIs","schemaMeasures","schemaLevels","schemaHierarchies","form","dragAndDrop","dragstart","sourceNode","measure","drag","status","dropTarget","validate","setStatusClass","drop","push","add","sortIcon","getIcons","PivotSettingTarget","emptyTemplate","columnsContainer","rowsContainer","measuresContainer","_toggleHover","toggleClass","_resize","_cube","_catalog","kpiMeasure","value","goal","trend","cssProperties","registerPrefix","registerValues","prop","values","roundedValues","jQuery","kendo$1","__meta__","category","depends","hidden","default","Object","defineProperty"],"mappings":"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","file":"kendo.pivot.configurator.min.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('kendo.dom.js'), require('kendo.html.chip.js'), require('kendo.html.chiplist.js'), require('kendo.treeview.js'), require('kendo.treeview.draganddrop.js'), require('kendo.icons.js'), require('kendo.pivotgrid-common.cmn.chunk.js')) :\n    typeof define === 'function' && define.amd ? define(['exports', 'kendo.dom', 'kendo.html.chip', 'kendo.html.chiplist', 'kendo.treeview', 'kendo.treeview.draganddrop', 'kendo.icons', 'kendo.pivotgrid-common.cmn.chunk'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.kendo = global.kendo || {}, global.kendo._globals = global.kendo._globals || {}, global.kendo._globals.PivotConfigurator = {}), global.kendo._globals.Dom, global.kendo._globals.HtmlChip, global.kendo._globals.HtmlChiplist, global.kendo._globals.Treeview, global.kendo._globals.TreeviewDraganddrop, global.kendo._globals.Icons, global.kendo._globals.PivotgridCommonCmnChunk));\n})(this, (function (exports, kendo_dom_js, kendo_html_chip_js, kendo_html_chiplist_js, kendo_treeview_js, kendo_treeview_draganddrop_js, kendo_icons_js, kendo_pivotgridCommon_cmn_chunk_js) {\n    const __meta__ = {\n        id: \"pivot.configurator\",\n        name: \"PivotConfigurator\",\n        category: \"web\",\n        depends: [\"dropdownlist\", \"treeview\", \"treeview.draganddrop\", \"pivot.fieldmenu\", \"html.chip\", \"html.chiplist\", \"icons\", \"pivotgrid-common.cmn.chunk\"],\n        hidden: true\n    };\n\n\n    (function($, undefined$1) {\n        var kendo = window.kendo,\n            ui = kendo.ui,\n            encode = kendo.htmlEncode,\n            Widget = ui.Widget,\n            ns = \".kendoPivotConfigurator\",\n            HOVER_EVENTS = \"mouseenter\" + ns + \" mouseleave\" + ns,\n            SETTINGS_TEMPLATE = ({ title, headerTextId }) => '<div class=\"k-pivotgrid-configurator-header\">' +\n                                                `<div class=\"k-pivotgrid-configurator-header-text\" id=\"${headerTextId}\">${encode(title)}</div>` +\n                                              '</div>',\n            CONTENT_TEMPLATE = ({ formClass, horizontal, ariaId }) => '<div class=\"k-pivotgrid-configurator-content\">' +\n                `<form class=\"${encode(formClass)}\">` +\n                    `${horizontal ? '<div class=\"k-form-field-wrapper\">' : ''}` +\n                    '<div class=\"k-form-field\">' +\n                        `<label class=\"k-label\" id=\"${ariaId}-configurator-fields\">Fields</label>` +\n                    '</div>' +\n                    '<div class=\"k-form-field\">' +\n                      '<div class=\"k-fields-list-wrapper\"></div>' +\n                    '</div>' +\n                    `${horizontal ? '</div><div class=\"k-form-field-wrapper\">' : ''}` +\n                    '<div class=\"k-form-field\">' +\n                        `<label class=\"k-label\" id=\"${ariaId}-configurator-columns\">Columns</label>` +\n                    '</div>' +\n                    '<div class=\"k-chip-list k-column-fields\"></div>' +\n                    '<div class=\"k-form-field\">' +\n                        `<label class=\"k-label\" id=\"${ariaId}-configurator-rows\">Rows</label>` +\n                    '</div>' +\n                    '<div class=\"k-chip-list k-row-fields\"></div>' +\n                    `${horizontal ? '</div><div class=\"k-form-field-wrapper\">' : ''}` +\n                    '<div class=\"k-form-field\">' +\n                        `<label class=\"k-label\" id=\"${ariaId}-configurator-values\">Values</label>` +\n                    '</div>' +\n                    '<div class=\"k-chip-list k-column-fields\"></div>' +\n                    `${horizontal ? '</div>' : ''}` +\n                '</form>' +\n            '</div>',\n            TARGET_ITEM_TEMPLATE = ({ name }) => '<span>' +\n                    `<span class=\"k-chip-label\">${encode(name)}</span>` +\n                '</span>',\n            ACTIONS_TEMPLATE = ({ cancelText, applyText }) =>\n                    '<div class=\"k-pivotgrid-configurator-actions k-actions k-hstack k-justify-content-end\">' +\n                      '<button class=\"k-button k-button-md k-rounded-md k-button-solid k-button-solid-base\" aria-disabled=\"false\">' +\n                        `<span class=\"k-button-text\">${encode(cancelText)}</span>` +\n                      '</button>' +\n                      '<button class=\"k-button k-button-md k-rounded-md k-button-solid k-button-solid-primary\" aria-disabled=\"false\">' +\n                        `<span class=\"k-button-text\">${encode(applyText)}</span>` +\n                      '</button>' +\n                    '</div>',\n            SETTING_CONTAINER_TEMPLATE = ({ name }) => `<div class=\"k-pivotgrid-target k-pivotgrid-configurator-section\"><strong>${encode(name)}</strong><div class=\"k-pivotgrid-target-wrap\"></div>`;\n\n        function addKPI(data) {\n            var found;\n            var idx = 0;\n            var length = data.length;\n\n            for (; idx < length; idx++) {\n                if (data[idx].type == 2) {\n                    found = true;\n                    break;\n                }\n            }\n\n            if (found) {\n                data.splice(idx + 1, 0, {\n                    caption: \"KPIs\",\n                    defaultHierarchy: \"[KPIs]\",\n                    name: \"KPIs\",\n                    uniqueName: \"[KPIs]\"\n                });\n            }\n        }\n\n        function kpiNode(node) {\n            return {\n                name: node.uniqueName,\n                type: node.type\n            };\n        }\n\n        function normalizeKPIs(data) {\n            for (var idx = 0, length = data.length; idx < length; idx++) {\n                data[idx].uniqueName = data[idx].name;\n                data[idx].type = \"kpi\";\n            }\n\n            return data;\n        }\n\n        function settingTargetFromNode(node) {\n            var target = $(node).closest(\".k-pivot-setting\");\n\n            if (target.length) {\n                return target.data(\"kendoPivotSettingTarget\");\n            }\n            return null;\n        }\n\n        function getIcons(sortIcon, options) {\n            var sortable = options.sortable;\n            var result = '';\n\n            if (sortable) {\n                result += sortIcon ? `<span class=\"k-chip-action k-chip-more-action\">${kendo.ui.icon(sortIcon + \"-sm\")}</span>` : '';\n            }\n\n            if (options.filterable || sortable) {\n                result += `<span class=\"k-setting-fieldmenu k-chip-action\">${kendo.ui.icon(\"more-vertical\")}</span>`;\n            }\n\n            result += `<span class=\"k-setting-delete k-chip-action\">${kendo.ui.icon(\"x\")}</span>`;\n\n            return result;\n        }\n\n        var PivotConfiguratorV2 = Widget.extend({\n            init: function(element, options) {\n                Widget.fn.init.call(this, element, options);\n\n                this._ariaId = this.element.attr(\"id\") || kendo.guid();\n                this.element.addClass(\"k-pivotgrid-configurator\");\n                this.element.attr({\n                    \"role\": \"dialog\",\n                    \"aria-hidden\": true,\n                    \"aria-labelledby\": `${this._ariaId}-configurator-header`\n                });\n\n                this._dataSource();\n\n                if (this.options.navigatable) {\n                    this._initPivotGridConfiguratorNavigation();\n                }\n\n                this._layout();\n\n                this.refresh();\n\n                if (options.height) {\n                    this.element.height(options.height);\n                }\n\n                kendo.notify(this);\n            },\n\n            events: [],\n\n            options: {\n                name: \"PivotConfiguratorV2\",\n                orientation: \"vertical\",\n                filterable: false,\n                sortable: false,\n                messages: {\n                    title: \"Settings\",\n                    cancelButtonText: \"Cancel\",\n                    applyButtonText: \"Apply\",\n                    measures: \"Select some fields to begin setup\",\n                    columns: \"Select some fields to begin setup\",\n                    rows: \"Select some fields to begin setup\"\n                }\n            },\n\n            setDataSource: function(dataSource) {\n                this.options.dataSource = dataSource;\n\n                this._dataSource();\n\n                if (this.measures) {\n                    this.measures.setDataSource(dataSource);\n                }\n\n                if (this.rows) {\n                    this.rows.setDataSource(dataSource);\n                }\n\n                if (this.columns) {\n                    this.columns.setDataSource(dataSource);\n                }\n\n                this.refresh();\n            },\n\n            _initPivotGridConfiguratorNavigation: function() {\n                var that = this;\n                that.configuratorNavigation = new kendo_pivotgridCommon_cmn_chunk_js.I({ tabIndex: 0 });\n                that.configuratorNavigation.start(that.element[0]);\n\n                const firstCell = that.configuratorNavigation.first;\n\n                if (firstCell) {\n                    firstCell.setAttribute('tabindex', '0');\n                }\n            },\n\n            _dataSource: function() {\n                var that = this;\n\n                if (that.dataSource && that._refreshHandler) {\n                    that.dataSource.unbind(\"change\", that._refreshHandler)\n                                   .unbind(\"error\", that._errorHandler)\n                                   .unbind(\"progress\", that._progressHandler);\n                } else {\n                    that._errorHandler = that._error.bind(that);\n                    that._refreshHandler = that.refresh.bind(that);\n                    that._progressHandler = that._requestStart.bind(that);\n                }\n\n                that.dataSource = kendo.data.PivotDataSourceV2.create(that.options.dataSource);\n                that.dataSource.bind(\"change\", that._refreshHandler)\n                               .bind(\"error\", that._errorHandler)\n                               .bind(\"progress\", that._progressHandler);\n            },\n\n            _layout: function() {\n\n                var that = this;\n                var options = that.options;\n                var messages = options.messages;\n                var horizontal = options.orientation == \"horizontal\";\n\n                var panel = $(\"<div class='k-pivotgrid-configurator-panel k-pivotgrid-configurator-push'></div>\");\n\n                panel.addClass(horizontal ? \"k-pivotgrid-configurator-horizontal\" : \"k-pivotgrid-configurator-vertical\");\n\n                that.element.append(panel);\n\n                that.panel = panel;\n\n                $(SETTINGS_TEMPLATE({ title: this.options.messages.title, headerTextId: `${that._ariaId}-configurator-header` })).appendTo(that.panel);\n\n                $(CONTENT_TEMPLATE({ formClass: horizontal ? \"k-form k-form-md k-form-horizontal\" : \"k-form k-form-md\", filterable: options.filterable, horizontal: horizontal, ariaId: that._ariaId }))\n                    .appendTo(that.panel).find(\".k-chip-list\")\n                    .each(function(index, elm) {\n                        kendo.html.renderChipList(elm, $.extend({}, options));\n                        $(elm).attr({\n                            \"role\": \"listbox\",\n                            \"aria-orientation\": \"horizontal\",\n                        });\n                    });\n\n                that._fields();\n                $(ACTIONS_TEMPLATE({ cancelText: messages.cancelButtonText, applyText: messages.applyButtonText })).appendTo(that.panel);\n                that._targets();\n\n                that.element.on(\"click\" + ns, \".k-pivotgrid-configurator-actions > button\", that._actions.bind(that));\n            },\n\n            _actions: function(e) {\n                e.preventDefault();\n\n                var target = $(e.currentTarget).closest(\":not(path,svg)\");\n                if (target.index()) {\n                    this.columns._applyState();\n                    this.rows._applyState();\n                    this.measures._applyState();\n                    this.dataSource.read();\n                } else {\n                    this.columns._cancelChanges();\n                    this.rows._cancelChanges();\n                    this.measures._cancelChanges();\n                    this.treeView.dataSource.read();\n                }\n            },\n\n            _targets: function() {\n                var that = this;\n                var columns = that.panel.find(\".k-column-fields\").first();\n                var rows = that.panel.find(\".k-row-fields\");\n                var measures = that.panel.find(\".k-chip-list\").last();\n                var options = this.options;\n\n                var targetItemTemplate = ({ name, menuenabled }) => {\n                        var chip = kendo.html.renderChip(TARGET_ITEM_TEMPLATE({ name, menuenabled }), $.extend({}, options, {\n                            fillMode: \"solid\",\n                            themeColor: \"base\",\n                            rounded: \"md\",\n                            removable: true,\n                            removeIcon: \"x-circle\",\n                            actions: menuenabled ? [\n                                { icon: \"more-vertical\" }\n                            ] : null\n                        }));\n\n                        return chip;\n                    };\n\n                this.columns = this._createTarget(columns, {\n                    navigatable: options.navigatable,\n                    filterable: options.filterable,\n                    sortable: options.sortable,\n                    template: targetItemTemplate,\n                    connectWith: rows,\n                    messages: {\n                        empty: options.messages.columns,\n                        fieldMenu: this.options.messages.fieldMenu\n                    },\n                    configuratorNavigation: that.configuratorNavigation\n                });\n                this.columns.element.attr(\"aria-labelledby\", `${this._ariaId}-configurator-header ${this._ariaId}-configurator-columns`);\n\n                this.rows = this._createTarget(rows, {\n                    navigatable: options.navigatable,\n                    filterable: options.filterable,\n                    sortable: options.sortable,\n                    template: targetItemTemplate,\n                    setting: \"rows\",\n                    connectWith: columns,\n                    messages: {\n                        empty: this.options.messages.rows,\n                        fieldMenu: this.options.messages.fieldMenu\n                    },\n                    configuratorNavigation: that.configuratorNavigation\n                });\n                this.rows.element.attr(\"aria-labelledby\", `${this._ariaId}-configurator-header ${this._ariaId}-configurator-rows`);\n\n                this.measures = this._createTarget(measures, {\n                    navigatable: options.navigatable,\n                    filterable: false,\n                    sortable: false,\n                    setting: \"measures\",\n                    template: targetItemTemplate,\n                    messages: {\n                        empty: options.messages.measures,\n                        fieldMenu: this.options.messages.fieldMenu\n                    },\n                    configuratorNavigation: that.configuratorNavigation\n                });\n\n                this.measures.element.attr(\"aria-labelledby\", `${this._ariaId}-configurator-header ${this._ariaId}-configurator-values`);\n\n                [this.columns, this.rows, this.measures].forEach(x=> x.element.find(\".k-chip\").attr(\"role\", \"option\"));\n            },\n\n            _createTarget: function(element, options) {\n                var that = this;\n                return new kendo.ui.PivotSettingTargetV2(element, $.extend({\n                    dataSource: this.dataSource,\n                    hint: function(element) {\n                        return element.clone();\n                    },\n                    remove: function(e) {\n                        var item = that.treeView.wrapper\n                            .find(\"[data-name='\" + e.name + \"']\")\n                            .closest(\"li\");\n                        var id = item.attr(kendo.attr(\"uid\"));\n                        var dataItem = that.treeView.dataSource.getByUid(id);\n\n                        if (dataItem) {\n                            dataItem.checked = false;\n                            item.find(\"input\").attr(\"checked\", false);\n                        }\n                    },\n                    template: options.template\n                }, options));\n            },\n\n            _fields: function() {\n                var that = this;\n                var container = that.element.find(\".k-fields-list-wrapper\");\n\n                this.treeView = $(`<div aria-labelledby=\"${this._ariaId}-configurator-header ${this._ariaId}-configurator-fields\" />`).appendTo(container)\n                    .kendoTreeView({\n                        checkboxes: {\n                            checkChildren: true,\n                            template: ({ item }) => {\n                                var result = '';\n\n                                if ((item.hasChildren || item.aggregator || item.local) && item.uniqueName !== \"[KPIs]\" && item.uniqueName !== \"[Measures]\" && item.uniqueName !== \"Measures\") {\n                                    result += `<input type=\"checkbox\" data-name=\"${encode(item.uniqueName)}\" ${item.checked ? \"checked\" : \"\"} class=\"k-checkbox k-checkbox-md k-rounded-md\" id=\"${encode(item.uid)}\" tabindex=\"-1\">`;\n                                }\n\n                                return result;\n                            }\n                        },\n                        dataTextField: \"caption\",\n                        autoBind: false,\n                        check: function(e) {\n                          var dataItem = e.sender.dataItem(e.node);\n                          var action = {\n                            type: kendo_pivotgridCommon_cmn_chunk_js.H.toggleSelection,\n                            payload: dataItem\n                          };\n                          var state = {\n                            columnAxes: that.columns._state(),\n                            rowAxes: that.rows._state(),\n                            measureAxes: that.measures._state()\n                          };\n                          var result = kendo_pivotgridCommon_cmn_chunk_js.B(state, action);\n\n                          if (that.dataSource.cubeSchema && result.measureAxes && result.measureAxes.length &&\n                            result.measureAxes.length > state.measureAxes.length) {\n                              that.dataSource.cubeSchema.restoreMeasure(result.measureAxes, dataItem);\n                          }\n\n                          if (dataItem.defaultHierarchy && dataItem.items && dataItem.items.length) {\n                              that._checkMembers([{ name: dataItem.defaultHierarchy }], dataItem.items);\n                              dataItem.items.trigger(\"change\");\n                          }\n\n                          if (result.columnAxes) {\n                              that.columns._state(result.columnAxes);\n                              that.columns._redraw();\n                          }\n                          if (result.rowAxes) {\n                              that.rows._state(result.rowAxes);\n                              that.rows._redraw();\n                          }\n                          if (result.measureAxes) {\n                              that.measures._state(result.measureAxes);\n                              that.measures._redraw();\n                          }\n                        },\n                        dataSource: this._treeViewDataSource()\n                     })\n                    .data(\"kendoTreeView\");\n\n                this.treeView.wrapper.off(\"click\", this.treeView._clickHandler);\n            },\n\n            _treeViewDataSource: function() {\n                var that = this;\n\n                return kendo.data.HierarchicalDataSource.create({\n                    schema: {\n                        model: {\n                            id: \"uniqueName\",\n                            hasChildren: function(item) {\n                                if (that.dataSource.cubeSchema && item.uniqueName !== \"Measures\") {\n                                    item.local = true;\n                                    return false;\n                                }\n                                return !(\"hierarchyUniqueName\" in item) && !(\"aggregator\" in item);\n                            }\n                        }\n                    },\n                    transport: {\n                        read: function(options) {\n                            var node;\n                            var transport = that.dataSource.transport;\n                            var catalog = transport.catalog();\n                            var cube = transport.cube();\n                            var fetchOptions = {\n                                url: transport.options.read\n                            };\n                            var columns = that.columns._state();\n                            var rows = that.rows._state();\n                            var measures = that.measures._state();\n                            var members = columns.concat(rows).concat(measures);\n                            var fields;\n                            var dsMeasures;\n                            var fetchOpts;\n\n                            if ($.isEmptyObject(options.data)) {\n                                if (that.dataSource.cubeSchema) {\n                                    fields = that.dataSource.cubeSchema.dimensions();\n                                    that._checkMembers(members, fields);\n                                    options.success(fields);\n                                } else {\n                                    fetchOpts = {\n                                        connection: {\n                                            catalog: catalog,\n                                            cube: cube\n                                        },\n                                        restrictions: {\n                                            catalogName: catalog,\n                                            cubeName: cube\n                                        },\n                                        command: 'schemaDimensions'\n                                    };\n\n                                    kendo_pivotgridCommon_cmn_chunk_js.f(fetchOptions, fetchOpts)\n                                        .then(function(newFields) {\n                                            that._checkMembers(members, newFields);\n                                            addKPI(newFields);\n                                            options.success(newFields);\n                                         });\n                                }\n                            } else {\n                                //Hack to get the actual node as the HierarchicalDataSource does not support passing it\n                                node = that.treeView.dataSource.get(options.data.uniqueName);\n\n                                if (that.dataSource.cubeSchema) {\n                                    dsMeasures = that.dataSource.measures();\n                                    that._checkMembers(members, dsMeasures);\n                                    options.success(dsMeasures);\n                                } else {\n                                    if (node.uniqueName === \"[KPIs]\") {\n                                        kendo_pivotgridCommon_cmn_chunk_js.f(fetchOptions, that._getKPIOptions(catalog, cube))\n                                        .then(function(newFields) {\n                                            options.success(normalizeKPIs(newFields));\n                                        });\n                                    } else if (node.type == \"kpi\") {\n                                        options.success(buildKPImeasures(node));\n                                    } else {\n                                        kendo_pivotgridCommon_cmn_chunk_js.f(fetchOptions ,that._loadFieldsCommand(node, catalog, cube))\n                                        .then(function(newFields) {\n                                            that._checkMembers(members, newFields);\n                                            options.success(newFields);\n                                        });\n                                    }\n                                }\n                            }\n                        }\n                    }\n                });\n            },\n\n            _checkMembers: function(members, newData) {\n                var hash = {};\n                var index = 0;\n\n                for (index = 0; index < members.length; index++) {\n                    hash[members[index].name] = true;\n                }\n\n                for (index = 0; index < newData.length; index++) {\n                    if (hash[newData[index].uniqueName]) {\n                        newData[index].checked = true;\n                    }\n                }\n            },\n\n            _getKPIOptions: function(catalog, cube) {\n                return {\n                    connection: {\n                        catalog: catalog,\n                        cube: cube\n                    },\n                    restrictions: {\n                        catalogName: catalog,\n                        cubeName: cube\n                    },\n                    command: 'schemaKPIs'\n                };\n            },\n\n            _loadFieldsCommand: function(field, catalog, cube) {\n                var command;\n                var dimensionUniqueName;\n                var hierarchyUniqueName;\n\n                if (field.type === 2) {\n                    command = 'schemaMeasures';\n                } else if (field.dimensionUniqueName) {\n                    command = 'schemaLevels';\n                    hierarchyUniqueName = field.uniqueName;\n                } else {\n                    command = 'schemaHierarchies';\n                    dimensionUniqueName = field.uniqueName;\n                }\n\n                var options = {\n                    connection: {\n                        catalog: catalog,\n                        cube: cube\n                    },\n                    restrictions: {\n                        catalogName: catalog,\n                        cubeName: cube,\n                        hierarchyUniqueName: hierarchyUniqueName,\n                        dimensionUniqueName: dimensionUniqueName\n                    },\n                    command: command\n                };\n\n                return options;\n            },\n\n            _progress: function(toggle) {\n                kendo.ui.progress(this.element, toggle);\n            },\n\n            _error: function() {\n                this._progress(false);\n            },\n\n            _requestStart: function() {\n                this._progress(true);\n            },\n\n            destroy: function() {\n                Widget.fn.destroy.call(this);\n\n                this.dataSource.unbind(\"change\", this._refreshHandler);\n\n                this.element.off(ns);\n\n                this.rows.destroy();\n                this.columns.destroy();\n                this.measures.destroy();\n                this.treeView.destroy();\n\n                this.element = null;\n                this._refreshHandler = null;\n            },\n\n            refresh: function() {\n                if (this.treeView) {\n                    this.treeView.dataSource.fetch();\n                }\n\n                this._progress(false);\n            }\n\n        });\n\n        ui.plugin(PivotConfiguratorV2);\n\n        var PivotConfigurator = Widget.extend({\n            init: function(element, options) {\n                Widget.fn.init.call(this, element, options);\n\n                this.element.addClass(\"k-pivotgrid-configurator-panel kendo-jquery\");\n\n                if (this.options.height) {\n                    this.element.outerHeight(this.options.height);\n                }\n\n                this._dataSource();\n\n                this._layout();\n\n                this.refresh();\n\n                kendo.notify(this);\n            },\n\n            events: [],\n\n            options: {\n                name: \"PivotConfigurator\",\n                filterable: false,\n                sortable: false,\n                messages: {\n                    measures: \"Drop Data Fields Here\",\n                    columns: \"Drop Column Fields Here\",\n                    rows: \"Drop Rows Fields Here\",\n                    measuresLabel: \"Measures\",\n                    columnsLabel: \"Columns\",\n                    rowsLabel: \"Rows\",\n                    fieldsLabel: \"Fields\"\n                }\n            },\n\n            _dataSource: function() {\n                var that = this;\n\n                if (that.dataSource && that._refreshHandler) {\n                    that.dataSource.unbind(\"change\", that._refreshHandler)\n                                   .unbind(\"error\", that._errorHandler)\n                                   .unbind(\"progress\", that._progressHandler);\n                } else {\n                    that._errorHandler = that._error.bind(that);\n                    that._refreshHandler = that.refresh.bind(that);\n                    that._progressHandler = that._requestStart.bind(that);\n                }\n\n                that.dataSource = kendo.data.PivotDataSource.create(that.options.dataSource);\n                that.dataSource.bind(\"change\", that._refreshHandler)\n                               .bind(\"error\", that._errorHandler)\n                               .bind(\"progress\", that._progressHandler);\n            },\n\n            setDataSource: function(dataSource) {\n                this.options.dataSource = dataSource;\n\n                this._dataSource();\n\n                if (this.measures) {\n                    this.measures.setDataSource(dataSource);\n                }\n\n                if (this.rows) {\n                    this.rows.setDataSource(dataSource);\n                }\n\n                if (this.columns) {\n                    this.columns.setDataSource(dataSource);\n                }\n\n                this.refresh();\n            },\n\n            _treeViewDataSource: function() {\n                var that = this;\n\n                return kendo.data.HierarchicalDataSource.create({\n                    schema: {\n                        model: {\n                            id: \"uniqueName\",\n                            hasChildren: function(item) {\n                                return !(\"hierarchyUniqueName\" in item) && !(\"aggregator\" in item);\n                            }\n                        }\n                    },\n                    transport: {\n                        read: function(options) {\n                            var promise;\n                            var node;\n                            var kpi;\n\n                            if ($.isEmptyObject(options.data)) {\n                                promise = that.dataSource.schemaDimensions();\n\n                                promise.done(function(data) {\n                                            if (!that.dataSource.cubeBuilder) {\n                                                addKPI(data);\n                                            }\n                                            options.success(data);\n                                        })\n                                        .fail(options.error);\n                            } else {\n                                //Hack to get the actual node as the HierarchicalDataSource does not support passing it\n                                node = that.treeView.dataSource.get(options.data.uniqueName);\n\n                                if (node.uniqueName === \"[KPIs]\") {\n                                    kpi = true;\n                                    promise = that.dataSource.schemaKPIs();\n                                    promise.done(function(data) {\n                                                options.success(normalizeKPIs(data));\n                                           })\n                                           .fail(options.error);\n                                } else if (node.type == \"kpi\") {\n                                    kpi = true;\n                                    options.success(buildKPImeasures(node));\n                                }\n\n                                if (!kpi) {\n                                    if (node.type == 2) { //measure\n                                        promise = that.dataSource.schemaMeasures();\n                                    } else if (node.dimensionUniqueName) { // hierarchy\n                                        promise = that.dataSource.schemaLevels(options.data.uniqueName);\n                                    } else { // dimension\n                                        promise = that.dataSource.schemaHierarchies(options.data.uniqueName);\n                                    }\n\n                                    promise.done(options.success)\n                                            .fail(options.error);\n                                }\n                            }\n                        }\n                    }\n                });\n            },\n\n            _progress: function(toggle) {\n                kendo.ui.progress(this.element, toggle);\n            },\n\n            _error: function() {\n                this._progress(false);\n            },\n\n            _requestStart: function() {\n                this._progress(true);\n            },\n\n            _layout: function() {\n                $('<div class=\"k-pivotgrid-configurator\"><div class=\"k-pivotgrid-configurator-content\"></div></div>').appendTo(this.element);\n                this.form = this.element.find('.k-pivotgrid-configurator-content');\n\n                this._fields();\n                this._targets();\n            },\n\n            _fields: function() {\n                var container = $('<div class=\"k-pivotgrid-fields k-pivotgrid-configurator-section\"><strong>' + encode(this.options.messages.fieldsLabel) + '</strong><div class=\"k-fields-list-wrapper\"></div></div>').appendTo(this.form);\n\n                var template = ({ item }) => {\n                    var result = '';\n\n                    if (item.type == 2 || item.uniqueName == \"[KPIs]\") {\n                        result += kendo.ui.icon(item.type == 2 ? \"sum\" : \"caret-alt-expand\"/* \"kpi\" */);\n                    } else if (item.type && item.type !== \"kpi\") {\n                        result += kendo.ui.icon(\"arrows-axes\");\n                    }\n\n                    result += `${encode(item.caption || item.name)}`;\n\n                    return result;\n                };\n\n                this.treeView = $(\"<div/>\").appendTo(container.find('.k-fields-list-wrapper'))\n                    .kendoTreeView({\n                        template: template,\n                        dataTextField: \"caption\",\n                        dragAndDrop: true,\n                        autoBind: false,\n                        dataSource: this._treeViewDataSource(),\n                        dragstart: function(e) {\n                            var dataItem = this.dataItem(e.sourceNode);\n\n                            if ((!dataItem.hasChildren && !dataItem.aggregator && !dataItem.measure) || (dataItem.type == 2) || dataItem.uniqueName === \"[KPIs]\") {\n                                e.preventDefault();\n                            }\n                        },\n                        drag: function(e) {\n                            var status = \"cancel\";\n                            var setting = settingTargetFromNode(e.dropTarget);\n\n                            if (setting && setting.validate(this.dataItem(e.sourceNode))) {\n                                status = \"plus\";\n                            }\n\n                            e.setStatusClass(status);\n                        },\n                        drop: function(e) {\n                            e.preventDefault();\n\n                            var setting = settingTargetFromNode(e.dropTarget);\n                            var node = this.dataItem(e.sourceNode);\n                            var idx, length, measures;\n                            var name;\n\n                            if (setting && setting.validate(node)) {\n                                name = node.defaultHierarchy || node.uniqueName;\n\n                                if (node.type === \"kpi\") {\n                                    measures = buildKPImeasures(node);\n                                    length = measures.length;\n                                    name = [];\n\n                                    for (idx = 0; idx < length; idx++) {\n                                        name.push(kpiNode(measures[idx]));\n                                    }\n                                } else if (node.kpi) {\n                                    name = [kpiNode(node)];\n                                }\n\n                                setting.add(name);\n                            }\n                        }\n                     })\n                    .data(\"kendoTreeView\");\n            },\n\n            _createTarget: function(element, options) {\n                var template;\n\n                template = ({ name, sortIcon }) => ''\n                    + `<div class=\"k-chip k-chip-md k-rounded-md k-chip-solid k-chip-solid-base\" data-${kendo.ns}name=\"${name}\">`\n                        + '<span class=\"k-chip-content\">'\n                            + `<span class=\"k-chip-label\">${name}</span>`\n                        + '</span>'\n                        + '<span class=\"k-chip-actions k-field-actions\">'\n                        + getIcons(sortIcon, options)\n                        + '</span>'\n                    + '</div>';\n\n                return new kendo.ui.PivotSettingTarget(element, $.extend({\n                    dataSource: this.dataSource,\n                    template: template,\n                    emptyTemplate: (data) => `<span class=\"k-empty\">${data}</span>`\n                }, options));\n            },\n\n            _targets: function() {\n                var container = $('<div class=\"k-pivotgrid-targets\"/>').appendTo(this.form);\n\n                var columnsContainer = $(SETTING_CONTAINER_TEMPLATE({ name: this.options.messages.columnsLabel, icon: \"columns\" })).appendTo(container);\n                var columns = $('<div class=\"k-column-fields k-chip-list\" />').appendTo(columnsContainer.find('.k-pivotgrid-target-wrap'));\n\n                var rowsContainer = $(SETTING_CONTAINER_TEMPLATE({ name: this.options.messages.rowsLabel, icon: \"rows\" })).appendTo(container);\n                var rows = $('<div class=\"k-column-fields k-chip-list\" />').appendTo(rowsContainer.find('.k-pivotgrid-target-wrap'));\n\n                var measuresContainer = $(SETTING_CONTAINER_TEMPLATE({ name: this.options.messages.measuresLabel, icon: \"sum\" })).appendTo(container);\n                var measures = $('<div class=\"k-column-fields k-chip-list\" />').appendTo(measuresContainer.find('.k-pivotgrid-target-wrap'));\n\n                var options = this.options;\n\n                this.columns = this._createTarget(columns, {\n                    filterable: options.filterable,\n                    sortable: options.sortable,\n                    connectWith: rows,\n                    messages: {\n                        empty: options.messages.columns,\n                        fieldMenu: options.messages.fieldMenu\n                    }\n                });\n\n                this.rows = this._createTarget(rows, {\n                    filterable: options.filterable,\n                    sortable: options.sortable,\n                    setting: \"rows\",\n                    connectWith: columns,\n                    messages: {\n                        empty: this.options.messages.rows,\n                        fieldMenu: this.options.messages.fieldMenu\n                    }\n                });\n\n                this.measures = this._createTarget(measures, {\n                    setting: \"measures\",\n                    messages: {\n                        empty: options.messages.measures\n                    }\n                });\n\n                columns\n                    .add(rows)\n                    .add(measures)\n                    .on(HOVER_EVENTS, \".k-item:not(.k-empty)\", this._toggleHover);\n            },\n\n            _toggleHover: function(e) {\n                $(e.currentTarget).closest(\":not(path,svg)\").toggleClass(\"k-hover\", e.type === \"mouseenter\");\n            },\n\n            _resize: function() {\n                var element = this.element;\n                var height = this.options.height;\n\n                if (!height) {\n                    return;\n                }\n\n                element.outerHeight(height);\n            },\n\n            refresh: function() {\n                var dataSource = this.dataSource;\n\n                if (dataSource.cubeBuilder || this._cube !== dataSource.cube() || this._catalog !== dataSource.catalog()) {\n                    this.treeView.dataSource.fetch();\n                }\n\n                this._catalog = this.dataSource.catalog();\n                this._cube = this.dataSource.cube();\n\n                this._resize();\n\n                this._progress(false);\n            },\n\n            destroy: function() {\n                Widget.fn.destroy.call(this);\n\n                this.dataSource.unbind(\"change\", this._refreshHandler);\n\n                this.form.find(\".k-pivot-setting\").off(ns);\n\n                this.rows.destroy();\n                this.columns.destroy();\n                this.measures.destroy();\n                this.treeView.destroy();\n\n                this.element = null;\n                this._refreshHandler = null;\n            }\n        });\n\n        function kpiMeasure(name, measure, type) {\n            return {\n                hierarchyUniqueName: name,\n                uniqueName: measure,\n                caption: measure,\n                measure: measure,\n                name: measure,\n                type: type,\n                kpi: true\n            };\n        }\n\n        function buildKPImeasures(node) {\n            var name = node.name;\n            return [\n                kpiMeasure(name, node.value, \"value\"),\n                kpiMeasure(name, node.goal, \"goal\"),\n                kpiMeasure(name, node.status, \"status\"),\n                kpiMeasure(name, node.trend, \"trend\")\n            ];\n        }\n\n        kendo.cssProperties.registerPrefix(\"HTMLChip\", \"k-chip-\");\n\n        kendo.cssProperties.registerValues(\"HTMLChip\", [{\n            prop: \"rounded\",\n            values: kendo.cssProperties.roundedValues.concat([['md', 'md']])\n        }]);\n\n        ui.plugin(PivotConfigurator);\n\n    })(window.kendo.jQuery);\n    var kendo$1 = kendo;\n\n    exports.__meta__ = __meta__;\n    exports.default = kendo$1;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"]}